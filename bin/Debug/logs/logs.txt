---------------------------------------------- |> (8/19/2023 7:01:02 PM)
Method; (StartUp) |> (8/19/2023 7:01:02 PM)
method; (PlayerClass.PlayerClass) [Player init], is AI (False) |> (8/19/2023 7:01:07 PM)
method; (PlayerClass.PlayerClass) [Player init], is AI (True) |> (8/19/2023 7:01:07 PM)
method; (AIClass.AIClass()) [AI INIT] |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.MakeDrawPile) |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (CardClass.CardClass) [Card INIT] |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.Deal) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.Deal) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.DisplayDrawPile) [drew stuff] |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 1, 3, 4)
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (uno.CardClass) |> (8/19/2023 7:01:07 PM)
method; (PlayerClass.DeactivateClick) |> (8/19/2023 7:01:07 PM)
method; (CardClass.SetPBLocation), x, y; (770, 945) |> (8/19/2023 7:01:07 PM)
method; (CardClass.SetPBLocation), x, y; (825, 945) |> (8/19/2023 7:01:07 PM)
method; (CardClass.SetPBLocation), x, y; (880, 945) |> (8/19/2023 7:01:07 PM)
method; (CardClass.SetPBLocation), x, y; (935, 945) |> (8/19/2023 7:01:07 PM)
method; (CardClass.SetPBLocation), x, y; (990, 945) |> (8/19/2023 7:01:07 PM)
method; (CardClass.SetPBLocation), x, y; (1045, 945) |> (8/19/2023 7:01:07 PM)
method; (CardClass.SetPBLocation), x, y; (1100, 945) |> (8/19/2023 7:01:07 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/19/2023 7:01:07 PM)
method; (PlayerClass.UpdatePoints) |> (8/19/2023 7:01:07 PM)
method; (PlayerClass.DrawCards) |> (8/19/2023 7:01:07 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:07 PM)
method; (PlayerClass.DeactivateClick) |> (8/19/2023 7:01:07 PM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/19/2023 7:01:07 PM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/19/2023 7:01:07 PM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/19/2023 7:01:07 PM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/19/2023 7:01:07 PM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/19/2023 7:01:07 PM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/19/2023 7:01:07 PM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/19/2023 7:01:07 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/19/2023 7:01:07 PM)
method; (PlayerClass.UpdatePoints) |> (8/19/2023 7:01:07 PM)
method; (PlayerClass.DrawCards) |> (8/19/2023 7:01:07 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:07 PM)
method; (PlayerClass.ActivateClick) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.DisplayDiscardPile) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    is_Flipped (False),
    is_Reverced (False),
    PlayerIndex (0, card amount 7),
    PlusAmount (0)
Discard Pile Count; (1), Top Card; (blue, 1) |> (8/19/2023 7:01:07 PM)
method; (GameLogicClass.FindPictureInList) |> (8/19/2023 7:01:09 PM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (8/19/2023 7:01:09 PM)
method; (GameLogicClass.CardPlay), c_card; (blue) (2), error |> (8/19/2023 7:01:09 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/19/2023 7:01:09 PM)
method; (GameLogicClass.AddLogic) |> (8/19/2023 7:01:09 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/19/2023 7:01:09 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Top Deck (blue, 2), Player Index (1) |> (8/19/2023 7:01:09 PM)
method; (PlayerClass.DeactivateClick) |> (8/19/2023 7:01:09 PM)
method; (CardClass.SetPBLocation), x, y; (795, 945) |> (8/19/2023 7:01:09 PM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/19/2023 7:01:09 PM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/19/2023 7:01:09 PM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/19/2023 7:01:09 PM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/19/2023 7:01:09 PM)
method; (CardClass.SetPBLocation), x, y; (1070, 945) |> (8/19/2023 7:01:09 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (1070, 1070) |> (8/19/2023 7:01:09 PM)
method; (PlayerClass.UpdatePoints) |> (8/19/2023 7:01:09 PM)
method; (PlayerClass.DrawCards) |> (8/19/2023 7:01:09 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:09 PM)
method; (PlayerClass.DeactivateClick) |> (8/19/2023 7:01:09 PM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/19/2023 7:01:09 PM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/19/2023 7:01:09 PM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/19/2023 7:01:09 PM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/19/2023 7:01:09 PM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/19/2023 7:01:09 PM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/19/2023 7:01:09 PM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/19/2023 7:01:09 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/19/2023 7:01:09 PM)
method; (PlayerClass.UpdatePoints) |> (8/19/2023 7:01:10 PM)
method; (PlayerClass.DrawCards) |> (8/19/2023 7:01:10 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:10 PM)
method; (PlayerClass.ActivateClick) |> (8/19/2023 7:01:10 PM)
method; (GameLogicClass.DisplayDiscardPile) |> (8/19/2023 7:01:10 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/19/2023 7:01:10 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:10 PM)
method; (GameLogicClass.FindPictureInList) |> (8/19/2023 7:01:10 PM)
Method; (AIClass.Play()) [AI Play], Current player; (uno.PlayerClass), Player e_Hand amount; (5), Card index; (0), Card (e_Hand); (uno.CardClass), game.is_Flipped; (False); Card (Hand); 0 |> (8/19/2023 7:01:10 PM)
method; (GameLogicClass.FindPictureInList) |> (8/19/2023 7:01:10 PM)
method; (GameLogicClass.CardPlay), c_card; (red) (+4_wild), add, 4 |> (8/19/2023 7:01:13 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/19/2023 7:01:13 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:13 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:13 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:13 PM)
method; (GameLogicClass.CardClass) |> (8/19/2023 7:01:13 PM)
method; (GameLogicClass.AddCards), cards added; (AddCards Index: 0 AddCards Index: 0 AddCards Index: 0 AddCards Index: 0 ) |> (8/19/2023 7:01:13 PM)
method; (GameLogicClass.AddLogic) |> (8/19/2023 7:01:13 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/19/2023 7:01:13 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Top Deck (red, +4_wild), Player Index (0) |> (8/19/2023 7:01:13 PM)
method; (PlayerClass.DeactivateClick) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (685, 945) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (740, 945) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (795, 945) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (1070, 945) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (1125, 945) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (1180, 945) |> (8/19/2023 7:01:13 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (1180, 1180) |> (8/19/2023 7:01:13 PM)
method; (PlayerClass.UpdatePoints) |> (8/19/2023 7:01:13 PM)
method; (PlayerClass.DrawCards) |> (8/19/2023 7:01:13 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:13 PM)
method; (PlayerClass.DeactivateClick) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (795, 5) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (850, 5) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (905, 5) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (960, 5) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (1015, 5) |> (8/19/2023 7:01:13 PM)
method; (CardClass.SetPBLocation), x, y; (1070, 5) |> (8/19/2023 7:01:13 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (1070, 1070) |> (8/19/2023 7:01:13 PM)
method; (PlayerClass.UpdatePoints) |> (8/19/2023 7:01:13 PM)
method; (PlayerClass.DrawCards) |> (8/19/2023 7:01:13 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:13 PM)
method; (PlayerClass.ActivateClick) |> (8/19/2023 7:01:13 PM)
method; (GameLogicClass.DisplayDiscardPile) |> (8/19/2023 7:01:13 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/19/2023 7:01:13 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    is_Flipped (False),
    is_Reverced (False),
    PlayerIndex (0, card amount 10),
    PlusAmount (0)
Discard Pile Count; (3), Top Card; (red, +4_wild) |> (8/19/2023 7:01:13 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    is_Flipped (False),
    is_Reverced (False),
    PlayerIndex (0, card amount 10),
    PlusAmount (0)
Discard Pile Count; (3), Top Card; (red, +4_wild) |> (8/19/2023 7:01:13 PM)
method; (GameLogicClass.FindPictureInList) |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.CardPlay), c_card; (red) (8), error |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.AddLogic) |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Top Deck (red, 8), Player Index (1) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.DeactivateClick) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (715, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (770, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (825, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (880, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (935, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (990, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (1045, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (1100, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (1155, 945) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (1155, 1155) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.UpdatePoints) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.DrawCards) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.DeactivateClick) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (795, 5) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (850, 5) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (905, 5) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (960, 5) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (1015, 5) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (1070, 5) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (1070, 1070) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.UpdatePoints) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.DrawCards) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.ActivateClick) |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.DisplayDiscardPile) |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.FindPictureInList) |> (8/19/2023 7:01:17 PM)
Method; (AIClass.Play()) [AI Play], Current player; (uno.PlayerClass), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (uno.CardClass), game.is_Flipped; (False); Card (Hand); 4 |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.FindPictureInList) |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (8), error |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.AddLogic) |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (4), Top Deck (yellow, 8), Player Index (0) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.DeactivateClick) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (715, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (770, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (825, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (880, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (935, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (990, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (1045, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (1100, 945) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (1155, 945) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (1155, 1155) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.UpdatePoints) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.DrawCards) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.DeactivateClick) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/19/2023 7:01:17 PM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (1045, 1045) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.UpdatePoints) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.DrawCards) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:17 PM)
method; (PlayerClass.ActivateClick) |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.DisplayDiscardPile) |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    is_Flipped (False),
    is_Reverced (False),
    PlayerIndex (0, card amount 9),
    PlusAmount (0)
Discard Pile Count; (5), Top Card; (yellow, 8) |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    is_Flipped (False),
    is_Reverced (False),
    PlayerIndex (0, card amount 9),
    PlusAmount (0)
Discard Pile Count; (5), Top Card; (yellow, 8) |> (8/19/2023 7:01:17 PM)
method; (GameLogicClass.FindPictureInList) |> (8/19/2023 7:01:21 PM)
method; (GameLogicClass.cardPB_Click), Card Index (8) |> (8/19/2023 7:01:21 PM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (6), error |> (8/19/2023 7:01:21 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/19/2023 7:01:21 PM)
method; (GameLogicClass.AddLogic) |> (8/19/2023 7:01:21 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/19/2023 7:01:21 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (8), Top Deck (yellow, 6), Player Index (1) |> (8/19/2023 7:01:21 PM)
method; (PlayerClass.DeactivateClick) |> (8/19/2023 7:01:21 PM)
method; (CardClass.SetPBLocation), x, y; (740, 945) |> (8/19/2023 7:01:21 PM)
method; (CardClass.SetPBLocation), x, y; (795, 945) |> (8/19/2023 7:01:21 PM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/19/2023 7:01:21 PM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/19/2023 7:01:21 PM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/19/2023 7:01:21 PM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/19/2023 7:01:21 PM)
method; (CardClass.SetPBLocation), x, y; (1070, 945) |> (8/19/2023 7:01:21 PM)
method; (CardClass.SetPBLocation), x, y; (1125, 945) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (1125, 1125) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.UpdatePoints) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.DrawCards) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.DeactivateClick) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (1045, 1045) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.UpdatePoints) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.DrawCards) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.ActivateClick) |> (8/19/2023 7:01:22 PM)
method; (GameLogicClass.DisplayDiscardPile) |> (8/19/2023 7:01:22 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:22 PM)
method; (GameLogicClass.FindPictureInList) |> (8/19/2023 7:01:22 PM)
Method; (AIClass.Play()) [AI Play], Current player; (uno.PlayerClass), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (uno.CardClass), game.is_Flipped; (False); Card (Hand); 0 |> (8/19/2023 7:01:22 PM)
method; (GameLogicClass.FindPictureInList) |> (8/19/2023 7:01:22 PM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (9), error |> (8/19/2023 7:01:22 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/19/2023 7:01:22 PM)
method; (GameLogicClass.AddLogic) |> (8/19/2023 7:01:22 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/19/2023 7:01:22 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Top Deck (yellow, 9), Player Index (0) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.DeactivateClick) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (740, 945) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (795, 945) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (1070, 945) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (1125, 945) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (1125, 1125) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.UpdatePoints) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.DrawCards) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.DeactivateClick) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (850, 5) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (905, 5) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (960, 5) |> (8/19/2023 7:01:22 PM)
method; (CardClass.SetPBLocation), x, y; (1015, 5) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (1015, 1015) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.UpdatePoints) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.DrawCards) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; Top deck ({TopOfDrawPile.Colors[INTis_Flipped]} {TopOfDrawPile.Numbers[INTis_Flipped]}) |> (8/19/2023 7:01:22 PM)
method; (PlayerClass.ActivateClick) |> (8/19/2023 7:01:22 PM)
method; (GameLogicClass.DisplayDiscardPile) |> (8/19/2023 7:01:22 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/19/2023 7:01:22 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    is_Flipped (False),
    is_Reverced (False),
    PlayerIndex (0, card amount 8),
    PlusAmount (0)
Discard Pile Count; (7), Top Card; (yellow, 9) |> (8/19/2023 7:01:22 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    is_Flipped (False),
    is_Reverced (False),
    PlayerIndex (0, card amount 8),
    PlusAmount (0)
Discard Pile Count; (7), Top Card; (yellow, 9) |> (8/19/2023 7:01:22 PM)
---------------------------------------------- |> (8/27/2023 8:53:28 AM)
Method; (SetupFormClass.SetupFormClass) [Start Up] |> (8/27/2023 8:53:28 AM)
Line final;  |> (8/27/2023 11:12:00 PM)
---------------------------------------------- |> (8/27/2023 11:12:00 PM)
Method; (SetupFormClass.SetupFormClass) [Start Up] |> (8/27/2023 11:12:00 PM)
method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2] |> (8/27/2023 11:12:03 PM)
method; (SetupFormClass.doneBT_Click) |> (8/27/2023 11:12:05 PM)
method; (Form_PauseMenu.Form_PauseMenu) |> (8/27/2023 11:12:05 PM)
method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870}) |> (8/27/2023 11:12:05 PM)
method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1) |> (8/27/2023 11:12:05 PM)
method; (AIClass.AIClass()) [AI INIT] |> (8/27/2023 11:12:05 PM)
method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (1) |> (8/27/2023 11:12:05 PM)
method; (GameLogicClass.MakeDrawPile) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (8/27/2023 11:12:05 PM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (8/27/2023 11:12:05 PM)
method; (GameLogicClass.Deal) |> (8/27/2023 11:12:05 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:05 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (59) |> (8/27/2023 11:12:05 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:05 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:05 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (22) |> (8/27/2023 11:12:05 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:05 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:05 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (70) |> (8/27/2023 11:12:05 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:05 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:05 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (60) |> (8/27/2023 11:12:05 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:05 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:05 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (90) |> (8/27/2023 11:12:06 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:06 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (78) |> (8/27/2023 11:12:06 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:06 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (18) |> (8/27/2023 11:12:06 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.Deal) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:06 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (48) |> (8/27/2023 11:12:06 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:06 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (12) |> (8/27/2023 11:12:06 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:06 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (20) |> (8/27/2023 11:12:06 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:06 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (83) |> (8/27/2023 11:12:06 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:06 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (17) |> (8/27/2023 11:12:06 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:06 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (23) |> (8/27/2023 11:12:06 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:06 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (53) |> (8/27/2023 11:12:06 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:06 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (12) |> (8/27/2023 11:12:06 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.DisplayDrawPile) [drew stuff] |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 1, 3, 4)
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (uno.CardClass) |> (8/27/2023 11:12:06 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:06 PM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (8/27/2023 11:12:06 PM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (8/27/2023 11:12:06 PM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (8/27/2023 11:12:06 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:12:06 PM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (8/27/2023 11:12:06 PM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (8/27/2023 11:12:06 PM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (8/27/2023 11:12:06 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (8/27/2023 11:12:06 PM)
method; (PlayerClass.UpdatePoints) [65] |> (8/27/2023 11:12:06 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:06 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 0) |> (8/27/2023 11:12:06 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:06 PM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (8/27/2023 11:12:06 PM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (8/27/2023 11:12:06 PM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (8/27/2023 11:12:06 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:12:06 PM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (8/27/2023 11:12:06 PM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (8/27/2023 11:12:06 PM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (8/27/2023 11:12:06 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (8/27/2023 11:12:06 PM)
method; (PlayerClass.UpdatePoints) [73] |> (8/27/2023 11:12:06 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:06 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 0) |> (8/27/2023 11:12:06 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:12:06 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:12:06 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), i list; (0 ) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (1), Top Card; (yellow, 0) |> (8/27/2023 11:12:06 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (9), error |> (8/27/2023 11:12:08 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (1) |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.UpdatePoints) [121] |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.UpdatePoints) [146] |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:12:08 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:12:08 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:12:08 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:12:08 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), i list; (1 0 ) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (8/27/2023 11:12:08 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/27/2023 11:12:08 PM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2 |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (+2), add, 2 |> (8/27/2023 11:12:08 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:08 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 92), Value; (0) |> (8/27/2023 11:12:08 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:08 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 91), Value; (8) |> (8/27/2023 11:12:08 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.AddCards), cards added; (AddCards Index: 0 AddCards Index: 0 ) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (0) |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (885, 885) |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.UpdatePoints) [186] |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +2) |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (8/27/2023 11:12:08 PM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.UpdatePoints) [209] |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +2) |> (8/27/2023 11:12:08 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:12:08 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:12:08 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:12:08 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:12:08 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:12:08 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:12:08 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), i list; (2 1 0 ) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (3), Top Card; (yellow, +2) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (3), Top Card; (yellow, +2) |> (8/27/2023 11:12:08 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (9), error |> (8/27/2023 11:12:10 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (1) |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.UpdatePoints) [242] |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.UpdatePoints) [272] |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), i list; (3 2 1 0 ) |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (8/27/2023 11:12:10 PM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3 |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (6), error |> (8/27/2023 11:12:10 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (0) |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.UpdatePoints) [298] |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 6) |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (8/27/2023 11:12:10 PM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.UpdatePoints) [329] |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 6) |> (8/27/2023 11:12:10 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:12:10 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (5), i list; (4 3 2 1 0 ) |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (5), Top Card; (yellow, 6) |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (5), Top Card; (yellow, 6) |> (8/27/2023 11:12:10 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.cardPB_Click), Card Index (4) |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (5), error |> (8/27/2023 11:12:12 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 5), Player Index (1) |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.UpdatePoints) [349] |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 5) |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.UpdatePoints) [386] |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 5) |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (6), i list; (5 4 3 2 1 0 ) |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 5) |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/27/2023 11:12:12 PM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2 |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.CardPlay), c_card; (blue) (5), error |> (8/27/2023 11:12:12 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 5), Player Index (0) |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.UpdatePoints) [400] |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 5) |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (8/27/2023 11:12:12 PM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.UpdatePoints) [438] |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 5) |> (8/27/2023 11:12:12 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:12:12 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (7), i list; (6 5 4 3 2 1 0 ) |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (7), Top Card; (blue, 5) |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (7), Top Card; (blue, 5) |> (8/27/2023 11:12:12 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.CardPlay), c_card; (blue) (7), error |> (8/27/2023 11:12:14 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 7), Player Index (1) |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.UpdatePoints) [444] |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 7) |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.UpdatePoints) [490] |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 7) |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), i list; (7 6 5 4 3 2 1 0 ) |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 7) |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (8/27/2023 11:12:14 PM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.CardPlay), c_card; (blue) (reverse), reverce, True |> (8/27/2023 11:12:14 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (0) |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.UpdatePoints) [488] |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue reverse) |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:12:14 PM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.UpdatePoints) [522] |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (blue reverse) |> (8/27/2023 11:12:14 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:12:14 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), i list; (8 7 6 5 4 3 2 1 0 ) |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    
    PlusAmount (0)
Discard Pile Count; (9), Top Card; (blue, reverse) |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    
    PlusAmount (0)
Discard Pile Count; (9), Top Card; (blue, reverse) |> (8/27/2023 11:12:14 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.CardPlay), c_card; (red) (reverse), reverce, False |> (8/27/2023 11:12:16 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (1) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.UpdatePoints) [512] |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red reverse) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.UpdatePoints) [554] |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red reverse) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (10), i list; (9 8 7 6 5 4 3 2 1 ) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red reverse) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (8/27/2023 11:12:16 PM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.CardPlay), c_card; (red) (skip), error |> (8/27/2023 11:12:16 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.CardClickLogic), In skip |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (1) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.UpdatePoints) [536] |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red skip) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.UpdatePoints) [566] |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red skip) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (11), i list; (10 9 8 7 6 5 4 3 2 ) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red skip) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/27/2023 11:12:16 PM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1 |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.CardPlay), c_card; (red) (+2), add, 2 |> (8/27/2023 11:12:16 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 90), Value; (4) |> (8/27/2023 11:12:16 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 89), Value; (52) |> (8/27/2023 11:12:16 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.AddCards), cards added; (AddCards Index: 0 AddCards Index: 0 ) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (0) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.UpdatePoints) [568] |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +2) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:12:16 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.UpdatePoints) [568] |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red +2) |> (8/27/2023 11:12:16 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:12:16 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (12), i list; (11 10 9 8 7 6 5 4 3 ) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (12), Top Card; (red, +2) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (12), Top Card; (red, +2) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (12), Top Card; (red, +2) |> (8/27/2023 11:12:16 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (8/27/2023 11:12:17 PM)
method; (GameLogicClass.cardPB_Click), Card Index (5) |> (8/27/2023 11:12:17 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (8/27/2023 11:12:19 PM)
method; (GameLogicClass.cardPB_Click), Card Index (5) |> (8/27/2023 11:12:19 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (8/27/2023 11:12:20 PM)
method; (GameLogicClass.cardPB_Click), Card Index (5) |> (8/27/2023 11:12:20 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.CardPlay), c_card; (red) (8), error |> (8/27/2023 11:13:32 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (1) |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:32 PM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (8/27/2023 11:13:32 PM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (8/27/2023 11:13:32 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:13:32 PM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (8/27/2023 11:13:32 PM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.UpdatePoints) [592] |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 8) |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:32 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.UpdatePoints) [570] |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 8) |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (13), i list; (12 11 10 9 8 7 6 5 4 ) |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 8) |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 88), Value; (69) |> (8/27/2023 11:13:32 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:32 PM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (8/27/2023 11:13:32 PM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (8/27/2023 11:13:32 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:13:32 PM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (8/27/2023 11:13:32 PM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.UpdatePoints) [616] |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 8) |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:32 PM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (8/27/2023 11:13:32 PM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.UpdatePoints) [592] |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 8) |> (8/27/2023 11:13:32 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:13:32 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (13), i list; (12 11 10 9 8 7 6 5 4 ) |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (13), Top Card; (red, 8) |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (13), Top Card; (red, 8) |> (8/27/2023 11:13:32 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.CardPlay), c_card; (red) (0), error |> (8/27/2023 11:13:43 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 0), Player Index (1) |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:43 PM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (8/27/2023 11:13:43 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:13:43 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:13:43 PM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.UpdatePoints) [640] |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 0) |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:43 PM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (8/27/2023 11:13:43 PM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.UpdatePoints) [614] |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (14), i list; (13 12 11 10 9 8 7 6 5 ) |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 87), Value; (78) |> (8/27/2023 11:13:43 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:43 PM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (8/27/2023 11:13:43 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:13:43 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:13:43 PM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.UpdatePoints) [664] |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 0) |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:43 PM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (8/27/2023 11:13:43 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:13:43 PM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.UpdatePoints) [656] |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (8/27/2023 11:13:43 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:13:43 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (14), i list; (13 12 11 10 9 8 7 6 5 ) |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (14), Top Card; (red, 0) |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (14), Top Card; (red, 0) |> (8/27/2023 11:13:43 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/27/2023 11:13:44 PM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/27/2023 11:13:44 PM)
method; (GameLogicClass.CardPlay), c_card; (red) (9), error |> (8/27/2023 11:13:44 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:44 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:13:44 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:13:44 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:13:44 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (1) |> (8/27/2023 11:13:44 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:44 PM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (8/27/2023 11:13:44 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:13:44 PM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (8/27/2023 11:13:44 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (8/27/2023 11:13:44 PM)
method; (PlayerClass.UpdatePoints) [679] |> (8/27/2023 11:13:44 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:44 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 9) |> (8/27/2023 11:13:44 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:44 PM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (8/27/2023 11:13:44 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:13:44 PM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (8/27/2023 11:13:44 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (8/27/2023 11:13:44 PM)
method; (PlayerClass.UpdatePoints) [698] |> (8/27/2023 11:13:44 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:44 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 9) |> (8/27/2023 11:13:44 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:13:44 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:13:44 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:44 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:44 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:44 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:13:45 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (15), i list; (14 13 12 11 10 9 8 7 6 ) |> (8/27/2023 11:13:45 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:13:45 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 9) |> (8/27/2023 11:13:45 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 86), Value; (41) |> (8/27/2023 11:13:45 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:45 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:13:45 PM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (8/27/2023 11:13:45 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:45 PM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (8/27/2023 11:13:45 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:13:45 PM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (8/27/2023 11:13:45 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (8/27/2023 11:13:45 PM)
method; (PlayerClass.UpdatePoints) [694] |> (8/27/2023 11:13:45 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:45 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 9) |> (8/27/2023 11:13:45 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:45 PM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (8/27/2023 11:13:45 PM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (8/27/2023 11:13:45 PM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (8/27/2023 11:13:45 PM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (8/27/2023 11:13:45 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (8/27/2023 11:13:45 PM)
method; (PlayerClass.UpdatePoints) [741] |> (8/27/2023 11:13:45 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:45 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 9) |> (8/27/2023 11:13:45 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:45 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:45 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (15), i list; (14 13 12 11 10 9 8 7 6 ) |> (8/27/2023 11:13:45 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:13:45 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (15), Top Card; (red, 9) |> (8/27/2023 11:13:45 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (15), Top Card; (red, 9) |> (8/27/2023 11:13:45 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.CardPlay), c_card; (red) (5), error |> (8/27/2023 11:13:46 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 5), Player Index (1) |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:46 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:13:46 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.UpdatePoints) [704] |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 5) |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:46 PM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (8/27/2023 11:13:46 PM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (8/27/2023 11:13:46 PM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (8/27/2023 11:13:46 PM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.UpdatePoints) [784] |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 5) |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (16), i list; (15 14 13 12 11 10 9 8 7 ) |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 5) |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (8/27/2023 11:13:46 PM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3 |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.CardPlay), c_card; (red) (1), error |> (8/27/2023 11:13:46 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (0) |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:46 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:13:46 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.UpdatePoints) [714] |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 1) |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:46 PM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (8/27/2023 11:13:46 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:13:46 PM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.UpdatePoints) [826] |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 1) |> (8/27/2023 11:13:46 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:13:46 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (17), i list; (16 15 14 13 12 11 10 9 8 ) |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (17), Top Card; (red, 1) |> (8/27/2023 11:13:46 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (17), Top Card; (red, 1) |> (8/27/2023 11:13:47 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/27/2023 11:13:47 PM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/27/2023 11:13:47 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (8/27/2023 11:13:48 PM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (8/27/2023 11:13:48 PM)
method; (GameLogicClass.DrawPile_Clicked) |> (8/27/2023 11:13:50 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 85), Value; (80) |> (8/27/2023 11:13:50 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:50 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:13:50 PM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:50 PM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (8/27/2023 11:13:50 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:13:50 PM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.UpdatePoints) [774] |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 1) |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:50 PM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (8/27/2023 11:13:50 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:13:50 PM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.UpdatePoints) [868] |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 1) |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:13:50 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (17), i list; (16 15 14 13 12 11 10 9 8 ) |> (8/27/2023 11:13:50 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 1) |> (8/27/2023 11:13:50 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:13:50 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 84), Value; (0) |> (8/27/2023 11:13:50 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:50 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:13:50 PM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:50 PM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (8/27/2023 11:13:50 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:13:50 PM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.UpdatePoints) [834] |> (8/27/2023 11:13:50 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:51 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 1) |> (8/27/2023 11:13:51 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:51 PM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (8/27/2023 11:13:51 PM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (8/27/2023 11:13:51 PM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (8/27/2023 11:13:51 PM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (8/27/2023 11:13:51 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (8/27/2023 11:13:51 PM)
method; (PlayerClass.UpdatePoints) [911] |> (8/27/2023 11:13:51 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:51 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 1) |> (8/27/2023 11:13:51 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:13:51 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:51 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (17), i list; (16 15 14 13 12 11 10 9 8 ) |> (8/27/2023 11:13:51 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:13:51 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (17), Top Card; (red, 1) |> (8/27/2023 11:13:51 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (17), Top Card; (red, 1) |> (8/27/2023 11:13:51 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/27/2023 11:13:52 PM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (8/27/2023 11:13:52 PM)
method; (wildFormClass.wildFormClass) |> (8/27/2023 11:13:52 PM)
method; (wildFormClass.yellowBT_Click) [this.Tag = yellow] |> (8/27/2023 11:13:53 PM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (+4_wild), add, 4 |> (8/27/2023 11:13:54 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 83), Value; (22) |> (8/27/2023 11:13:54 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 82), Value; (34) |> (8/27/2023 11:13:54 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 81), Value; (62) |> (8/27/2023 11:13:54 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 80), Value; (22) |> (8/27/2023 11:13:54 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.AddCards), cards added; (AddCards Index: 1 AddCards Index: 1 AddCards Index: 1 AddCards Index: 1 ) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +4_wild), Player Index (1) |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.UpdatePoints) [844] |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +4_wild) |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (500, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (885, 5) |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (885, 885) |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.UpdatePoints) [984] |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow +4_wild) |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (18), i list; (17 16 15 14 13 12 11 10 9 ) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow +4_wild) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 79), Value; (61) |> (8/27/2023 11:13:54 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.UpdatePoints) [854] |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +4_wild) |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (475, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (8/27/2023 11:13:54 PM)
method; (CardClass.SetPBLocation), x, y; (915, 5) |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (915, 915) |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.UpdatePoints) [1066] |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow +4_wild) |> (8/27/2023 11:13:54 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:13:54 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (18), i list; (17 16 15 14 13 12 11 10 9 ) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (18), Top Card; (yellow, +4_wild) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (18), Top Card; (yellow, +4_wild) |> (8/27/2023 11:13:54 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/27/2023 11:13:55 PM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/27/2023 11:13:55 PM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (3), error |> (8/27/2023 11:13:55 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:55 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:13:55 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:13:55 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:13:55 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 3), Player Index (1) |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.UpdatePoints) [861] |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 3) |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (475, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (915, 5) |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (915, 915) |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.UpdatePoints) [1148] |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 3) |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:55 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (19), i list; (18 17 16 15 14 13 12 11 10 ) |> (8/27/2023 11:13:55 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 3) |> (8/27/2023 11:13:55 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:13:55 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 78), Value; (27) |> (8/27/2023 11:13:55 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:13:55 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:13:55 PM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.UpdatePoints) [868] |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 3) |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (445, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (500, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (885, 5) |> (8/27/2023 11:13:55 PM)
method; (CardClass.SetPBLocation), x, y; (940, 5) |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (940, 940) |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.UpdatePoints) [1231] |> (8/27/2023 11:13:55 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:13:56 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 3) |> (8/27/2023 11:13:56 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:13:56 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:13:56 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (19), i list; (18 17 16 15 14 13 12 11 10 ) |> (8/27/2023 11:13:56 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:13:56 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (19), Top Card; (yellow, 3) |> (8/27/2023 11:13:56 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (19), Top Card; (yellow, 3) |> (8/27/2023 11:13:56 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (8/27/2023 11:13:58 PM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (8/27/2023 11:13:58 PM)
method; (GameLogicClass.DrawPile_Clicked) |> (8/27/2023 11:14:00 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 77), Value; (49) |> (8/27/2023 11:14:00 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:14:00 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:14:00 PM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.UpdatePoints) [882] |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 3) |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (445, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (500, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (885, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (940, 5) |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (940, 940) |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.UpdatePoints) [1314] |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 3) |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:14:00 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (19), i list; (18 17 16 15 14 13 12 11 10 ) |> (8/27/2023 11:14:00 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 3) |> (8/27/2023 11:14:00 PM)
method; (GameLogicClass.CardClass) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 76), Value; (4) |> (8/27/2023 11:14:00 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:14:00 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:14:00 PM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.UpdatePoints) [896] |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 3) |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (420, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (475, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (915, 5) |> (8/27/2023 11:14:00 PM)
method; (CardClass.SetPBLocation), x, y; (970, 5) |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (970, 970) |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.UpdatePoints) [1404] |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 3) |> (8/27/2023 11:14:00 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:14:00 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:14:00 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (19), i list; (18 17 16 15 14 13 12 11 10 ) |> (8/27/2023 11:14:00 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:14:00 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (19), Top Card; (yellow, 3) |> (8/27/2023 11:14:00 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (19), Top Card; (yellow, 3) |> (8/27/2023 11:14:00 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (7), error |> (8/27/2023 11:14:01 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 7), Player Index (1) |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.UpdatePoints) [903] |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 7) |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (420, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (475, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (915, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (970, 5) |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (970, 970) |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.UpdatePoints) [1494] |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 7) |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (20), i list; (19 18 17 16 15 14 13 12 11 ) |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 7) |> (8/27/2023 11:14:01 PM)
method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0) |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (8/27/2023 11:14:01 PM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 4 |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.CardPlay), c_card; (green) (7), error |> (8/27/2023 11:14:01 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/27/2023 11:14:01 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 7), Player Index (0) |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.UpdatePoints) [910] |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 7) |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (445, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (500, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (885, 5) |> (8/27/2023 11:14:01 PM)
method; (CardClass.SetPBLocation), x, y; (940, 5) |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.FindCardPosition), Positions x,y (940, 940) |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.UpdatePoints) [1577] |> (8/27/2023 11:14:01 PM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/27/2023 11:14:02 PM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 7) |> (8/27/2023 11:14:02 PM)
method; (PlayerClass.ActivateClick) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/27/2023 11:14:02 PM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/27/2023 11:14:02 PM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (21), i list; (20 19 18 17 16 15 14 13 12 ) |> (8/27/2023 11:14:02 PM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/27/2023 11:14:02 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (21), Top Card; (green, 7) |> (8/27/2023 11:14:02 PM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (21), Top Card; (green, 7) |> (8/27/2023 11:14:02 PM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (8/27/2023 11:14:02 PM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (8/27/2023 11:14:02 PM)
method; (GameLogicClass.CardPlay), c_card; (green) (7), error |> (8/27/2023 11:14:02 PM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/27/2023 11:14:02 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:14:02 PM)
method; (GameLogicClass.AddLogic) |> (8/27/2023 11:14:02 PM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/27/2023 11:14:02 PM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 7), Player Index (1) |> (8/27/2023 11:14:02 PM)
method; (WinConditonForm.WinConditonForm) |> (8/27/2023 11:14:02 PM)
method; (PlayerClass.DeactivateClick) |> (8/27/2023 11:14:02 PM)
