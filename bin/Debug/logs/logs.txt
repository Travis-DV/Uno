Line final;  |> (8/28/2023 1:07:42 AM)
---------------------------------------------- |> (8/28/2023 1:07:42 AM)
Method; (SetupFormClass.SetupFormClass) [Start Up] |> (8/28/2023 1:07:42 AM)
method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2] |> (8/28/2023 1:07:46 AM)
method; (SetupFormClass.doneBT_Click) |> (8/28/2023 1:07:47 AM)
method; (Form_PauseMenu.Form_PauseMenu) |> (8/28/2023 1:07:47 AM)
method; (GameForm.GameForm), Width: (1920), Height; (1050), Size; ({Width=1920, Height=1050}) |> (8/28/2023 1:07:47 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1) |> (8/28/2023 1:07:47 AM)
method; (AIClass.AIClass()) [AI INIT] |> (8/28/2023 1:07:47 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (1) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.MakeDrawPile) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (8/28/2023 1:07:47 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.Deal) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (39) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (64) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (59) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (21) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (49) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (10) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (67) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.Deal) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (65) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (75) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (82) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (77) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (66) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (15) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (15) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (2) |> (8/28/2023 1:07:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.DisplayDrawPile) [drew stuff] |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 1, 3, 4)
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (System.Drawing.Bitmap) |> (8/28/2023 1:07:47 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:07:47 AM)
method; (CardClass.SetPBLocation), x, y; (770, 945) |> (8/28/2023 1:07:47 AM)
method; (CardClass.SetPBLocation), x, y; (825, 945) |> (8/28/2023 1:07:47 AM)
method; (CardClass.SetPBLocation), x, y; (880, 945) |> (8/28/2023 1:07:47 AM)
method; (CardClass.SetPBLocation), x, y; (935, 945) |> (8/28/2023 1:07:47 AM)
method; (CardClass.SetPBLocation), x, y; (990, 945) |> (8/28/2023 1:07:47 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 945) |> (8/28/2023 1:07:47 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 945) |> (8/28/2023 1:07:47 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/28/2023 1:07:47 AM)
method; (PlayerClass.UpdatePoints) [59] |> (8/28/2023 1:07:47 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:07:47 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 2) |> (8/28/2023 1:07:47 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:07:47 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 1:07:47 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 1:07:47 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 1:07:47 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 1:07:47 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 1:07:47 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 1:07:47 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 1:07:47 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/28/2023 1:07:47 AM)
method; (PlayerClass.UpdatePoints) [67] |> (8/28/2023 1:07:47 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:07:47 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 2) |> (8/28/2023 1:07:47 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/28/2023 1:07:47 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), i list; ((i; 0, card; (red) (2)) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (7)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (1), Top Card; (red, 2) |> (8/28/2023 1:07:47 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (8/28/2023 1:07:53 AM)
method; (GameLogicClass.cardPB_Click), Card Index (5) |> (8/28/2023 1:07:53 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (+2), add, 2 |> (8/28/2023 1:07:53 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:53 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/28/2023 1:07:53 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:53 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 92), Value; (10) |> (8/28/2023 1:07:53 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:53 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:53 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 91), Value; (73) |> (8/28/2023 1:07:53 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:53 AM)
method; (GameLogicClass.AddCards), cards added; (AddCards Index: 1 AddCards Index: 1 ) |> (8/28/2023 1:07:53 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 1:07:53 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/28/2023 1:07:53 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (1) |> (8/28/2023 1:07:53 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:07:53 AM)
method; (CardClass.SetPBLocation), x, y; (795, 945) |> (8/28/2023 1:07:53 AM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/28/2023 1:07:53 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 1:07:53 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 1:07:53 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/28/2023 1:07:53 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 945) |> (8/28/2023 1:07:53 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1070, 1070) |> (8/28/2023 1:07:53 AM)
method; (PlayerClass.UpdatePoints) [108] |> (8/28/2023 1:07:53 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +2) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (715, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (1155, 5) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1155, 1155) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.UpdatePoints) [155] |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +2) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), i list; ((i; 1, card; (red) (+2)(i; 0, card; (red) (2)) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +2) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (7) |> (8/28/2023 1:07:54 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 7 |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (7) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (skip), error |> (8/28/2023 1:07:54 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.CardClickLogic), In skip |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (7), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (1) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (795, 945) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 945) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1070, 1070) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.UpdatePoints) [157] |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red skip) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (740, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (795, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (850, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (905, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (960, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (1125, 5) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1125, 1125) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.UpdatePoints) [223] |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red skip) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), i list; ((i; 2, card; (red) (skip)(i; 1, card; (red) (+2)(i; 0, card; (red) (2)) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red skip) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 90), Value; (78) |> (8/28/2023 1:07:54 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (795, 945) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 945) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1070, 1070) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.UpdatePoints) [206] |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red skip) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (715, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 1:07:54 AM)
method; (CardClass.SetPBLocation), x, y; (1155, 5) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1155, 1155) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.UpdatePoints) [299] |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red skip) |> (8/28/2023 1:07:54 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 1:07:54 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), i list; ((i; 2, card; (red) (skip)(i; 1, card; (red) (+2)(i; 0, card; (red) (2)) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (9)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (red, skip) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (8)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (red, skip) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (9)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (red, skip) |> (8/28/2023 1:07:54 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (8/28/2023 1:07:57 AM)
method; (GameLogicClass.cardPB_Click), Card Index (4) |> (8/28/2023 1:07:57 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (skip), error |> (8/28/2023 1:07:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:57 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/28/2023 1:07:57 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 1:07:57 AM)
method; (GameLogicClass.CardClickLogic), In skip |> (8/28/2023 1:07:57 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/28/2023 1:07:57 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/28/2023 1:07:57 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (0) |> (8/28/2023 1:07:57 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:07:57 AM)
method; (CardClass.SetPBLocation), x, y; (825, 945) |> (8/28/2023 1:07:57 AM)
method; (CardClass.SetPBLocation), x, y; (880, 945) |> (8/28/2023 1:07:57 AM)
method; (CardClass.SetPBLocation), x, y; (935, 945) |> (8/28/2023 1:07:57 AM)
method; (CardClass.SetPBLocation), x, y; (990, 945) |> (8/28/2023 1:07:57 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 945) |> (8/28/2023 1:07:57 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1045, 1045) |> (8/28/2023 1:07:57 AM)
method; (PlayerClass.UpdatePoints) [235] |> (8/28/2023 1:07:57 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:07:57 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip) |> (8/28/2023 1:07:57 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:07:57 AM)
method; (CardClass.SetPBLocation), x, y; (715, 5) |> (8/28/2023 1:07:57 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 1:07:57 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 1:07:57 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 1:07:57 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 1:07:57 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 1:07:57 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 1:07:57 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 1:07:57 AM)
method; (CardClass.SetPBLocation), x, y; (1155, 5) |> (8/28/2023 1:07:57 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1155, 1155) |> (8/28/2023 1:07:57 AM)
method; (PlayerClass.UpdatePoints) [375] |> (8/28/2023 1:07:57 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:07:57 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip) |> (8/28/2023 1:07:57 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:07:57 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 1:07:57 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 1:07:57 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/28/2023 1:07:57 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 1:07:57 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:07:57 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/28/2023 1:07:57 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/28/2023 1:07:57 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 1:07:57 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), i list; ((i; 3, card; (blue) (skip)(i; 2, card; (red) (skip)(i; 1, card; (red) (+2)(i; 0, card; (red) (2)) |> (8/28/2023 1:07:57 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:07:57 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (9)

    PlusAmount (0)
Discard Pile Count; (4), Top Card; (blue, skip) |> (8/28/2023 1:07:57 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (0), error |> (8/28/2023 1:07:58 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 0), Player Index (1) |> (8/28/2023 1:07:58 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/28/2023 1:07:58 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1015, 1015) |> (8/28/2023 1:07:58 AM)
method; (PlayerClass.UpdatePoints) [264] |> (8/28/2023 1:07:58 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:07:58 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (blue 0) |> (8/28/2023 1:07:58 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (715, 5) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (1155, 5) |> (8/28/2023 1:07:58 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1155, 1155) |> (8/28/2023 1:07:58 AM)
method; (PlayerClass.UpdatePoints) [451] |> (8/28/2023 1:07:58 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:07:58 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 0) |> (8/28/2023 1:07:58 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:07:58 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:07:58 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 1:07:58 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/28/2023 1:07:58 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/28/2023 1:07:58 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 1:07:58 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 1:07:58 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:07:58 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 1:07:58 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:07:58 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (5), i list; ((i; 4, card; (blue) (0)(i; 3, card; (blue) (skip)(i; 2, card; (red) (skip)(i; 1, card; (red) (+2)(i; 0, card; (red) (2)) |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:07:58 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 0) |> (8/28/2023 1:07:58 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0) |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/28/2023 1:07:58 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2 |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (4), error |> (8/28/2023 1:07:58 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/28/2023 1:07:58 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (0) |> (8/28/2023 1:07:58 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 1:07:58 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 1:07:59 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/28/2023 1:07:59 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1015, 1015) |> (8/28/2023 1:07:59 AM)
method; (PlayerClass.UpdatePoints) [293] |> (8/28/2023 1:07:59 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:07:59 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (blue 4) |> (8/28/2023 1:07:59 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:07:59 AM)
method; (CardClass.SetPBLocation), x, y; (740, 5) |> (8/28/2023 1:07:59 AM)
method; (CardClass.SetPBLocation), x, y; (795, 5) |> (8/28/2023 1:07:59 AM)
method; (CardClass.SetPBLocation), x, y; (850, 5) |> (8/28/2023 1:07:59 AM)
method; (CardClass.SetPBLocation), x, y; (905, 5) |> (8/28/2023 1:07:59 AM)
method; (CardClass.SetPBLocation), x, y; (960, 5) |> (8/28/2023 1:07:59 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 5) |> (8/28/2023 1:07:59 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 5) |> (8/28/2023 1:07:59 AM)
method; (CardClass.SetPBLocation), x, y; (1125, 5) |> (8/28/2023 1:07:59 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1125, 1125) |> (8/28/2023 1:07:59 AM)
method; (PlayerClass.UpdatePoints) [523] |> (8/28/2023 1:07:59 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:07:59 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4) |> (8/28/2023 1:07:59 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:07:59 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:07:59 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/28/2023 1:07:59 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 1:07:59 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 1:07:59 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:07:59 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/28/2023 1:07:59 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 1:07:59 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/28/2023 1:07:59 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:07:59 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 1:07:59 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 1:07:59 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 1:07:59 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (6), i list; ((i; 5, card; (blue) (4)(i; 4, card; (blue) (0)(i; 3, card; (blue) (skip)(i; 2, card; (red) (skip)(i; 1, card; (red) (+2)(i; 0, card; (red) (2)) |> (8/28/2023 1:07:59 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:07:59 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (8)

    PlusAmount (0)
Discard Pile Count; (6), Top Card; (blue, 4) |> (8/28/2023 1:07:59 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (9)

    PlusAmount (0)
Discard Pile Count; (6), Top Card; (blue, 4) |> (8/28/2023 1:07:59 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (8/28/2023 1:08:01 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:08:01 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 89), Value; (41) |> (8/28/2023 1:08:01 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:08:01 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/28/2023 1:08:01 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (8/28/2023 1:08:01 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:01 AM)
method; (CardClass.SetPBLocation), x, y; (825, 945) |> (8/28/2023 1:08:01 AM)
method; (CardClass.SetPBLocation), x, y; (880, 945) |> (8/28/2023 1:08:01 AM)
method; (CardClass.SetPBLocation), x, y; (935, 945) |> (8/28/2023 1:08:01 AM)
method; (CardClass.SetPBLocation), x, y; (990, 945) |> (8/28/2023 1:08:01 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 945) |> (8/28/2023 1:08:01 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1045, 1045) |> (8/28/2023 1:08:01 AM)
method; (PlayerClass.UpdatePoints) [331] |> (8/28/2023 1:08:01 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:01 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4) |> (8/28/2023 1:08:01 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:01 AM)
method; (CardClass.SetPBLocation), x, y; (740, 5) |> (8/28/2023 1:08:01 AM)
method; (CardClass.SetPBLocation), x, y; (795, 5) |> (8/28/2023 1:08:01 AM)
method; (CardClass.SetPBLocation), x, y; (850, 5) |> (8/28/2023 1:08:01 AM)
method; (CardClass.SetPBLocation), x, y; (905, 5) |> (8/28/2023 1:08:01 AM)
method; (CardClass.SetPBLocation), x, y; (960, 5) |> (8/28/2023 1:08:01 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 5) |> (8/28/2023 1:08:01 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 5) |> (8/28/2023 1:08:01 AM)
method; (CardClass.SetPBLocation), x, y; (1125, 5) |> (8/28/2023 1:08:01 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1125, 1125) |> (8/28/2023 1:08:01 AM)
method; (PlayerClass.UpdatePoints) [595] |> (8/28/2023 1:08:01 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:02 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4) |> (8/28/2023 1:08:02 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:08:02 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (6), i list; ((i; 5, card; (blue) (4)(i; 4, card; (blue) (0)(i; 3, card; (blue) (skip)(i; 2, card; (red) (skip)(i; 1, card; (red) (+2)(i; 0, card; (red) (2)) |> (8/28/2023 1:08:02 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:08:02 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0) |> (8/28/2023 1:08:02 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (8/28/2023 1:08:02 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 5 |> (8/28/2023 1:08:02 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (8/28/2023 1:08:02 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (4), error |> (8/28/2023 1:08:02 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:08:02 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/28/2023 1:08:02 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 1:08:02 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (8/28/2023 1:08:02 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (0) |> (8/28/2023 1:08:02 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:02 AM)
method; (CardClass.SetPBLocation), x, y; (825, 945) |> (8/28/2023 1:08:02 AM)
method; (CardClass.SetPBLocation), x, y; (880, 945) |> (8/28/2023 1:08:02 AM)
method; (CardClass.SetPBLocation), x, y; (935, 945) |> (8/28/2023 1:08:02 AM)
method; (CardClass.SetPBLocation), x, y; (990, 945) |> (8/28/2023 1:08:02 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 945) |> (8/28/2023 1:08:02 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1045, 1045) |> (8/28/2023 1:08:02 AM)
method; (PlayerClass.UpdatePoints) [369] |> (8/28/2023 1:08:02 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:02 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4) |> (8/28/2023 1:08:02 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:02 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 1:08:02 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 1:08:02 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 1:08:02 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 1:08:02 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 1:08:02 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 1:08:02 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 1:08:02 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/28/2023 1:08:02 AM)
method; (PlayerClass.UpdatePoints) [663] |> (8/28/2023 1:08:02 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:02 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4) |> (8/28/2023 1:08:02 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 1:08:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 1:08:02 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (7), i list; ((i; 6, card; (yellow) (4)(i; 5, card; (blue) (4)(i; 4, card; (blue) (0)(i; 3, card; (blue) (skip)(i; 2, card; (red) (skip)(i; 1, card; (red) (+2)(i; 0, card; (red) (2)) |> (8/28/2023 1:08:02 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:08:02 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (7), Top Card; (yellow, 4) |> (8/28/2023 1:08:02 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (8)

    PlusAmount (0)
Discard Pile Count; (7), Top Card; (yellow, 4) |> (8/28/2023 1:08:02 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (8/28/2023 1:08:04 AM)
method; (GameLogicClass.cardPB_Click), Card Index (3) |> (8/28/2023 1:08:04 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (+2), add, 2 |> (8/28/2023 1:08:04 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:08:04 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/28/2023 1:08:04 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:08:04 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 88), Value; (70) |> (8/28/2023 1:08:04 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:08:04 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 1:08:04 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 87), Value; (7) |> (8/28/2023 1:08:04 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:08:04 AM)
method; (GameLogicClass.AddCards), cards added; (AddCards Index: 1 AddCards Index: 1 ) |> (8/28/2023 1:08:04 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 1:08:04 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (8/28/2023 1:08:04 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (1) |> (8/28/2023 1:08:04 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:04 AM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/28/2023 1:08:04 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 1:08:04 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 1:08:04 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/28/2023 1:08:04 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1015, 1015) |> (8/28/2023 1:08:04 AM)
method; (PlayerClass.UpdatePoints) [397] |> (8/28/2023 1:08:04 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:04 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +2) |> (8/28/2023 1:08:04 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:04 AM)
method; (CardClass.SetPBLocation), x, y; (715, 5) |> (8/28/2023 1:08:04 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 1:08:04 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 1:08:04 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 1:08:04 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 1:08:04 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 1:08:04 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 1:08:04 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 1:08:04 AM)
method; (CardClass.SetPBLocation), x, y; (1155, 5) |> (8/28/2023 1:08:04 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1155, 1155) |> (8/28/2023 1:08:04 AM)
method; (PlayerClass.UpdatePoints) [749] |> (8/28/2023 1:08:04 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:04 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +2) |> (8/28/2023 1:08:04 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:08:04 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/28/2023 1:08:04 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 1:08:04 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 1:08:04 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:08:04 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/28/2023 1:08:05 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), i list; ((i; 7, card; (yellow) (+2)(i; 6, card; (yellow) (4)(i; 5, card; (blue) (4)(i; 4, card; (blue) (0)(i; 3, card; (blue) (skip)(i; 2, card; (red) (skip)(i; 1, card; (red) (+2)(i; 0, card; (red) (2)) |> (8/28/2023 1:08:05 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:08:05 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +2) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 3), Value; (1) |> (8/28/2023 1:08:05 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (8/28/2023 1:08:05 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (4), Card index; (1), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3 |> (8/28/2023 1:08:05 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (8/28/2023 1:08:05 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (reverse), reverce, True |> (8/28/2023 1:08:05 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:08:05 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 1:08:05 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 1:08:05 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 1:08:05 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (0) |> (8/28/2023 1:08:05 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:05 AM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/28/2023 1:08:05 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 1:08:05 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 1:08:05 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/28/2023 1:08:05 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1015, 1015) |> (8/28/2023 1:08:05 AM)
method; (PlayerClass.UpdatePoints) [425] |> (8/28/2023 1:08:05 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:05 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow reverse) |> (8/28/2023 1:08:05 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:05 AM)
method; (CardClass.SetPBLocation), x, y; (740, 5) |> (8/28/2023 1:08:05 AM)
method; (CardClass.SetPBLocation), x, y; (795, 5) |> (8/28/2023 1:08:05 AM)
method; (CardClass.SetPBLocation), x, y; (850, 5) |> (8/28/2023 1:08:05 AM)
method; (CardClass.SetPBLocation), x, y; (905, 5) |> (8/28/2023 1:08:05 AM)
method; (CardClass.SetPBLocation), x, y; (960, 5) |> (8/28/2023 1:08:05 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 5) |> (8/28/2023 1:08:05 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 5) |> (8/28/2023 1:08:05 AM)
method; (CardClass.SetPBLocation), x, y; (1125, 5) |> (8/28/2023 1:08:05 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1125, 1125) |> (8/28/2023 1:08:05 AM)
method; (PlayerClass.UpdatePoints) [815] |> (8/28/2023 1:08:05 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:05 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow reverse) |> (8/28/2023 1:08:05 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/28/2023 1:08:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 1:08:05 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), i list; ((i; 8, card; (yellow) (reverse)(i; 7, card; (yellow) (+2)(i; 6, card; (yellow) (4)(i; 5, card; (blue) (4)(i; 4, card; (blue) (0)(i; 3, card; (blue) (skip)(i; 2, card; (red) (skip)(i; 1, card; (red) (+2)(i; 0, card; (red) (2)) |> (8/28/2023 1:08:05 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:08:05 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (4)
Player1CardCount; (8)

    PlusAmount (0)
Discard Pile Count; (9), Top Card; (yellow, reverse) |> (8/28/2023 1:08:05 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (4)
Player1CardCount; (9)

    PlusAmount (0)
Discard Pile Count; (9), Top Card; (yellow, reverse) |> (8/28/2023 1:08:05 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (8), error |> (8/28/2023 1:08:08 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (1) |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (880, 945) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (935, 945) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (990, 945) |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (990, 990) |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.UpdatePoints) [445] |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 8) |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (740, 5) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (795, 5) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (850, 5) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (905, 5) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (960, 5) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 5) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 5) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (1125, 5) |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1125, 1125) |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.UpdatePoints) [881] |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 8) |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (10), i list; ((i; 9, card; (yellow) (8)(i; 8, card; (yellow) (reverse)(i; 7, card; (yellow) (+2)(i; 6, card; (yellow) (4)(i; 5, card; (blue) (4)(i; 4, card; (blue) (0)(i; 3, card; (blue) (skip)(i; 2, card; (red) (skip)(i; 1, card; (red) (+2)(i; 0, card; (red) (2)) |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 8) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 4), Value; (0) |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (8/28/2023 1:08:08 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (5), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (8), error |> (8/28/2023 1:08:08 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 1:08:08 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (0) |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (880, 945) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (935, 945) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (990, 945) |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (990, 990) |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.UpdatePoints) [465] |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 8) |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 1:08:08 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.UpdatePoints) [939] |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 8) |> (8/28/2023 1:08:08 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 1:08:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 1:08:09 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 1:08:09 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 1:08:09 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:08:09 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 1:08:09 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 1:08:09 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 1:08:09 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 1:08:09 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (11), i list; ((i; 10, card; (yellow) (8)(i; 9, card; (yellow) (8)(i; 8, card; (yellow) (reverse)(i; 7, card; (yellow) (+2)(i; 6, card; (yellow) (4)(i; 5, card; (blue) (4)(i; 4, card; (blue) (0)(i; 3, card; (blue) (skip)(i; 2, card; (red) (skip)(i; 1, card; (red) (+2)) |> (8/28/2023 1:08:09 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:08:09 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (3)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (11), Top Card; (yellow, 8) |> (8/28/2023 1:08:09 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (3)
Player1CardCount; (8)

    PlusAmount (0)
Discard Pile Count; (11), Top Card; (yellow, 8) |> (8/28/2023 1:08:09 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/28/2023 1:08:10 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/28/2023 1:08:10 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/28/2023 1:08:12 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/28/2023 1:08:12 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/28/2023 1:08:13 AM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (8/28/2023 1:08:13 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (8/28/2023 1:08:13 AM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (8/28/2023 1:08:13 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (2), error |> (8/28/2023 1:08:13 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:08:13 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (8/28/2023 1:08:13 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 1:08:13 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (8/28/2023 1:08:13 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 2), Player Index (1) |> (8/28/2023 1:08:13 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:13 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 1:08:13 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 1:08:13 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (960, 960) |> (8/28/2023 1:08:13 AM)
method; (PlayerClass.UpdatePoints) [483] |> (8/28/2023 1:08:13 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:13 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 2) |> (8/28/2023 1:08:13 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:13 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 1:08:13 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 1:08:13 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 1:08:13 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 1:08:13 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 1:08:13 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 1:08:13 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 1:08:13 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/28/2023 1:08:13 AM)
method; (PlayerClass.UpdatePoints) [997] |> (8/28/2023 1:08:13 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:14 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 2) |> (8/28/2023 1:08:14 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 1:08:14 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (12), i list; ((i; 11, card; (yellow) (2)(i; 10, card; (yellow) (8)(i; 9, card; (yellow) (8)(i; 8, card; (yellow) (reverse)(i; 7, card; (yellow) (+2)(i; 6, card; (yellow) (4)(i; 5, card; (blue) (4)(i; 4, card; (blue) (0)(i; 3, card; (blue) (skip)(i; 2, card; (red) (skip)) |> (8/28/2023 1:08:14 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:08:14 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 2) |> (8/28/2023 1:08:14 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/28/2023 1:08:14 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2 |> (8/28/2023 1:08:14 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/28/2023 1:08:14 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (3), error |> (8/28/2023 1:08:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 1:08:14 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 1:08:14 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 1:08:14 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 1:08:14 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 3), Player Index (0) |> (8/28/2023 1:08:14 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:14 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 1:08:14 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 1:08:14 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (960, 960) |> (8/28/2023 1:08:14 AM)
method; (PlayerClass.UpdatePoints) [501] |> (8/28/2023 1:08:14 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:14 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 3) |> (8/28/2023 1:08:14 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 1:08:14 AM)
method; (CardClass.SetPBLocation), x, y; (795, 5) |> (8/28/2023 1:08:14 AM)
method; (CardClass.SetPBLocation), x, y; (850, 5) |> (8/28/2023 1:08:14 AM)
method; (CardClass.SetPBLocation), x, y; (905, 5) |> (8/28/2023 1:08:14 AM)
method; (CardClass.SetPBLocation), x, y; (960, 5) |> (8/28/2023 1:08:14 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 5) |> (8/28/2023 1:08:14 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 5) |> (8/28/2023 1:08:14 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1070, 1070) |> (8/28/2023 1:08:14 AM)
method; (PlayerClass.UpdatePoints) [1052] |> (8/28/2023 1:08:14 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 1:08:14 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 3) |> (8/28/2023 1:08:14 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/28/2023 1:08:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 1:08:14 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (13), i list; ((i; 12, card; (yellow) (3)(i; 11, card; (yellow) (2)(i; 10, card; (yellow) (8)(i; 9, card; (yellow) (8)(i; 8, card; (yellow) (reverse)(i; 7, card; (yellow) (+2)(i; 6, card; (yellow) (4)(i; 5, card; (blue) (4)(i; 4, card; (blue) (0)(i; 3, card; (blue) (skip)) |> (8/28/2023 1:08:14 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 1:08:14 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (2)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (13), Top Card; (yellow, 3) |> (8/28/2023 1:08:14 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (2)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (13), Top Card; (yellow, 3) |> (8/28/2023 1:08:14 AM)
method; (GameForm.GameForm_FormClosing) |> (8/28/2023 1:08:17 AM)
method; (Form_PauseMenu.closeBT_Click) [closes here??] --------------------------------------------------- |> (8/28/2023 1:08:19 AM)
Line final;  |> (9/15/2023 1:04:25 PM)
---------------------------------------------- |> (9/15/2023 1:04:25 PM)
Method; (SetupFormClass.SetupFormClass) [Start Up] |> (9/15/2023 1:04:25 PM)
Line final;  |> (9/30/2023 12:18:45 AM)
---------------------------------------------- |> (9/30/2023 12:18:45 AM)
Method; (SetupFormClass.SetupFormClass) [Start Up] |> (9/30/2023 12:18:45 AM)
method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2] |> (9/30/2023 12:18:47 AM)
method; (SetupFormClass.doneBT_Click) |> (9/30/2023 12:18:48 AM)
method; (Form_PauseMenu.Form_PauseMenu) |> (9/30/2023 12:18:48 AM)
method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870}) |> (9/30/2023 12:18:48 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1) |> (9/30/2023 12:18:48 AM)
method; (AIClass.AIClass()) [AI INIT] |> (9/30/2023 12:18:48 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (1) |> (9/30/2023 12:18:48 AM)
method; (GameLogicClass.MakeDrawPile) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (9/30/2023 12:18:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.Deal) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (7) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (11) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (72) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (74) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (67) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (20) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (76) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.Deal) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (24) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (71) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (26) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (88) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (62) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (88) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (41) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (73) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (7) |> (9/30/2023 12:18:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.DisplayDrawPile) [drew stuff] |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 1, 3, 4)
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (System.Drawing.Bitmap) |> (9/30/2023 12:18:49 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:18:49 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (9/30/2023 12:18:49 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (9/30/2023 12:18:49 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (9/30/2023 12:18:49 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (9/30/2023 12:18:49 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (9/30/2023 12:18:49 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (9/30/2023 12:18:49 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (9/30/2023 12:18:49 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (9/30/2023 12:18:49 AM)
method; (PlayerClass.UpdatePoints) [71] |> (9/30/2023 12:18:49 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:18:49 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 8) |> (9/30/2023 12:18:49 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:18:49 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (9/30/2023 12:18:49 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (9/30/2023 12:18:49 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (9/30/2023 12:18:49 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (9/30/2023 12:18:49 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (9/30/2023 12:18:49 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (9/30/2023 12:18:49 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (9/30/2023 12:18:49 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (9/30/2023 12:18:49 AM)
method; (PlayerClass.UpdatePoints) [89] |> (9/30/2023 12:18:49 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:18:49 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 8) |> (9/30/2023 12:18:49 AM)
method; (PlayerClass.ActivateClick) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (9/30/2023 12:18:49 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), i list; ((i; 0, card; (red) (8)) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (7)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (1), Top Card; (red, 8) |> (9/30/2023 12:18:49 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (9/30/2023 12:18:52 AM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (9/30/2023 12:18:52 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (7), error |> (9/30/2023 12:18:52 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:52 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (9/30/2023 12:18:52 AM)
method; (GameLogicClass.AddLogic) |> (9/30/2023 12:18:52 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (9/30/2023 12:18:52 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 7), Player Index (1) |> (9/30/2023 12:18:52 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:18:52 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (9/30/2023 12:18:52 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (9/30/2023 12:18:52 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (9/30/2023 12:18:52 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (9/30/2023 12:18:52 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (9/30/2023 12:18:52 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (9/30/2023 12:18:52 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (9/30/2023 12:18:52 AM)
method; (PlayerClass.UpdatePoints) [135] |> (9/30/2023 12:18:52 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:18:52 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 7) |> (9/30/2023 12:18:52 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:18:52 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (9/30/2023 12:18:52 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (9/30/2023 12:18:52 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (9/30/2023 12:18:52 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (9/30/2023 12:18:52 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (9/30/2023 12:18:52 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (9/30/2023 12:18:52 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (9/30/2023 12:18:52 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (9/30/2023 12:18:52 AM)
method; (PlayerClass.UpdatePoints) [178] |> (9/30/2023 12:18:52 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:18:52 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 7) |> (9/30/2023 12:18:52 AM)
method; (PlayerClass.ActivateClick) |> (9/30/2023 12:18:52 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (9/30/2023 12:18:52 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (9/30/2023 12:18:52 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:18:52 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:18:52 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), i list; ((i; 1, card; (red) (7)(i; 0, card; (red) (8)) |> (9/30/2023 12:18:52 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (9/30/2023 12:18:52 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 7) |> (9/30/2023 12:18:52 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (9/30/2023 12:18:52 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (9/30/2023 12:18:52 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 5 |> (9/30/2023 12:18:52 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (9/30/2023 12:18:52 AM)
method; (wildFormClass.wildFormClass) |> (9/30/2023 12:18:52 AM)
method; (wildFormClass.yellowBT_Click) [this.Tag = yellow] |> (9/30/2023 12:18:55 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (+4_wild), add, 4 |> (9/30/2023 12:18:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:55 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (9/30/2023 12:18:55 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 92), Value; (29) |> (9/30/2023 12:18:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:55 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 91), Value; (16) |> (9/30/2023 12:18:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:55 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 90), Value; (82) |> (9/30/2023 12:18:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:55 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:18:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 89), Value; (20) |> (9/30/2023 12:18:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:18:55 AM)
method; (GameLogicClass.AddCards), cards added; (AddCards Index: 0 AddCards Index: 0 AddCards Index: 0 AddCards Index: 0 ) |> (9/30/2023 12:18:55 AM)
method; (GameLogicClass.AddLogic) |> (9/30/2023 12:18:55 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (9/30/2023 12:18:55 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +4_wild), Player Index (0) |> (9/30/2023 12:18:55 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (445, 765) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (940, 765) |> (9/30/2023 12:18:55 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (940, 940) |> (9/30/2023 12:18:55 AM)
method; (PlayerClass.UpdatePoints) [254] |> (9/30/2023 12:18:55 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:18:55 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +4_wild) |> (9/30/2023 12:18:55 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (9/30/2023 12:18:55 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (9/30/2023 12:18:55 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (9/30/2023 12:18:56 AM)
method; (PlayerClass.UpdatePoints) [217] |> (9/30/2023 12:18:56 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:18:56 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +4_wild) |> (9/30/2023 12:18:56 AM)
method; (PlayerClass.ActivateClick) |> (9/30/2023 12:18:56 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:18:56 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:18:56 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (9/30/2023 12:18:56 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (9/30/2023 12:18:56 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (9/30/2023 12:18:56 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (9/30/2023 12:18:56 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), i list; ((i; 2, card; (yellow) (+4_wild)(i; 1, card; (red) (7)(i; 0, card; (red) (8)) |> (9/30/2023 12:18:56 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (9/30/2023 12:18:56 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (10)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (yellow, +4_wild) |> (9/30/2023 12:18:56 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (yellow, +4_wild) |> (9/30/2023 12:18:56 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (reverse), reverce, True |> (9/30/2023 12:19:00 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.AddLogic) |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (1) |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (475, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (915, 765) |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (915, 915) |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.UpdatePoints) [353] |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow reverse) |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.UpdatePoints) [256] |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow reverse) |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.ActivateClick) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), i list; ((i; 3, card; (yellow) (reverse)(i; 2, card; (yellow) (+4_wild)(i; 1, card; (red) (7)(i; 0, card; (red) (8)) |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow reverse) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (9/30/2023 12:19:00 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3 |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (reverse), reverce, False |> (9/30/2023 12:19:00 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.AddLogic) |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (0) |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (475, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (915, 765) |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (915, 915) |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.UpdatePoints) [452] |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue reverse) |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (9/30/2023 12:19:00 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.UpdatePoints) [275] |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue reverse) |> (9/30/2023 12:19:00 AM)
method; (PlayerClass.ActivateClick) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:19:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (5), i list; ((i; 4, card; (blue) (reverse)(i; 3, card; (yellow) (reverse)(i; 2, card; (yellow) (+4_wild)(i; 1, card; (red) (7)(i; 0, card; (red) (8)) |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (9)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (5), Top Card; (blue, reverse) |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (9)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (5), Top Card; (blue, reverse) |> (9/30/2023 12:19:00 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (8) |> (9/30/2023 12:19:01 AM)
method; (GameLogicClass.cardPB_Click), Card Index (8) |> (9/30/2023 12:19:01 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (7) |> (9/30/2023 12:19:05 AM)
method; (GameLogicClass.cardPB_Click), Card Index (7) |> (9/30/2023 12:19:05 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (skip), error |> (9/30/2023 12:19:05 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:19:05 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (9/30/2023 12:19:05 AM)
method; (GameLogicClass.AddLogic) |> (9/30/2023 12:19:05 AM)
method; (GameLogicClass.CardClickLogic), In skip |> (9/30/2023 12:19:05 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (9/30/2023 12:19:05 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (9/30/2023 12:19:05 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (7), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (0) |> (9/30/2023 12:19:05 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:05 AM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (9/30/2023 12:19:05 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (9/30/2023 12:19:05 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (9/30/2023 12:19:05 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (9/30/2023 12:19:05 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (9/30/2023 12:19:05 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (9/30/2023 12:19:05 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (9/30/2023 12:19:05 AM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (9/30/2023 12:19:05 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (885, 885) |> (9/30/2023 12:19:05 AM)
method; (PlayerClass.UpdatePoints) [531] |> (9/30/2023 12:19:05 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:05 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip) |> (9/30/2023 12:19:05 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:05 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (9/30/2023 12:19:05 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (9/30/2023 12:19:05 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (9/30/2023 12:19:05 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (9/30/2023 12:19:05 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (9/30/2023 12:19:05 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (9/30/2023 12:19:05 AM)
method; (PlayerClass.UpdatePoints) [294] |> (9/30/2023 12:19:05 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:05 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip) |> (9/30/2023 12:19:05 AM)
method; (PlayerClass.ActivateClick) |> (9/30/2023 12:19:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (9/30/2023 12:19:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (9/30/2023 12:19:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (9/30/2023 12:19:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (9/30/2023 12:19:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (9/30/2023 12:19:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (9/30/2023 12:19:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (9/30/2023 12:19:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (9/30/2023 12:19:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (9/30/2023 12:19:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (9/30/2023 12:19:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (9/30/2023 12:19:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (9/30/2023 12:19:05 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (6), i list; ((i; 5, card; (blue) (skip)(i; 4, card; (blue) (reverse)(i; 3, card; (yellow) (reverse)(i; 2, card; (yellow) (+4_wild)(i; 1, card; (red) (7)(i; 0, card; (red) (8)) |> (9/30/2023 12:19:05 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (9/30/2023 12:19:05 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (8)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (6), Top Card; (blue, skip) |> (9/30/2023 12:19:05 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (7) |> (9/30/2023 12:19:06 AM)
method; (GameLogicClass.cardPB_Click), Card Index (7) |> (9/30/2023 12:19:06 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (skip), error |> (9/30/2023 12:19:06 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:19:06 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (9/30/2023 12:19:06 AM)
method; (GameLogicClass.AddLogic) |> (9/30/2023 12:19:06 AM)
method; (GameLogicClass.CardClickLogic), In skip |> (9/30/2023 12:19:06 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (9/30/2023 12:19:06 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (9/30/2023 12:19:06 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (7), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (0) |> (9/30/2023 12:19:06 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:06 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (9/30/2023 12:19:06 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (9/30/2023 12:19:06 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (9/30/2023 12:19:06 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (9/30/2023 12:19:06 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (9/30/2023 12:19:06 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (9/30/2023 12:19:06 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (9/30/2023 12:19:06 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (9/30/2023 12:19:06 AM)
method; (PlayerClass.UpdatePoints) [590] |> (9/30/2023 12:19:06 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow skip) |> (9/30/2023 12:19:07 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:07 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (9/30/2023 12:19:07 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (9/30/2023 12:19:07 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (9/30/2023 12:19:07 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (9/30/2023 12:19:07 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (9/30/2023 12:19:07 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (9/30/2023 12:19:07 AM)
method; (PlayerClass.UpdatePoints) [313] |> (9/30/2023 12:19:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow skip) |> (9/30/2023 12:19:07 AM)
method; (PlayerClass.ActivateClick) |> (9/30/2023 12:19:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (9/30/2023 12:19:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (9/30/2023 12:19:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (9/30/2023 12:19:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (9/30/2023 12:19:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (9/30/2023 12:19:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (9/30/2023 12:19:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (9/30/2023 12:19:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (9/30/2023 12:19:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (9/30/2023 12:19:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (9/30/2023 12:19:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (9/30/2023 12:19:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (9/30/2023 12:19:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (9/30/2023 12:19:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (9/30/2023 12:19:07 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (7), i list; ((i; 6, card; (yellow) (skip)(i; 5, card; (blue) (skip)(i; 4, card; (blue) (reverse)(i; 3, card; (yellow) (reverse)(i; 2, card; (yellow) (+4_wild)(i; 1, card; (red) (7)(i; 0, card; (red) (8)) |> (9/30/2023 12:19:07 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (9/30/2023 12:19:07 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (7)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (7), Top Card; (yellow, skip) |> (9/30/2023 12:19:07 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.cardPB_Click), Card Index (3) |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (9), error |> (9/30/2023 12:19:10 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.AddLogic) |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (1) |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.UpdatePoints) [640] |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.UpdatePoints) [332] |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.ActivateClick) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), i list; ((i; 7, card; (yellow) (9)(i; 6, card; (yellow) (skip)(i; 5, card; (blue) (skip)(i; 4, card; (blue) (reverse)(i; 3, card; (yellow) (reverse)(i; 2, card; (yellow) (+4_wild)(i; 1, card; (red) (7)(i; 0, card; (red) (8)) |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (9/30/2023 12:19:10 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3 |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (4), error |> (9/30/2023 12:19:10 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.AddLogic) |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (0) |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.UpdatePoints) [690] |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4) |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (9/30/2023 12:19:10 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.UpdatePoints) [347] |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4) |> (9/30/2023 12:19:10 AM)
method; (PlayerClass.ActivateClick) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (9/30/2023 12:19:10 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), i list; ((i; 8, card; (yellow) (4)(i; 7, card; (yellow) (9)(i; 6, card; (yellow) (skip)(i; 5, card; (blue) (skip)(i; 4, card; (blue) (reverse)(i; 3, card; (yellow) (reverse)(i; 2, card; (yellow) (+4_wild)(i; 1, card; (red) (7)(i; 0, card; (red) (8)) |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (9), Top Card; (yellow, 4) |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (9), Top Card; (yellow, 4) |> (9/30/2023 12:19:10 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (9/30/2023 12:19:12 AM)
method; (GameLogicClass.cardPB_Click), Card Index (5) |> (9/30/2023 12:19:12 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (6), error |> (9/30/2023 12:19:12 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:19:12 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (9/30/2023 12:19:12 AM)
method; (GameLogicClass.AddLogic) |> (9/30/2023 12:19:12 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (9/30/2023 12:19:12 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (1) |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.UpdatePoints) [734] |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 6) |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.UpdatePoints) [362] |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 6) |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.ActivateClick) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (9/30/2023 12:19:12 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (10), i list; ((i; 9, card; (yellow) (6)(i; 8, card; (yellow) (4)(i; 7, card; (yellow) (9)(i; 6, card; (yellow) (skip)(i; 5, card; (blue) (skip)(i; 4, card; (blue) (reverse)(i; 3, card; (yellow) (reverse)(i; 2, card; (yellow) (+4_wild)(i; 1, card; (red) (7)(i; 0, card; (red) (8)) |> (9/30/2023 12:19:12 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 6) |> (9/30/2023 12:19:12 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 88), Value; (0) |> (9/30/2023 12:19:12 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:19:12 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (9/30/2023 12:19:12 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.UpdatePoints) [778] |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 6) |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (9/30/2023 12:19:12 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.UpdatePoints) [377] |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 6) |> (9/30/2023 12:19:12 AM)
method; (PlayerClass.ActivateClick) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (9/30/2023 12:19:12 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (9/30/2023 12:19:13 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (10), i list; ((i; 9, card; (yellow) (6)(i; 8, card; (yellow) (4)(i; 7, card; (yellow) (9)(i; 6, card; (yellow) (skip)(i; 5, card; (blue) (skip)(i; 4, card; (blue) (reverse)(i; 3, card; (yellow) (reverse)(i; 2, card; (yellow) (+4_wild)(i; 1, card; (red) (7)(i; 0, card; (red) (8)) |> (9/30/2023 12:19:13 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (9/30/2023 12:19:13 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (10), Top Card; (yellow, 6) |> (9/30/2023 12:19:13 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (10), Top Card; (yellow, 6) |> (9/30/2023 12:19:13 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (9/30/2023 12:19:13 AM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (9/30/2023 12:19:13 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (6), error |> (9/30/2023 12:19:13 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:19:13 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (9/30/2023 12:19:13 AM)
method; (GameLogicClass.AddLogic) |> (9/30/2023 12:19:13 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (9/30/2023 12:19:13 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (1) |> (9/30/2023 12:19:13 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:13 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (9/30/2023 12:19:13 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (9/30/2023 12:19:13 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (9/30/2023 12:19:13 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (9/30/2023 12:19:13 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (9/30/2023 12:19:13 AM)
method; (PlayerClass.UpdatePoints) [816] |> (9/30/2023 12:19:13 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:13 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 6) |> (9/30/2023 12:19:13 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:13 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (9/30/2023 12:19:13 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (9/30/2023 12:19:13 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (9/30/2023 12:19:13 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (9/30/2023 12:19:13 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (9/30/2023 12:19:13 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (9/30/2023 12:19:13 AM)
method; (PlayerClass.UpdatePoints) [392] |> (9/30/2023 12:19:13 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:13 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 6) |> (9/30/2023 12:19:13 AM)
method; (PlayerClass.ActivateClick) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (9/30/2023 12:19:13 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (9/30/2023 12:19:14 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (11), i list; ((i; 10, card; (yellow) (6)(i; 9, card; (yellow) (6)(i; 8, card; (yellow) (4)(i; 7, card; (yellow) (9)(i; 6, card; (yellow) (skip)(i; 5, card; (blue) (skip)(i; 4, card; (blue) (reverse)(i; 3, card; (yellow) (reverse)(i; 2, card; (yellow) (+4_wild)(i; 1, card; (red) (7)) |> (9/30/2023 12:19:14 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (9/30/2023 12:19:14 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 6) |> (9/30/2023 12:19:14 AM)
method; (GameLogicClass.CardClass) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 87), Value; (4) |> (9/30/2023 12:19:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (9/30/2023 12:19:14 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (9/30/2023 12:19:14 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (9/30/2023 12:19:14 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:14 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (9/30/2023 12:19:14 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (9/30/2023 12:19:14 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (9/30/2023 12:19:14 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (9/30/2023 12:19:14 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (9/30/2023 12:19:14 AM)
method; (PlayerClass.UpdatePoints) [854] |> (9/30/2023 12:19:14 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:14 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 6) |> (9/30/2023 12:19:14 AM)
method; (PlayerClass.DeactivateClick) |> (9/30/2023 12:19:14 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (9/30/2023 12:19:14 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (9/30/2023 12:19:14 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (9/30/2023 12:19:14 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (9/30/2023 12:19:14 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (9/30/2023 12:19:14 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (9/30/2023 12:19:14 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (9/30/2023 12:19:14 AM)
method; (PlayerClass.UpdatePoints) [412] |> (9/30/2023 12:19:14 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (9/30/2023 12:19:14 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 6) |> (9/30/2023 12:19:14 AM)
method; (PlayerClass.ActivateClick) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (9/30/2023 12:19:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (9/30/2023 12:19:14 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (11), i list; ((i; 10, card; (yellow) (6)(i; 9, card; (yellow) (6)(i; 8, card; (yellow) (4)(i; 7, card; (yellow) (9)(i; 6, card; (yellow) (skip)(i; 5, card; (blue) (skip)(i; 4, card; (blue) (reverse)(i; 3, card; (yellow) (reverse)(i; 2, card; (yellow) (+4_wild)(i; 1, card; (red) (7)) |> (9/30/2023 12:19:14 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (9/30/2023 12:19:14 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (11), Top Card; (yellow, 6) |> (9/30/2023 12:19:14 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (11), Top Card; (yellow, 6) |> (9/30/2023 12:19:14 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (9/30/2023 12:19:16 AM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (9/30/2023 12:19:16 AM)
Line final;  |> (11/23/2023 12:34:38 AM)
---------------------------------------------- |> (11/23/2023 12:34:38 AM)
Method; (SetupFormClass.SetupFormClass) [Start Up] |> (11/23/2023 12:34:38 AM)
method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2] |> (11/23/2023 12:35:14 AM)
method; (SetupFormClass.doneBT_Click) |> (11/23/2023 12:35:15 AM)
method; (Form_PauseMenu.Form_PauseMenu) |> (11/23/2023 12:35:15 AM)
method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870}) |> (11/23/2023 12:35:15 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1) |> (11/23/2023 12:35:15 AM)
method; (AIClass.AIClass()) [AI INIT] |> (11/23/2023 12:35:15 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (1) |> (11/23/2023 12:35:15 AM)
method; (GameLogicClass.MakeDrawPile) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (11/23/2023 12:35:15 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:35:16 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.Deal) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (105) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (74) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (55) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (82) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (27) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (47) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (9) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.Deal) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (76) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (87) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (55) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (54) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (55) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (75) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (48) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (58) |> (11/23/2023 12:35:16 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.DisplayDrawPile) [drew stuff] |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 1, 3, 4)
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (System.Drawing.Bitmap) |> (11/23/2023 12:35:16 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:16 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:35:16 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:35:16 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:35:16 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:35:16 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:35:16 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:35:16 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:35:16 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:35:16 AM)
method; (PlayerClass.UpdatePoints) [92] |> (11/23/2023 12:35:16 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:16 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 3) |> (11/23/2023 12:35:16 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:16 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:35:16 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:35:16 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:35:16 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:35:16 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:35:16 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:35:16 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:35:16 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:35:16 AM)
method; (PlayerClass.UpdatePoints) [68] |> (11/23/2023 12:35:16 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:16 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 3) |> (11/23/2023 12:35:16 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 12:35:16 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), i list; ((i; 0, card; (yellow) (3)) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (7)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (1), Top Card; (yellow, 3) |> (11/23/2023 12:35:16 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (reverse), reverce, True |> (11/23/2023 12:35:19 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (1) |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.UpdatePoints) [164] |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow reverse) |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.UpdatePoints) [136] |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow reverse) |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:35:19 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:35:19 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (11/23/2023 12:35:19 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:35:19 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), i list; ((i; 1, card; (yellow) (reverse)(i; 0, card; (yellow) (3)) |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow reverse) |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:19 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 92), Value; (83) |> (11/23/2023 12:35:19 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.UpdatePoints) [236] |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow reverse) |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (500, 5) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 12:35:19 AM)
method; (CardClass.SetPBLocation), x, y; (885, 5) |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (885, 885) |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.UpdatePoints) [214] |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow reverse) |> (11/23/2023 12:35:19 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:35:19 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (11/23/2023 12:35:19 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 12:35:19 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:35:19 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), i list; ((i; 1, card; (yellow) (reverse)(i; 0, card; (yellow) (3)) |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (6)
Player1CardCount; (8)

    PlusAmount (0)
Discard Pile Count; (2), Top Card; (yellow, reverse) |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (6)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (2), Top Card; (yellow, reverse) |> (11/23/2023 12:35:19 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 12:35:22 AM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (11/23/2023 12:35:22 AM)
method; (wildFormClass.wildFormClass) |> (11/23/2023 12:35:22 AM)
method; (wildFormClass.greenBT_Click) [this.Tag = green] |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (wild), wild, green |> (11/23/2023 12:35:25 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, wild), Player Index (1) |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.UpdatePoints) [268] |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green wild) |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (500, 5) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (885, 5) |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (885, 885) |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.UpdatePoints) [292] |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green wild) |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), i list; ((i; 2, card; (green) (wild)(i; 1, card; (yellow) (reverse)(i; 0, card; (yellow) (3)) |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green wild) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 12:35:25 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (6), error |> (11/23/2023 12:35:25 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (0) |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.UpdatePoints) [300] |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 6) |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:35:25 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.UpdatePoints) [364] |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 6) |> (11/23/2023 12:35:25 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (11/23/2023 12:35:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), i list; ((i; 3, card; (green) (6)(i; 2, card; (green) (wild)(i; 1, card; (yellow) (reverse)(i; 0, card; (yellow) (3)) |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (5)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (4), Top Card; (green, 6) |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (5)
Player1CardCount; (8)

    PlusAmount (0)
Discard Pile Count; (4), Top Card; (green, 6) |> (11/23/2023 12:35:25 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:35:26 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (11/23/2023 12:35:26 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (9), error |> (11/23/2023 12:35:26 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:26 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 12:35:26 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:35:26 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 12:35:26 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (1) |> (11/23/2023 12:35:26 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:26 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:35:26 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:35:26 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:35:26 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:35:26 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:35:26 AM)
method; (PlayerClass.UpdatePoints) [323] |> (11/23/2023 12:35:26 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:26 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 9) |> (11/23/2023 12:35:26 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:26 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:35:26 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:35:26 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:35:26 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:35:26 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:35:26 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:35:26 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:35:26 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:35:26 AM)
method; (PlayerClass.UpdatePoints) [436] |> (11/23/2023 12:35:26 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:27 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 9) |> (11/23/2023 12:35:27 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (5), i list; ((i; 4, card; (green) (9)(i; 3, card; (green) (6)(i; 2, card; (green) (wild)(i; 1, card; (yellow) (reverse)(i; 0, card; (yellow) (3)) |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:35:27 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 9) |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (11/23/2023 12:35:27 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 4 |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (+2), add, 2 |> (11/23/2023 12:35:27 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 91), Value; (65) |> (11/23/2023 12:35:27 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 90), Value; (66) |> (11/23/2023 12:35:27 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.AddCards), cards added; (AddCards Index: 0 AddCards Index: 0 ) |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (0) |> (11/23/2023 12:35:27 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:27 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:35:27 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:35:27 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:35:27 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:35:27 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:35:27 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:35:27 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:35:27 AM)
method; (PlayerClass.UpdatePoints) [368] |> (11/23/2023 12:35:27 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:27 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green +2) |> (11/23/2023 12:35:27 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:27 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 12:35:27 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:35:27 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:35:27 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:35:27 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:35:27 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 12:35:27 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:35:27 AM)
method; (PlayerClass.UpdatePoints) [498] |> (11/23/2023 12:35:27 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:27 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green +2) |> (11/23/2023 12:35:27 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (11/23/2023 12:35:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (6), i list; ((i; 5, card; (green) (+2)(i; 4, card; (green) (9)(i; 3, card; (green) (6)(i; 2, card; (green) (wild)(i; 1, card; (yellow) (reverse)(i; 0, card; (yellow) (3)) |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (6)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (6), Top Card; (green, +2) |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (4)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (6), Top Card; (green, +2) |> (11/23/2023 12:35:27 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (11/23/2023 12:35:29 AM)
method; (GameLogicClass.cardPB_Click), Card Index (5) |> (11/23/2023 12:35:29 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (2), error |> (11/23/2023 12:35:29 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:29 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 12:35:29 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:35:29 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 12:35:29 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 2), Player Index (1) |> (11/23/2023 12:35:29 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:29 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:35:29 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:35:29 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:35:29 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:35:29 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:35:29 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.UpdatePoints) [411] |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 2) |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.UpdatePoints) [560] |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 2) |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (11/23/2023 12:35:30 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (7), i list; ((i; 6, card; (green) (2)(i; 5, card; (green) (+2)(i; 4, card; (green) (9)(i; 3, card; (green) (6)(i; 2, card; (green) (wild)(i; 1, card; (yellow) (reverse)(i; 0, card; (yellow) (3)) |> (11/23/2023 12:35:30 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 2) |> (11/23/2023 12:35:30 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 89), Value; (30) |> (11/23/2023 12:35:30 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:30 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 12:35:30 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.UpdatePoints) [454] |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 2) |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:35:30 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.UpdatePoints) [628] |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 2) |> (11/23/2023 12:35:30 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 12:35:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:35:30 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (7), i list; ((i; 6, card; (green) (2)(i; 5, card; (green) (+2)(i; 4, card; (green) (9)(i; 3, card; (green) (6)(i; 2, card; (green) (wild)(i; 1, card; (yellow) (reverse)(i; 0, card; (yellow) (3)) |> (11/23/2023 12:35:30 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:35:30 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (5)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (7), Top Card; (green, 2) |> (11/23/2023 12:35:30 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (5)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (7), Top Card; (green, 2) |> (11/23/2023 12:35:30 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:35:31 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (11/23/2023 12:35:31 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (1), error |> (11/23/2023 12:35:31 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:31 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 12:35:31 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:35:31 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 12:35:31 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (1) |> (11/23/2023 12:35:31 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:31 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:35:31 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:35:31 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:35:31 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:35:31 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:35:31 AM)
method; (PlayerClass.UpdatePoints) [496] |> (11/23/2023 12:35:31 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:31 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 1) |> (11/23/2023 12:35:31 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:31 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:35:31 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:35:31 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:35:31 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:35:31 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:35:31 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:35:31 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:35:31 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:35:31 AM)
method; (PlayerClass.UpdatePoints) [696] |> (11/23/2023 12:35:31 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:32 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 1) |> (11/23/2023 12:35:32 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 12:35:32 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), i list; ((i; 7, card; (green) (1)(i; 6, card; (green) (2)(i; 5, card; (green) (+2)(i; 4, card; (green) (9)(i; 3, card; (green) (6)(i; 2, card; (green) (wild)(i; 1, card; (yellow) (reverse)(i; 0, card; (yellow) (3)) |> (11/23/2023 12:35:32 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:35:32 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 1) |> (11/23/2023 12:35:32 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (6) |> (11/23/2023 12:35:32 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 6 |> (11/23/2023 12:35:32 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (6) |> (11/23/2023 12:35:32 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (6), error |> (11/23/2023 12:35:32 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:32 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 12:35:32 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:35:32 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 12:35:32 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (6), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (0) |> (11/23/2023 12:35:32 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:32 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:35:32 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:35:32 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:35:32 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:35:32 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:35:32 AM)
method; (PlayerClass.UpdatePoints) [538] |> (11/23/2023 12:35:32 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:32 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 6) |> (11/23/2023 12:35:32 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:32 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 12:35:32 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:35:32 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:35:32 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:35:32 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:35:32 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 12:35:32 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:35:32 AM)
method; (PlayerClass.UpdatePoints) [758] |> (11/23/2023 12:35:32 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:32 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 6) |> (11/23/2023 12:35:32 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (11/23/2023 12:35:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 12:35:32 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), i list; ((i; 8, card; (green) (6)(i; 7, card; (green) (1)(i; 6, card; (green) (2)(i; 5, card; (green) (+2)(i; 4, card; (green) (9)(i; 3, card; (green) (6)(i; 2, card; (green) (wild)(i; 1, card; (yellow) (reverse)(i; 0, card; (yellow) (3)) |> (11/23/2023 12:35:32 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:35:32 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (4)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (9), Top Card; (green, 6) |> (11/23/2023 12:35:32 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (4)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (9), Top Card; (green, 6) |> (11/23/2023 12:35:32 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 12:35:35 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 88), Value; (10) |> (11/23/2023 12:35:35 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:35 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 12:35:35 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.UpdatePoints) [600] |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 6) |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.UpdatePoints) [820] |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 6) |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:35:35 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), i list; ((i; 8, card; (green) (6)(i; 7, card; (green) (1)(i; 6, card; (green) (2)(i; 5, card; (green) (+2)(i; 4, card; (green) (9)(i; 3, card; (green) (6)(i; 2, card; (green) (wild)(i; 1, card; (yellow) (reverse)(i; 0, card; (yellow) (3)) |> (11/23/2023 12:35:35 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 6) |> (11/23/2023 12:35:35 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:35:35 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 87), Value; (33) |> (11/23/2023 12:35:35 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:35:35 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 12:35:35 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.UpdatePoints) [662] |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 6) |> (11/23/2023 12:35:35 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:35:35 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:35:36 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:35:36 AM)
method; (PlayerClass.UpdatePoints) [902] |> (11/23/2023 12:35:36 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:35:36 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 6) |> (11/23/2023 12:35:36 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (11/23/2023 12:35:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:35:36 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), i list; ((i; 8, card; (green) (6)(i; 7, card; (green) (1)(i; 6, card; (green) (2)(i; 5, card; (green) (+2)(i; 4, card; (green) (9)(i; 3, card; (green) (6)(i; 2, card; (green) (wild)(i; 1, card; (yellow) (reverse)(i; 0, card; (yellow) (3)) |> (11/23/2023 12:35:36 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:35:36 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (5)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (9), Top Card; (green, 6) |> (11/23/2023 12:35:36 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (5)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (9), Top Card; (green, 6) |> (11/23/2023 12:35:36 AM)
method; (GameForm.GameForm_FormClosing) |> (11/23/2023 12:35:39 AM)
method; (Form_PauseMenu.closeBT_Click) [closes here??] --------------------------------------------------- |> (11/23/2023 12:35:40 AM)
