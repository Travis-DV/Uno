(12/20/2023 12:23:39 PM) |> ----------------------------------------------
(12/20/2023 12:23:39 PM) |> Method; (SetupFormClass.SetupFormClass) [Start Up]
(12/20/2023 12:23:42 PM) |> method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2]
(12/20/2023 12:23:44 PM) |> method; (SetupFormClass.doneBT_Click)
(12/20/2023 12:23:44 PM) |> method; (Form_PauseMenu.Form_PauseMenu)
(12/20/2023 12:23:44 PM) |> method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870})
(12/20/2023 12:23:44 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1)
(12/20/2023 12:23:44 PM) |> method; (AIClass.AIClass()) [AI INIT]
(12/20/2023 12:23:44 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (2)
(12/20/2023 12:23:44 PM) |> method; (GameLogicClass.MakeDrawPile)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 12:23:44 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:23:45 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (17)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (89)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (64)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (67)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (65)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (96)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (90)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (86)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (9)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (18)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (28)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (37)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (0)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (3)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (37)
(12/20/2023 12:23:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.DisplayDrawPile) [drew stuff]
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 2, 3, 4))
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (blue 5; 5 Points)
(12/20/2023 12:23:45 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:23:45 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:23:45 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:23:45 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:23:45 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:23:45 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:23:45 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:23:45 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:23:45 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:23:45 PM) |> method; (PlayerClass.UpdatePoints) [77]
(12/20/2023 12:23:45 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:23:45 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 5; 5 Points
(12/20/2023 12:23:45 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:23:45 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:23:45 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:23:45 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:23:45 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:23:45 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:23:45 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:23:45 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:23:45 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:23:45 PM) |> method; (PlayerClass.UpdatePoints) [31]
(12/20/2023 12:23:45 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:23:45 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 5; 5 Points
(12/20/2023 12:23:45 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1)
(12/20/2023 12:23:45 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), Added; (blue 5; 5 Points)
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:23:45 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (1), Top Card; (blue 5; 5 Points)
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (6)
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (6)
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (8), error
(12/20/2023 12:23:48 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (6), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (1)
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.UpdatePoints) [146]
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 8; 8 Points
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.UpdatePoints) [62]
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 8; 8 Points
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:23:48 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 12:23:48 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8)
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), Added; (blue 8; 8 Points)
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 8; 8 Points
(12/20/2023 12:23:48 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:23:48 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (4), error
(12/20/2023 12:23:48 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (0)
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.UpdatePoints) [215]
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4; 4 Points
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:23:48 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.UpdatePoints) [89]
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4; 4 Points
(12/20/2023 12:23:48 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:23:48 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8)
(12/20/2023 12:23:48 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8)
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), Added; (blue 4; 4 Points)
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (3), Top Card; (blue 4; 4 Points)
(12/20/2023 12:23:48 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (3), Top Card; (blue 4; 4 Points)
(12/20/2023 12:23:51 PM) |> method; (GameForm.GameForm_FormClosing)
(12/20/2023 12:23:52 PM) |> method; (Form_PauseMenu.closeBT_Click) [closes here??] ---------------------------------------------------
(12/20/2023 12:28:44 PM) |> ----------------------------------------------
(12/20/2023 12:28:44 PM) |> Method; (SetupFormClass.SetupFormClass) [Start Up]
(12/20/2023 12:28:47 PM) |> method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2]
(12/20/2023 12:28:48 PM) |> method; (SetupFormClass.doneBT_Click)
(12/20/2023 12:28:48 PM) |> method; (Form_PauseMenu.Form_PauseMenu)
(12/20/2023 12:28:48 PM) |> method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870})
(12/20/2023 12:28:48 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1)
(12/20/2023 12:28:48 PM) |> method; (AIClass.AIClass()) [AI INIT]
(12/20/2023 12:28:48 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (2)
(12/20/2023 12:28:48 PM) |> method; (GameLogicClass.MakeDrawPile)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 12:28:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:28:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (31)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (64)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (70)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (102)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (19)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (96)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (49)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (55)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (78)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (48)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (90)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (0)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (52)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (15)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (77)
(12/20/2023 12:28:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.DisplayDrawPile) [drew stuff]
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 2, 3, 4))
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (blue 1; 1 Points)
(12/20/2023 12:28:49 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:28:49 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:28:49 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:28:49 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:28:49 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:28:49 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:28:49 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:28:49 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:28:49 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:28:49 PM) |> method; (PlayerClass.UpdatePoints) [132]
(12/20/2023 12:28:49 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:28:49 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 1; 1 Points
(12/20/2023 12:28:49 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:28:49 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:28:49 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:28:49 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:28:49 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:28:49 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:28:49 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:28:49 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:28:49 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:28:49 PM) |> method; (PlayerClass.UpdatePoints) [65]
(12/20/2023 12:28:49 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:28:49 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 1; 1 Points
(12/20/2023 12:28:49 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3)
(12/20/2023 12:28:49 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), Added; (blue 1; 1 Points)
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:28:49 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (1), Top Card; (blue 1; 1 Points)
(12/20/2023 12:28:51 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (6)
(12/20/2023 12:28:51 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (6)
(12/20/2023 12:28:51 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (skip), error
(12/20/2023 12:28:51 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:28:51 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:28:51 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:28:51 PM) |> method; (GameLogicClass.CardClickLogic), In skip
(12/20/2023 12:28:51 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:28:51 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:28:51 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (6), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (0)
(12/20/2023 12:28:51 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:28:51 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:28:51 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:28:51 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:28:51 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:28:51 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:28:51 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:28:51 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:28:51 PM) |> method; (PlayerClass.UpdatePoints) [244]
(12/20/2023 12:28:51 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:28:51 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:28:51 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:28:51 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:28:51 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:28:51 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:28:51 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:28:51 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:28:51 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:28:51 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:28:51 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:28:51 PM) |> method; (PlayerClass.UpdatePoints) [130]
(12/20/2023 12:28:51 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:28:51 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:28:51 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:28:51 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5)
(12/20/2023 12:28:51 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9)
(12/20/2023 12:28:51 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), Added; (blue skip; 20 Points)
(12/20/2023 12:28:51 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:28:51 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (2), Top Card; (blue skip; 20 Points)
(12/20/2023 12:28:59 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (5)
(12/20/2023 12:28:59 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (5)
(12/20/2023 12:28:59 PM) |> method; (wildFormClass.wildFormClass)
(12/20/2023 12:29:01 PM) |> method; (wildFormClass.yellowBT_Click) [this.Tag = yellow]
(12/20/2023 12:29:01 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (+4_wild), add, 4
(12/20/2023 12:29:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:29:01 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:29:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:29:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 92), Value; (78)
(12/20/2023 12:29:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:29:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:29:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 91), Value; (70)
(12/20/2023 12:29:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:29:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:29:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 90), Value; (57)
(12/20/2023 12:29:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:29:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:29:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 89), Value; (26)
(12/20/2023 12:29:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:29:01 PM) |> method; (GameLogicClass.AddCards), cards added; (AddCards Index: 1 AddCards Index: 1 AddCards Index: 1 AddCards Index: 1 )
(12/20/2023 12:29:01 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:29:01 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:29:01 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +4_wild), Player Index (1)
(12/20/2023 12:29:01 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:29:01 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:29:01 PM) |> method; (PlayerClass.UpdatePoints) [306]
(12/20/2023 12:29:01 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:29:01 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +4_wild; 50 Points
(12/20/2023 12:29:01 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (420, 5)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (475, 5)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (915, 5)
(12/20/2023 12:29:01 PM) |> method; (CardClass.SetPBLocation), x, y; (970, 5)
(12/20/2023 12:29:01 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (970, 970)
(12/20/2023 12:29:01 PM) |> method; (PlayerClass.UpdatePoints) [209]
(12/20/2023 12:29:01 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:29:01 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +4_wild; 50 Points
(12/20/2023 12:29:01 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:29:01 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4)
(12/20/2023 12:29:02 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:29:02 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), Added; (yellow +4_wild; 50 Points)
(12/20/2023 12:29:02 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:29:02 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +4_wild; 50 Points
(12/20/2023 12:29:02 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:29:02 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (6)
(12/20/2023 12:29:02 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 6
(12/20/2023 12:29:02 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (6)
(12/20/2023 12:29:02 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (3), error
(12/20/2023 12:29:02 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:29:02 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:29:02 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:29:02 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:29:02 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (6), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 3), Player Index (0)
(12/20/2023 12:29:02 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:29:02 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:29:02 PM) |> method; (PlayerClass.UpdatePoints) [368]
(12/20/2023 12:29:02 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:29:02 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 3; 3 Points
(12/20/2023 12:29:02 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (445, 5)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 5)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 5)
(12/20/2023 12:29:02 PM) |> method; (CardClass.SetPBLocation), x, y; (940, 5)
(12/20/2023 12:29:02 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (940, 940)
(12/20/2023 12:29:02 PM) |> method; (PlayerClass.UpdatePoints) [285]
(12/20/2023 12:29:02 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:29:02 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 3; 3 Points
(12/20/2023 12:29:02 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:29:02 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:29:02 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8)
(12/20/2023 12:29:02 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), Added; (yellow 3; 3 Points)
(12/20/2023 12:29:02 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:29:02 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (5)
Player1 CardCount; (10)
    PlusAmount (0)
    Discard Pile Count; (4), Top Card; (yellow 3; 3 Points)
(12/20/2023 12:29:02 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (5)
Player1 CardCount; (11)
    PlusAmount (0)
    Discard Pile Count; (4), Top Card; (yellow 3; 3 Points)
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (2)
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (9), error
(12/20/2023 12:29:35 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (1)
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.UpdatePoints) [421]
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9; 9 Points
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (445, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (940, 5)
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (940, 940)
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.UpdatePoints) [361]
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9; 9 Points
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:29:35 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5)
(12/20/2023 12:29:35 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (5), Added; (yellow 9; 9 Points)
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9; 9 Points
(12/20/2023 12:29:35 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:29:35 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (9), error
(12/20/2023 12:29:35 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (0)
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.UpdatePoints) [474]
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 9; 9 Points
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (475, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:29:35 PM) |> method; (CardClass.SetPBLocation), x, y; (915, 5)
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (915, 915)
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.UpdatePoints) [428]
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 9; 9 Points
(12/20/2023 12:29:35 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:29:35 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:29:35 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3)
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (6), Added; (green 9; 9 Points)
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (4)
Player1 CardCount; (9)
    PlusAmount (0)
    Discard Pile Count; (6), Top Card; (green 9; 9 Points)
(12/20/2023 12:29:35 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (4)
Player1 CardCount; (10)
    PlusAmount (0)
    Discard Pile Count; (6), Top Card; (green 9; 9 Points)
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (0)
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (5), error
(12/20/2023 12:29:47 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 5), Player Index (1)
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.UpdatePoints) [522]
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 5; 5 Points
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (475, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (915, 5)
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (915, 915)
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.UpdatePoints) [495]
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 5; 5 Points
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:29:47 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8)
(12/20/2023 12:29:47 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5)
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (7), Added; (green 5; 5 Points)
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 5; 5 Points
(12/20/2023 12:29:47 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (6)
(12/20/2023 12:29:47 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 6
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (6)
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (5), error
(12/20/2023 12:29:47 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (6), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 5), Player Index (0)
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.UpdatePoints) [570]
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 5; 5 Points
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:29:47 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 5)
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (885, 885)
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.UpdatePoints) [557]
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 5; 5 Points
(12/20/2023 12:29:47 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:29:47 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:29:47 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8)
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), Added; (green 5; 5 Points)
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (3)
Player1 CardCount; (8)
    PlusAmount (0)
    Discard Pile Count; (8), Top Card; (green 5; 5 Points)
(12/20/2023 12:29:47 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (3)
Player1 CardCount; (9)
    PlusAmount (0)
    Discard Pile Count; (8), Top Card; (green 5; 5 Points)
(12/20/2023 12:29:51 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:29:51 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (1)
(12/20/2023 12:29:51 PM) |> method; (wildFormClass.wildFormClass)
(12/20/2023 12:29:54 PM) |> method; (wildFormClass.greenBT_Click) [this.Tag = green]
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (wild), wild, green
(12/20/2023 12:29:54 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, wild), Player Index (1)
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (720, 720)
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.UpdatePoints) [578]
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green wild; 40 Points
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 5)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 5)
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (885, 885)
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.UpdatePoints) [619]
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green wild; 40 Points
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:29:54 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0)
(12/20/2023 12:29:54 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1)
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), Added; (green wild; 40 Points)
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green wild; 40 Points
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (7)
(12/20/2023 12:29:54 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 7
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (7)
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (3), error
(12/20/2023 12:29:54 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (7), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 3), Player Index (0)
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (720, 720)
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.UpdatePoints) [586]
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green 3; 3 Points
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:29:54 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.UpdatePoints) [678]
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 3; 3 Points
(12/20/2023 12:29:54 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:29:54 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5)
(12/20/2023 12:29:54 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9)
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (10), Added; (green 3; 3 Points)
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (2)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (10), Top Card; (green 3; 3 Points)
(12/20/2023 12:29:54 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (2)
Player1 CardCount; (8)
    PlusAmount (0)
    Discard Pile Count; (10), Top Card; (green 3; 3 Points)
(12/20/2023 12:29:57 PM) |> method; (GameLogicClass.DrawPile_Clicked)
(12/20/2023 12:29:57 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:29:57 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 88), Value; (23)
(12/20/2023 12:29:57 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:29:57 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:29:57 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.UpdatePoints) [594]
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 3; 3 Points
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.UpdatePoints) [737]
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 3; 3 Points
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:29:57 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (10), Added; (Nothing)
(12/20/2023 12:29:57 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 3; 3 Points
(12/20/2023 12:29:57 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:29:57 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (5)
(12/20/2023 12:29:57 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 5
(12/20/2023 12:29:57 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (5)
(12/20/2023 12:29:57 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (3), error
(12/20/2023 12:29:57 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:29:57 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:29:57 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:29:57 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:29:57 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 3), Player Index (0)
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.UpdatePoints) [602]
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue 3; 3 Points
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:29:57 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:29:57 PM) |> method; (PlayerClass.UpdatePoints) [793]
(12/20/2023 12:29:58 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:29:58 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 3; 3 Points
(12/20/2023 12:29:58 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:29:58 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:29:58 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:29:58 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (11), Added; (blue 3; 3 Points)
(12/20/2023 12:29:58 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:29:58 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (3)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (11), Top Card; (blue 3; 3 Points)
(12/20/2023 12:29:58 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (3)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (11), Top Card; (blue 3; 3 Points)
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.DrawPile_Clicked)
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:30:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 87), Value; (21)
(12/20/2023 12:30:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.UpdatePoints) [630]
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue 3; 3 Points
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.UpdatePoints) [849]
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 3; 3 Points
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (11), Added; (Nothing)
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 3; 3 Points
(12/20/2023 12:30:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0)
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:30:00 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (reverse), reverce, True
(12/20/2023 12:30:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (0)
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.UpdatePoints) [658]
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue reverse; 20 Points
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:30:00 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.UpdatePoints) [885]
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue reverse; 20 Points
(12/20/2023 12:30:00 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:30:00 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:30:00 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3)
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (12), Added; (blue reverse; 20 Points)
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (4)
Player1 CardCount; (5)
    PlusAmount (0)
    Discard Pile Count; (12), Top Card; (blue reverse; 20 Points)
(12/20/2023 12:30:00 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (4)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (12), Top Card; (blue reverse; 20 Points)
(12/20/2023 12:30:02 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:30:02 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (3)
(12/20/2023 12:30:02 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (reverse), reverce, False
(12/20/2023 12:30:02 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:30:02 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:30:02 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:30:02 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:30:02 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (1)
(12/20/2023 12:30:02 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:30:02 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:30:02 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:30:02 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:30:02 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:30:02 PM) |> method; (PlayerClass.UpdatePoints) [666]
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow reverse; 20 Points
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:30:03 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:30:03 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:30:03 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:30:03 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:30:03 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.UpdatePoints) [921]
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow reverse; 20 Points
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:30:03 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6)
(12/20/2023 12:30:03 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5)
(12/20/2023 12:30:03 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (13), Added; (yellow reverse; 20 Points)
(12/20/2023 12:30:03 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow reverse; 20 Points
(12/20/2023 12:30:03 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:30:03 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:30:03 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1
(12/20/2023 12:30:03 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:30:03 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (reverse), reverce, True
(12/20/2023 12:30:03 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:30:03 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:30:03 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:30:03 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:30:03 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (0)
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:30:03 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:30:03 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:30:03 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.UpdatePoints) [674]
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue reverse; 20 Points
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:30:03 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:30:03 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:30:03 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:30:03 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.UpdatePoints) [937]
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue reverse; 20 Points
(12/20/2023 12:30:03 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:30:03 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:30:03 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5)
(12/20/2023 12:30:03 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (14), Added; (blue reverse; 20 Points)
(12/20/2023 12:30:03 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:30:03 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (3)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (14), Top Card; (blue reverse; 20 Points)
(12/20/2023 12:30:03 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (3)
Player1 CardCount; (5)
    PlusAmount (0)
    Discard Pile Count; (14), Top Card; (blue reverse; 20 Points)
(12/20/2023 12:30:57 PM) |> ----------------------------------------------
(12/20/2023 12:30:57 PM) |> Method; (SetupFormClass.SetupFormClass) [Start Up]
(12/20/2023 12:30:59 PM) |> method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2]
(12/20/2023 12:31:00 PM) |> method; (SetupFormClass.doneBT_Click)
(12/20/2023 12:31:00 PM) |> method; (Form_PauseMenu.Form_PauseMenu)
(12/20/2023 12:31:00 PM) |> method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870})
(12/20/2023 12:31:00 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1)
(12/20/2023 12:31:00 PM) |> method; (AIClass.AIClass()) [AI INIT]
(12/20/2023 12:31:00 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (2)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.MakeDrawPile)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:31:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (43)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (31)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (34)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (52)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (71)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (37)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (94)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (87)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (53)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (1)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (51)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (54)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (67)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (10)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (76)
(12/20/2023 12:31:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.DisplayDrawPile) [drew stuff]
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 2, 3, 4))
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (blue 1; 1 Points)
(12/20/2023 12:31:00 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:31:00 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:31:00 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:31:00 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:31:00 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:31:00 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:31:00 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:31:00 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:31:00 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:31:00 PM) |> method; (PlayerClass.UpdatePoints) [92]
(12/20/2023 12:31:00 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:31:00 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 1; 1 Points
(12/20/2023 12:31:00 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:31:00 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:31:00 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:31:00 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:31:00 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:31:00 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:31:00 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:31:00 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:31:00 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:31:00 PM) |> method; (PlayerClass.UpdatePoints) [62]
(12/20/2023 12:31:00 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:31:00 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 1; 1 Points
(12/20/2023 12:31:00 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6)
(12/20/2023 12:31:00 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), Added; (blue 1; 1 Points)
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:31:00 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (1), Top Card; (blue 1; 1 Points)
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (0)
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (4), error
(12/20/2023 12:31:06 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (1)
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.UpdatePoints) [180]
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4; 4 Points
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.UpdatePoints) [124]
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4; 4 Points
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:31:06 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8)
(12/20/2023 12:31:06 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2)
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), Added; (blue 4; 4 Points)
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4; 4 Points
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:31:06 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (6), error
(12/20/2023 12:31:06 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (0)
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.UpdatePoints) [268]
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 6; 6 Points
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:31:06 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.UpdatePoints) [180]
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 6; 6 Points
(12/20/2023 12:31:06 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:31:06 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:31:06 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), Added; (blue 6; 6 Points)
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (3), Top Card; (blue 6; 6 Points)
(12/20/2023 12:31:06 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (3), Top Card; (blue 6; 6 Points)
(12/20/2023 12:31:41 PM) |> method; (GameForm.GameForm_FormClosing)
(12/20/2023 12:31:42 PM) |> method; (Form_PauseMenu.closeBT_Click) [closes here??] ---------------------------------------------------
(12/20/2023 12:41:26 PM) |> ----------------------------------------------
(12/20/2023 12:41:26 PM) |> Method; (SetupFormClass.SetupFormClass) [Start Up]
(12/20/2023 12:41:27 PM) |> method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2]
(12/20/2023 12:41:28 PM) |> method; (SetupFormClass.doneBT_Click)
(12/20/2023 12:41:28 PM) |> method; (Form_PauseMenu.Form_PauseMenu)
(12/20/2023 12:41:28 PM) |> method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870})
(12/20/2023 12:41:28 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1)
(12/20/2023 12:41:28 PM) |> method; (AIClass.AIClass()) [AI INIT]
(12/20/2023 12:41:28 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (2)
(12/20/2023 12:41:28 PM) |> method; (GameLogicClass.MakeDrawPile)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 12:41:28 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:41:29 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (81)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (23)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (70)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (25)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (7)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (91)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (24)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (46)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (77)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (23)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (18)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (53)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (25)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (58)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (81)
(12/20/2023 12:41:29 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.DisplayDrawPile) [drew stuff]
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 2, 3, 4))
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (blue 7; 7 Points)
(12/20/2023 12:41:29 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:29 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:41:29 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:41:29 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:41:29 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:41:29 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:41:29 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:41:29 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:41:29 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:41:29 PM) |> method; (PlayerClass.UpdatePoints) [41]
(12/20/2023 12:41:29 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:29 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 7; 7 Points
(12/20/2023 12:41:29 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:29 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:41:29 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:41:29 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:41:29 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:41:29 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:41:29 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:41:29 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:41:29 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:41:29 PM) |> method; (PlayerClass.UpdatePoints) [73]
(12/20/2023 12:41:29 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:29 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 7; 7 Points
(12/20/2023 12:41:29 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:41:29 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), Added; (blue 7; 7 Points)
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:29 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (1), Top Card; (blue 7; 7 Points)
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (5)
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (5)
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (9), error
(12/20/2023 12:41:31 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (1)
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.UpdatePoints) [73]
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue 9; 9 Points
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.UpdatePoints) [146]
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 9; 9 Points
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:31 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7)
(12/20/2023 12:41:31 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4)
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), Added; (blue 9; 9 Points)
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 9; 9 Points
(12/20/2023 12:41:31 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0)
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:41:31 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (reverse), reverce, True
(12/20/2023 12:41:31 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (0)
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.UpdatePoints) [105]
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue reverse; 20 Points
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:41:31 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.UpdatePoints) [199]
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue reverse; 20 Points
(12/20/2023 12:41:31 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:31 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1)
(12/20/2023 12:41:31 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7)
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), Added; (blue reverse; 20 Points)
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (6)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (3), Top Card; (blue reverse; 20 Points)
(12/20/2023 12:41:31 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (6)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (3), Top Card; (blue reverse; 20 Points)
(12/20/2023 12:41:41 PM) |> method; (GameLogicClass.DrawPile_Clicked)
(12/20/2023 12:41:41 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:41 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 92), Value; (43)
(12/20/2023 12:41:41 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:41 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:41 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.UpdatePoints) [157]
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue reverse; 20 Points
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.UpdatePoints) [252]
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue reverse; 20 Points
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:41 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), Added; (Nothing)
(12/20/2023 12:41:41 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue reverse; 20 Points
(12/20/2023 12:41:41 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:41 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 91), Value; (58)
(12/20/2023 12:41:41 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:41 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:41 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:41:41 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:41:41 PM) |> method; (PlayerClass.UpdatePoints) [209]
(12/20/2023 12:41:42 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:42 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue reverse; 20 Points
(12/20/2023 12:41:42 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:42 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:41:42 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:41:42 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:41:42 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:41:42 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:41:42 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:41:42 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:41:42 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:41:42 PM) |> method; (PlayerClass.UpdatePoints) [311]
(12/20/2023 12:41:42 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:42 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue reverse; 20 Points
(12/20/2023 12:41:42 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:42 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), Added; (Nothing)
(12/20/2023 12:41:42 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:42 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (7)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (3), Top Card; (blue reverse; 20 Points)
(12/20/2023 12:41:42 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (7)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (3), Top Card; (blue reverse; 20 Points)
(12/20/2023 12:41:43 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (6)
(12/20/2023 12:41:43 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (6)
(12/20/2023 12:41:43 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (skip), error
(12/20/2023 12:41:43 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:43 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:43 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:43 PM) |> method; (GameLogicClass.CardClickLogic), In skip
(12/20/2023 12:41:43 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:43 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:43 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (6), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (0)
(12/20/2023 12:41:43 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:43 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:41:43 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:41:43 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:41:43 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:41:43 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:41:43 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:41:43 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:41:43 PM) |> method; (PlayerClass.UpdatePoints) [241]
(12/20/2023 12:41:43 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:43 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue skip; 20 Points
(12/20/2023 12:41:43 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:43 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:41:43 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:41:43 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:41:43 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:41:43 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:41:43 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:41:43 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:41:43 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:41:43 PM) |> method; (PlayerClass.UpdatePoints) [370]
(12/20/2023 12:41:43 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:43 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:41:43 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:43 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3)
(12/20/2023 12:41:43 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6)
(12/20/2023 12:41:43 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), Added; (blue skip; 20 Points)
(12/20/2023 12:41:43 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:43 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (6)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (4), Top Card; (blue skip; 20 Points)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.DrawPile_Clicked)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 90), Value; (6)
(12/20/2023 12:41:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.UpdatePoints) [279]
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue skip; 20 Points
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.UpdatePoints) [429]
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), Added; (Nothing)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:41:45 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (skip), error
(12/20/2023 12:41:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.CardClickLogic), In skip
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (1)
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.UpdatePoints) [317]
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow skip; 20 Points
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.UpdatePoints) [468]
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow skip; 20 Points
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:45 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 12:41:45 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (5), Added; (yellow skip; 20 Points)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow skip; 20 Points
(12/20/2023 12:41:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:41:45 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (6), error
(12/20/2023 12:41:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (0)
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.UpdatePoints) [355]
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 6; 6 Points
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:41:45 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.UpdatePoints) [501]
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 6; 6 Points
(12/20/2023 12:41:45 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:45 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6)
(12/20/2023 12:41:45 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (6), Added; (yellow 6; 6 Points)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (7)
Player1 CardCount; (5)
    PlusAmount (0)
    Discard Pile Count; (6), Top Card; (yellow 6; 6 Points)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (7)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (6), Top Card; (yellow 6; 6 Points)
(12/20/2023 12:41:45 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (7)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (6), Top Card; (yellow 6; 6 Points)
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (2)
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (8), error
(12/20/2023 12:41:47 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (1)
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.UpdatePoints) [385]
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 8; 8 Points
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.UpdatePoints) [534]
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 8; 8 Points
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:47 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:41:47 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (7), Added; (yellow 8; 8 Points)
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 8; 8 Points
(12/20/2023 12:41:47 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:41:47 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (4), error
(12/20/2023 12:41:47 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (0)
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.UpdatePoints) [415]
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4; 4 Points
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:41:47 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.UpdatePoints) [563]
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4; 4 Points
(12/20/2023 12:41:47 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:47 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3)
(12/20/2023 12:41:47 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), Added; (yellow 4; 4 Points)
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (6)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (8), Top Card; (yellow 4; 4 Points)
(12/20/2023 12:41:47 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (6)
Player1 CardCount; (5)
    PlusAmount (0)
    Discard Pile Count; (8), Top Card; (yellow 4; 4 Points)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (1)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (+2), add, 2
(12/20/2023 12:41:48 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:48 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 89), Value; (50)
(12/20/2023 12:41:48 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:48 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 88), Value; (37)
(12/20/2023 12:41:48 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.AddCards), cards added; (AddCards Index: 1 AddCards Index: 1 )
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (1)
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.UpdatePoints) [435]
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (yellow +2; 10 Points
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.UpdatePoints) [608]
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +2; 10 Points
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:48 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7)
(12/20/2023 12:41:48 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), Added; (yellow +2; 10 Points)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +2; 10 Points
(12/20/2023 12:41:48 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:41:48 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (6), error
(12/20/2023 12:41:48 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (0)
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.UpdatePoints) [455]
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 6; 6 Points
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:41:48 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.UpdatePoints) [647]
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 6; 6 Points
(12/20/2023 12:41:48 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:48 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3)
(12/20/2023 12:41:48 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (10), Added; (yellow 6; 6 Points)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (5)
Player1 CardCount; (5)
    PlusAmount (0)
    Discard Pile Count; (10), Top Card; (yellow 6; 6 Points)
(12/20/2023 12:41:48 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (5)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (10), Top Card; (yellow 6; 6 Points)
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (4)
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (4)
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (6), error
(12/20/2023 12:41:50 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (1)
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.UpdatePoints) [469]
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 6; 6 Points
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.UpdatePoints) [686]
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 6; 6 Points
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:50 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2)
(12/20/2023 12:41:50 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (11), Added; (red 6; 6 Points)
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 6; 6 Points
(12/20/2023 12:41:50 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0)
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:41:50 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (9), error
(12/20/2023 12:41:50 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (0)
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.UpdatePoints) [483]
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 9; 9 Points
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:41:50 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.UpdatePoints) [716]
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 9; 9 Points
(12/20/2023 12:41:50 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:50 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8)
(12/20/2023 12:41:50 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3)
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (12), Added; (red 9; 9 Points)
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (4)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (12), Top Card; (red 9; 9 Points)
(12/20/2023 12:41:50 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (4)
Player1 CardCount; (5)
    PlusAmount (0)
    Discard Pile Count; (12), Top Card; (red 9; 9 Points)
(12/20/2023 12:41:51 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:41:51 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (2)
(12/20/2023 12:41:51 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (7), error
(12/20/2023 12:41:51 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:51 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:51 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:51 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:51 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 7), Player Index (1)
(12/20/2023 12:41:51 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:51 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:41:51 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:41:51 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:41:51 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:41:51 PM) |> method; (PlayerClass.UpdatePoints) [490]
(12/20/2023 12:41:51 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:51 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (red 7; 7 Points
(12/20/2023 12:41:51 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:51 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:41:51 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:41:51 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:41:51 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:41:51 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:41:51 PM) |> method; (PlayerClass.UpdatePoints) [746]
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 7; 7 Points
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 12:41:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (13), Added; (red 7; 7 Points)
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 7; 7 Points
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:41:52 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (+2), add, 2
(12/20/2023 12:41:52 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:52 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 87), Value; (70)
(12/20/2023 12:41:52 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:52 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 86), Value; (6)
(12/20/2023 12:41:52 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.AddCards), cards added; (AddCards Index: 0 AddCards Index: 0 )
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (0)
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:52 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:41:52 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:41:52 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:41:52 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:41:52 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.UpdatePoints) [506]
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +2; 10 Points
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:52 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:41:52 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:41:52 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.UpdatePoints) [766]
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (red +2; 10 Points
(12/20/2023 12:41:52 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5)
(12/20/2023 12:41:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8)
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (14), Added; (red +2; 10 Points)
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (5)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (14), Top Card; (red +2; 10 Points)
(12/20/2023 12:41:52 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (3)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (14), Top Card; (red +2; 10 Points)
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (4)
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (4)
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (8), error
(12/20/2023 12:41:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (1)
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.UpdatePoints) [514]
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (red 8; 8 Points
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.UpdatePoints) [786]
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (red 8; 8 Points
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:53 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1)
(12/20/2023 12:41:53 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (15), Added; (red 8; 8 Points)
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (red 8; 8 Points
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 85), Value; (40)
(12/20/2023 12:41:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.UpdatePoints) [522]
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (red 8; 8 Points
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:41:53 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.UpdatePoints) [807]
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 8; 8 Points
(12/20/2023 12:41:53 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (15), Added; (Nothing)
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (4)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (15), Top Card; (red 8; 8 Points)
(12/20/2023 12:41:53 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (4)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (15), Top Card; (red 8; 8 Points)
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.DrawPile_Clicked)
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:41:55 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 84), Value; (20)
(12/20/2023 12:41:55 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.UpdatePoints) [532]
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (red 8; 8 Points
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.UpdatePoints) [828]
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 8; 8 Points
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (15), Added; (Nothing)
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 8; 8 Points
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:41:55 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (1), error
(12/20/2023 12:41:55 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (0)
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.UpdatePoints) [542]
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 1; 1 Points
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:41:55 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.UpdatePoints) [848]
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (red 1; 1 Points
(12/20/2023 12:41:55 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:55 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2)
(12/20/2023 12:41:55 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0)
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (16), Added; (red 1; 1 Points)
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (5)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (16), Top Card; (red 1; 1 Points)
(12/20/2023 12:41:55 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (5)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (16), Top Card; (red 1; 1 Points)
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (3)
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (1), error
(12/20/2023 12:41:56 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (1)
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:56 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:41:56 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:41:56 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:41:56 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.UpdatePoints) [551]
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 1; 1 Points
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:56 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:41:56 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:41:56 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.UpdatePoints) [868]
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 1; 1 Points
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:56 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:41:56 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3)
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (17), Added; (blue 1; 1 Points)
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 1; 1 Points
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:41:56 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (6), error
(12/20/2023 12:41:56 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:56 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (0)
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:56 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:41:56 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:41:56 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:41:56 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:41:56 PM) |> method; (PlayerClass.UpdatePoints) [560]
(12/20/2023 12:41:57 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:57 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 6; 6 Points
(12/20/2023 12:41:57 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:57 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:41:57 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:41:57 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (720, 720)
(12/20/2023 12:41:57 PM) |> method; (PlayerClass.UpdatePoints) [882]
(12/20/2023 12:41:57 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:57 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue 6; 6 Points
(12/20/2023 12:41:57 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:57 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7)
(12/20/2023 12:41:57 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0)
(12/20/2023 12:41:57 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (18), Added; (blue 6; 6 Points)
(12/20/2023 12:41:57 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:57 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (4)
Player1 CardCount; (2)
    PlusAmount (0)
    Discard Pile Count; (18), Top Card; (blue 6; 6 Points)
(12/20/2023 12:41:57 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (4)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (18), Top Card; (blue 6; 6 Points)
(12/20/2023 12:41:57 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:41:57 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (2)
(12/20/2023 12:41:58 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:41:58 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (0)
(12/20/2023 12:41:58 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (6), error
(12/20/2023 12:41:58 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:58 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:58 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:58 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:41:58 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (1)
(12/20/2023 12:41:58 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:58 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:41:58 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:41:58 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:41:58 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:41:58 PM) |> method; (PlayerClass.UpdatePoints) [563]
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 6; 6 Points
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:59 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:41:59 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (720, 720)
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.UpdatePoints) [896]
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 6; 6 Points
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:59 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8)
(12/20/2023 12:41:59 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:41:59 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (19), Added; (green 6; 6 Points)
(12/20/2023 12:41:59 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 6; 6 Points
(12/20/2023 12:41:59 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:41:59 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:41:59 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 12:41:59 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:41:59 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (9), error
(12/20/2023 12:41:59 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:41:59 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:59 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:41:59 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:41:59 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (0)
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:59 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:41:59 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:41:59 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.UpdatePoints) [566]
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 9; 9 Points
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:41:59 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (695, 695)
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.UpdatePoints) [901]
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 9; 9 Points
(12/20/2023 12:41:59 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:41:59 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9)
(12/20/2023 12:41:59 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:41:59 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (20), Added; (green 9; 9 Points)
(12/20/2023 12:41:59 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:41:59 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (3)
Player1 CardCount; (1)
    PlusAmount (0)
    Discard Pile Count; (20), Top Card; (green 9; 9 Points)
(12/20/2023 12:41:59 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (3)
Player1 CardCount; (2)
    PlusAmount (0)
    Discard Pile Count; (20), Top Card; (green 9; 9 Points)
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (1)
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (1), error
(12/20/2023 12:42:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (1)
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:42:00 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:42:00 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (720, 720)
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.UpdatePoints) [568]
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 1; 1 Points
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:42:00 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (695, 695)
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.UpdatePoints) [906]
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 1; 1 Points
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:42:00 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8)
(12/20/2023 12:42:00 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2)
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (21), Added; (green 1; 1 Points)
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 1; 1 Points
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:42:00 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (5), error
(12/20/2023 12:42:00 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 5), Player Index (0)
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:42:00 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:42:00 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (720, 720)
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.UpdatePoints) [570]
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:42:00 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 5; 5 Points
(12/20/2023 12:42:00 PM) |> method; (WinConditonForm.WinConditonForm) ---------------------------------------------------
(12/20/2023 12:42:00 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (2)
Player1 CardCount; (1)
    PlusAmount (0)
    Discard Pile Count; (22), Top Card; (green 5; 5 Points)
(12/20/2023 12:42:06 PM) |> method; (GameForm.GameForm_FormClosing)
(12/20/2023 12:42:07 PM) |> method; (Form_PauseMenu.closeBT_Click) [closes here??] ---------------------------------------------------
(12/20/2023 12:47:45 PM) |> ----------------------------------------------
(12/20/2023 12:47:45 PM) |> Method; (SetupFormClass.SetupFormClass) [Start Up]
(12/20/2023 12:47:47 PM) |> method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2]
(12/20/2023 12:47:48 PM) |> method; (SetupFormClass.doneBT_Click)
(12/20/2023 12:47:48 PM) |> method; (Form_PauseMenu.Form_PauseMenu)
(12/20/2023 12:47:48 PM) |> method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870})
(12/20/2023 12:47:48 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1)
(12/20/2023 12:47:48 PM) |> method; (AIClass.AIClass()) [AI INIT]
(12/20/2023 12:47:48 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (2)
(12/20/2023 12:47:48 PM) |> method; (GameLogicClass.MakeDrawPile)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 12:47:48 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:47:49 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (33)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (17)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (90)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (66)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (67)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (10)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (20)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (47)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (91)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (76)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (66)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (8)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (84)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (33)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (80)
(12/20/2023 12:47:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.DisplayDrawPile) [drew stuff]
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 2, 3, 4))
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (blue 4; 4 Points)
(12/20/2023 12:47:49 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:47:49 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:47:49 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:47:49 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:47:49 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:47:49 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:47:49 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:47:49 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:47:49 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:47:49 PM) |> method; (PlayerClass.UpdatePoints) [47]
(12/20/2023 12:47:49 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:47:49 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4; 4 Points
(12/20/2023 12:47:49 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:47:49 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:47:49 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:47:49 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:47:49 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:47:49 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:47:49 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:47:49 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:47:49 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:47:49 PM) |> method; (PlayerClass.UpdatePoints) [94]
(12/20/2023 12:47:49 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:47:49 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4; 4 Points
(12/20/2023 12:47:49 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1)
(12/20/2023 12:47:49 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), Added; (blue 4; 4 Points)
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:47:49 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (1), Top Card; (blue 4; 4 Points)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (2)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (5), error
(12/20/2023 12:47:52 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 5), Player Index (1)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.UpdatePoints) [89]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 5; 5 Points
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.UpdatePoints) [188]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 5; 5 Points
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:47:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2)
(12/20/2023 12:47:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), Added; (blue 5; 5 Points)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 5; 5 Points
(12/20/2023 12:47:52 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:47:52 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (skip), error
(12/20/2023 12:47:52 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.CardClickLogic), In skip
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (1)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.UpdatePoints) [131]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue skip; 20 Points
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.UpdatePoints) [262]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:47:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6)
(12/20/2023 12:47:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), Added; (blue skip; 20 Points)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:47:52 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:47:52 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (skip), error
(12/20/2023 12:47:52 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.CardClickLogic), In skip
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (1)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.UpdatePoints) [173]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue skip; 20 Points
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.UpdatePoints) [316]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:47:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9)
(12/20/2023 12:47:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), Added; (blue skip; 20 Points)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:47:52 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:47:52 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (8), error
(12/20/2023 12:47:52 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (0)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.UpdatePoints) [215]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue 8; 8 Points
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:47:52 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.UpdatePoints) [362]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 8; 8 Points
(12/20/2023 12:47:52 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:47:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4)
(12/20/2023 12:47:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (5), Added; (blue 8; 8 Points)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (5), Top Card; (blue 8; 8 Points)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (5)
    PlusAmount (0)
    Discard Pile Count; (5), Top Card; (blue 8; 8 Points)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (5), Top Card; (blue 8; 8 Points)
(12/20/2023 12:47:52 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (5), Top Card; (blue 8; 8 Points)
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.DrawPile_Clicked)
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:47:59 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 92), Value; (4)
(12/20/2023 12:47:59 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.UpdatePoints) [261]
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue 8; 8 Points
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.UpdatePoints) [408]
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 8; 8 Points
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (5), Added; (Nothing)
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 8; 8 Points
(12/20/2023 12:47:59 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:47:59 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (8), error
(12/20/2023 12:47:59 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (0)
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.UpdatePoints) [307]
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 8; 8 Points
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:47:59 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.UpdatePoints) [446]
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 8; 8 Points
(12/20/2023 12:47:59 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:47:59 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 12:47:59 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2)
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (6), Added; (green 8; 8 Points)
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (6), Top Card; (green 8; 8 Points)
(12/20/2023 12:47:59 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (6), Top Card; (green 8; 8 Points)
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (0)
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (7), error
(12/20/2023 12:48:02 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 7), Player Index (1)
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.UpdatePoints) [346]
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 7; 7 Points
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.UpdatePoints) [484]
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 7; 7 Points
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:48:02 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:48:02 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1)
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (7), Added; (green 7; 7 Points)
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 7; 7 Points
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:48:02 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (skip), error
(12/20/2023 12:48:02 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.CardClickLogic), In skip
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:48:02 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (1)
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.UpdatePoints) [385]
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green skip; 20 Points
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:48:02 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (720, 720)
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.UpdatePoints) [502]
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:48:02 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green skip; 20 Points
(12/20/2023 12:48:03 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:48:03 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6)
(12/20/2023 12:48:03 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8)
(12/20/2023 12:48:03 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), Added; (green skip; 20 Points)
(12/20/2023 12:48:03 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:48:03 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green skip; 20 Points
(12/20/2023 12:48:03 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:48:03 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 91), Value; (37)
(12/20/2023 12:48:03 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:48:03 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:48:03 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one
(12/20/2023 12:48:03 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:03 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:48:03 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:48:03 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:48:03 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:48:03 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:48:03 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:48:03 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:48:03 PM) |> method; (PlayerClass.UpdatePoints) [424]
(12/20/2023 12:48:03 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:48:03 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green skip; 20 Points
(12/20/2023 12:48:03 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:03 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:48:03 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:48:03 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:48:03 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:48:03 PM) |> method; (PlayerClass.UpdatePoints) [525]
(12/20/2023 12:48:03 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:48:03 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green skip; 20 Points
(12/20/2023 12:48:03 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:48:03 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), Added; (Nothing)
(12/20/2023 12:48:03 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:48:03 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (8), Top Card; (green skip; 20 Points)
(12/20/2023 12:48:03 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (2)
    PlusAmount (0)
    Discard Pile Count; (8), Top Card; (green skip; 20 Points)
(12/20/2023 12:48:03 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (8), Top Card; (green skip; 20 Points)
(12/20/2023 12:48:06 PM) |> method; (GameLogicClass.DrawPile_Clicked)
(12/20/2023 12:48:06 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:48:06 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 90), Value; (31)
(12/20/2023 12:48:06 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:48:06 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:48:06 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one
(12/20/2023 12:48:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:06 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:48:06 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:48:06 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:48:06 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:48:06 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:48:06 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:48:06 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:48:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:48:06 PM) |> method; (PlayerClass.UpdatePoints) [483]
(12/20/2023 12:48:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:48:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green skip; 20 Points
(12/20/2023 12:48:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:06 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:48:06 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:48:06 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:48:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:48:06 PM) |> method; (PlayerClass.UpdatePoints) [548]
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green skip; 20 Points
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:48:07 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), Added; (Nothing)
(12/20/2023 12:48:07 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green skip; 20 Points
(12/20/2023 12:48:07 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:48:07 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 89), Value; (30)
(12/20/2023 12:48:07 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:48:07 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:48:07 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:07 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:48:07 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:48:07 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:48:07 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:48:07 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:48:07 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:48:07 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.UpdatePoints) [542]
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green skip; 20 Points
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:07 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:48:07 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:48:07 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:48:07 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.UpdatePoints) [581]
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green skip; 20 Points
(12/20/2023 12:48:07 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:48:07 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), Added; (Nothing)
(12/20/2023 12:48:07 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:48:07 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (8), Top Card; (green skip; 20 Points)
(12/20/2023 12:48:07 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (8), Top Card; (green skip; 20 Points)
(12/20/2023 12:48:08 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (6)
(12/20/2023 12:48:08 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (6)
(12/20/2023 12:48:08 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (reverse), reverce, True
(12/20/2023 12:48:08 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:48:08 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:48:08 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:48:08 PM) |> method; (GameLogicClass.CardClickLogic), In skip
(12/20/2023 12:48:08 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:48:08 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:48:08 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (6), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (0)
(12/20/2023 12:48:08 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:08 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:48:08 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:48:08 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:48:08 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:48:08 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:48:08 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:48:08 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:48:08 PM) |> method; (PlayerClass.UpdatePoints) [581]
(12/20/2023 12:48:08 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:48:08 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green reverse; 20 Points
(12/20/2023 12:48:08 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:08 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:48:08 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:48:08 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:48:08 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:48:08 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:48:08 PM) |> method; (PlayerClass.UpdatePoints) [614]
(12/20/2023 12:48:08 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:48:08 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green reverse; 20 Points
(12/20/2023 12:48:08 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:48:08 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5)
(12/20/2023 12:48:08 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:48:08 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), Added; (green reverse; 20 Points)
(12/20/2023 12:48:08 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:48:08 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (6)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (9), Top Card; (green reverse; 20 Points)
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.DrawPile_Clicked)
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:48:10 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 88), Value; (7)
(12/20/2023 12:48:10 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one
(12/20/2023 12:48:10 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:10 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:48:10 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:48:10 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:48:10 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:48:10 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:48:10 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:48:10 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:48:10 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:48:10 PM) |> method; (PlayerClass.UpdatePoints) [629]
(12/20/2023 12:48:10 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:48:10 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green reverse; 20 Points
(12/20/2023 12:48:10 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:10 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:48:10 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:48:10 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:48:10 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:48:10 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:48:10 PM) |> method; (PlayerClass.UpdatePoints) [647]
(12/20/2023 12:48:10 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:48:10 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green reverse; 20 Points
(12/20/2023 12:48:10 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), Added; (Nothing)
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:48:10 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green reverse; 20 Points
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:48:10 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (+2), add, 2
(12/20/2023 12:48:10 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:48:10 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 87), Value; (3)
(12/20/2023 12:48:10 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:48:10 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 86), Value; (23)
(12/20/2023 12:48:10 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.AddCards), cards added; (AddCards Index: 0 AddCards Index: 0 )
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:48:10 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (0)
(12/20/2023 12:48:10 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:10 PM) |> method; (CardClass.SetPBLocation), x, y; (475, 765)
(12/20/2023 12:48:10 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:48:11 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:48:11 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:48:11 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:48:11 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:48:11 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:48:11 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:48:11 PM) |> method; (CardClass.SetPBLocation), x, y; (915, 765)
(12/20/2023 12:48:11 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (915, 915)
(12/20/2023 12:48:11 PM) |> method; (PlayerClass.UpdatePoints) [684]
(12/20/2023 12:48:11 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:48:11 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green +2; 10 Points
(12/20/2023 12:48:11 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:11 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:48:11 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:48:11 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:48:11 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:48:11 PM) |> method; (PlayerClass.UpdatePoints) [670]
(12/20/2023 12:48:11 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:48:11 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green +2; 10 Points
(12/20/2023 12:48:11 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:48:11 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:48:11 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8)
(12/20/2023 12:48:11 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (10), Added; (green +2; 10 Points)
(12/20/2023 12:48:11 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:48:11 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (9)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (10), Top Card; (green +2; 10 Points)
(12/20/2023 12:48:11 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (7)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (10), Top Card; (green +2; 10 Points)
(12/20/2023 12:48:12 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (8)
(12/20/2023 12:48:12 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (8)
(12/20/2023 12:48:12 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (4), error
(12/20/2023 12:48:12 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:48:12 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:48:12 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:48:12 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:48:12 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (8), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (1)
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 765)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 765)
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (885, 885)
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.UpdatePoints) [735]
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 4; 4 Points
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.UpdatePoints) [693]
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green 4; 4 Points
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:48:12 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5)
(12/20/2023 12:48:12 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 12:48:12 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (11), Added; (green 4; 4 Points)
(12/20/2023 12:48:12 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green 4; 4 Points
(12/20/2023 12:48:12 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:48:12 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 85), Value; (66)
(12/20/2023 12:48:12 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:48:12 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:48:12 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 765)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 765)
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (885, 885)
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.UpdatePoints) [786]
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 4; 4 Points
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:48:12 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:48:12 PM) |> method; (PlayerClass.UpdatePoints) [725]
(12/20/2023 12:48:13 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:48:13 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 4; 4 Points
(12/20/2023 12:48:13 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:48:13 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (11), Added; (Nothing)
(12/20/2023 12:48:13 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:48:13 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (8)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (11), Top Card; (green 4; 4 Points)
(12/20/2023 12:48:13 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (8)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (11), Top Card; (green 4; 4 Points)
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (5)
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (5)
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (4), error
(12/20/2023 12:48:25 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (1)
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.UpdatePoints) [833]
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 4; 4 Points
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.UpdatePoints) [757]
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 4; 4 Points
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:48:25 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2)
(12/20/2023 12:48:25 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (12), Added; (red 4; 4 Points)
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 4; 4 Points
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:48:25 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (8), error
(12/20/2023 12:48:25 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (0)
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.UpdatePoints) [880]
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 8; 8 Points
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:48:25 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.UpdatePoints) [781]
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (red 8; 8 Points
(12/20/2023 12:48:25 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:48:25 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1)
(12/20/2023 12:48:25 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1)
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (13), Added; (red 8; 8 Points)
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (7)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (13), Top Card; (red 8; 8 Points)
(12/20/2023 12:48:25 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (7)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (13), Top Card; (red 8; 8 Points)
(12/20/2023 12:48:29 PM) |> method; (GameForm.GameForm_FormClosing)
(12/20/2023 12:48:31 PM) |> method; (Form_PauseMenu.closeBT_Click) [closes here??] ---------------------------------------------------
(12/20/2023 12:50:56 PM) |> ----------------------------------------------
(12/20/2023 12:50:56 PM) |> Method; (SetupFormClass.SetupFormClass) [Start Up]
(12/20/2023 12:50:59 PM) |> method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2]
(12/20/2023 12:51:01 PM) |> method; (SetupFormClass.doneBT_Click)
(12/20/2023 12:51:01 PM) |> method; (Form_PauseMenu.Form_PauseMenu)
(12/20/2023 12:51:01 PM) |> method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870})
(12/20/2023 12:51:01 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1)
(12/20/2023 12:51:01 PM) |> method; (AIClass.AIClass()) [AI INIT]
(12/20/2023 12:51:01 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (2)
(12/20/2023 12:51:01 PM) |> method; (GameLogicClass.MakeDrawPile)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 12:51:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:51:02 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 12:51:02 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 12:51:02 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:02 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (2)
(12/20/2023 12:51:02 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:02 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:02 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (69)
(12/20/2023 12:51:02 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:02 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:02 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (99)
(12/20/2023 12:51:02 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:02 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:02 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (33)
(12/20/2023 12:51:02 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:02 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:02 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (97)
(12/20/2023 12:51:02 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:02 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:02 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (5)
(12/20/2023 12:51:02 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:02 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:02 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (25)
(12/20/2023 12:51:02 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:02 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 12:51:02 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:03 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (47)
(12/20/2023 12:51:03 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:03 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:03 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (69)
(12/20/2023 12:51:03 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:03 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:03 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (4)
(12/20/2023 12:51:03 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:03 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:03 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (50)
(12/20/2023 12:51:03 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:03 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:03 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (90)
(12/20/2023 12:51:03 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:03 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:03 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (54)
(12/20/2023 12:51:03 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:03 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:03 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (83)
(12/20/2023 12:51:03 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:03 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:03 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (38)
(12/20/2023 12:51:03 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:03 PM) |> method; (GameLogicClass.DisplayDrawPile) [drew stuff]
(12/20/2023 12:51:03 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 2, 3, 4))
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (blue 4; 4 Points)
(12/20/2023 12:51:03 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:03 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:51:03 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:51:03 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:03 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:03 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:03 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:51:03 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:51:03 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:51:03 PM) |> method; (PlayerClass.UpdatePoints) [124]
(12/20/2023 12:51:03 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:03 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4; 4 Points
(12/20/2023 12:51:03 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:03 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:51:03 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:03 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:03 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:03 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:03 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:03 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:51:03 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:51:03 PM) |> method; (PlayerClass.UpdatePoints) [86]
(12/20/2023 12:51:03 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:03 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4; 4 Points
(12/20/2023 12:51:03 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:03 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0)
(12/20/2023 12:51:03 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5)
(12/20/2023 12:51:03 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), Added; (blue 4; 4 Points)
(12/20/2023 12:51:03 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:03 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (1), Top Card; (blue 4; 4 Points)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.DrawPile_Clicked)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:06 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 92), Value; (77)
(12/20/2023 12:51:06 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 765)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (885, 885)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.UpdatePoints) [249]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4; 4 Points
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.UpdatePoints) [172]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4; 4 Points
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), Added; (Nothing)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4; 4 Points
(12/20/2023 12:51:06 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:06 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (skip), error
(12/20/2023 12:51:06 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.CardClickLogic), In skip
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (1)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 765)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (885, 885)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.UpdatePoints) [374]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.UpdatePoints) [238]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:06 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:51:06 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), Added; (blue skip; 20 Points)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:51:06 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:06 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (skip), error
(12/20/2023 12:51:06 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.CardClickLogic), In skip
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (1)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 765)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (885, 885)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.UpdatePoints) [499]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow skip; 20 Points
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.UpdatePoints) [284]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow skip; 20 Points
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:06 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6)
(12/20/2023 12:51:06 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), Added; (yellow skip; 20 Points)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow skip; 20 Points
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:51:06 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (skip), error
(12/20/2023 12:51:06 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.CardClickLogic), In skip
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (1)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 765)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (885, 885)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.UpdatePoints) [624]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.UpdatePoints) [310]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:06 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5)
(12/20/2023 12:51:06 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), Added; (blue skip; 20 Points)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip; 20 Points
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:51:06 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (6), error
(12/20/2023 12:51:06 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (0)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 765)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (885, 885)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.UpdatePoints) [749]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 6; 6 Points
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:06 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.UpdatePoints) [330]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue 6; 6 Points
(12/20/2023 12:51:06 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:06 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0)
(12/20/2023 12:51:06 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (5), Added; (blue 6; 6 Points)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (8)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (5), Top Card; (blue 6; 6 Points)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (8)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (5), Top Card; (blue 6; 6 Points)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (8)
Player1 CardCount; (5)
    PlusAmount (0)
    Discard Pile Count; (5), Top Card; (blue 6; 6 Points)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (8)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (5), Top Card; (blue 6; 6 Points)
(12/20/2023 12:51:06 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (8)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (5), Top Card; (blue 6; 6 Points)
(12/20/2023 12:51:11 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (7)
(12/20/2023 12:51:11 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (7)
(12/20/2023 12:51:11 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (1), error
(12/20/2023 12:51:11 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:11 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:11 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:11 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:11 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (7), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (1)
(12/20/2023 12:51:11 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:11 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:51:11 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:51:11 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:11 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:11 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:11 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:51:11 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:51:11 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:51:11 PM) |> method; (PlayerClass.UpdatePoints) [873]
(12/20/2023 12:51:11 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:11 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 1; 1 Points
(12/20/2023 12:51:11 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:11 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:11 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:11 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:11 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:51:11 PM) |> method; (PlayerClass.UpdatePoints) [350]
(12/20/2023 12:51:11 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:11 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue 1; 1 Points
(12/20/2023 12:51:11 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:11 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:51:11 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8)
(12/20/2023 12:51:11 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (6), Added; (blue 1; 1 Points)
(12/20/2023 12:51:11 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:11 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue 1; 1 Points
(12/20/2023 12:51:11 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:11 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 91), Value; (44)
(12/20/2023 12:51:11 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:11 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:11 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one
(12/20/2023 12:51:11 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:11 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:51:11 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:51:11 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:11 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:12 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:12 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:51:12 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:51:12 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:51:12 PM) |> method; (PlayerClass.UpdatePoints) [997]
(12/20/2023 12:51:12 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:12 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 1; 1 Points
(12/20/2023 12:51:12 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:12 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:12 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:12 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:12 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:12 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:51:12 PM) |> method; (PlayerClass.UpdatePoints) [390]
(12/20/2023 12:51:12 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:12 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 1; 1 Points
(12/20/2023 12:51:12 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:12 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (6), Added; (Nothing)
(12/20/2023 12:51:12 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:12 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (6), Top Card; (blue 1; 1 Points)
(12/20/2023 12:51:12 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (6), Top Card; (blue 1; 1 Points)
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (6)
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (6)
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (1), error
(12/20/2023 12:51:13 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (6), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (1)
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.UpdatePoints) [1120]
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 1; 1 Points
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.UpdatePoints) [430]
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green 1; 1 Points
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:13 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8)
(12/20/2023 12:51:13 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7)
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (7), Added; (green 1; 1 Points)
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green 1; 1 Points
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:13 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 90), Value; (54)
(12/20/2023 12:51:13 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.UpdatePoints) [1243]
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 1; 1 Points
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:13 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.UpdatePoints) [471]
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 1; 1 Points
(12/20/2023 12:51:13 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (7), Added; (Nothing)
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (5)
    PlusAmount (0)
    Discard Pile Count; (7), Top Card; (green 1; 1 Points)
(12/20/2023 12:51:13 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (7), Top Card; (green 1; 1 Points)
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (3)
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (8), error
(12/20/2023 12:51:15 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (1)
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.UpdatePoints) [1358]
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 8; 8 Points
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.UpdatePoints) [512]
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green 8; 8 Points
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:15 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9)
(12/20/2023 12:51:15 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6)
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), Added; (green 8; 8 Points)
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green 8; 8 Points
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:15 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 89), Value; (11)
(12/20/2023 12:51:15 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.UpdatePoints) [1473]
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 8; 8 Points
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:15 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.UpdatePoints) [554]
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green 8; 8 Points
(12/20/2023 12:51:15 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), Added; (Nothing)
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (5)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (8), Top Card; (green 8; 8 Points)
(12/20/2023 12:51:15 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (5)
Player1 CardCount; (5)
    PlusAmount (0)
    Discard Pile Count; (8), Top Card; (green 8; 8 Points)
(12/20/2023 12:51:18 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:51:18 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (2)
(12/20/2023 12:51:18 PM) |> method; (wildFormClass.wildFormClass)
(12/20/2023 12:51:19 PM) |> method; (wildFormClass.redBT_Click) [this.Tag = red]
(12/20/2023 12:51:19 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (+4_wild), add, 4
(12/20/2023 12:51:19 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:19 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:19 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:19 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 88), Value; (83)
(12/20/2023 12:51:19 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:19 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:19 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 87), Value; (12)
(12/20/2023 12:51:19 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:19 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:19 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 86), Value; (41)
(12/20/2023 12:51:19 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:19 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:19 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 85), Value; (0)
(12/20/2023 12:51:19 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:19 PM) |> method; (GameLogicClass.AddCards), cards added; (AddCards Index: 1 AddCards Index: 1 AddCards Index: 1 AddCards Index: 1 )
(12/20/2023 12:51:19 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:19 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:19 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +4_wild), Player Index (1)
(12/20/2023 12:51:19 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:19 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:19 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.UpdatePoints) [1538]
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +4_wild; 50 Points
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (445, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (940, 5)
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (940, 940)
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.UpdatePoints) [659]
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +4_wild; 50 Points
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:20 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1)
(12/20/2023 12:51:20 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), Added; (red +4_wild; 50 Points)
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +4_wild; 50 Points
(12/20/2023 12:51:20 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 4), Value; (2)
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:51:20 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (5), Card index; (2), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (+2), add, 2
(12/20/2023 12:51:20 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:20 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 84), Value; (36)
(12/20/2023 12:51:20 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:20 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 83), Value; (69)
(12/20/2023 12:51:20 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.AddCards), cards added; (AddCards Index: 0 AddCards Index: 0 )
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (0)
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.UpdatePoints) [1629]
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +2; 10 Points
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (475, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:51:20 PM) |> method; (CardClass.SetPBLocation), x, y; (915, 5)
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (915, 915)
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.UpdatePoints) [754]
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +2; 10 Points
(12/20/2023 12:51:20 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:20 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3)
(12/20/2023 12:51:20 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8)
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (10), Added; (red +2; 10 Points)
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (9)
    PlusAmount (0)
    Discard Pile Count; (10), Top Card; (red +2; 10 Points)
(12/20/2023 12:51:20 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (4)
Player1 CardCount; (10)
    PlusAmount (0)
    Discard Pile Count; (10), Top Card; (red +2; 10 Points)
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (3)
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (6), error
(12/20/2023 12:51:22 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (1)
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.UpdatePoints) [1714]
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 6; 6 Points
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (475, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (915, 5)
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (915, 915)
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.UpdatePoints) [849]
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 6; 6 Points
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:22 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8)
(12/20/2023 12:51:22 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7)
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (11), Added; (red 6; 6 Points)
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 6; 6 Points
(12/20/2023 12:51:22 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 3), Value; (1)
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:51:22 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (4), Card index; (1), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (5), error
(12/20/2023 12:51:22 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:22 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 5), Player Index (0)
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.UpdatePoints) [1799]
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 5; 5 Points
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:51:22 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 5)
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (885, 885)
(12/20/2023 12:51:22 PM) |> method; (PlayerClass.UpdatePoints) [939]
(12/20/2023 12:51:23 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:23 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 5; 5 Points
(12/20/2023 12:51:23 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:23 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9)
(12/20/2023 12:51:23 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2)
(12/20/2023 12:51:23 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (12), Added; (red 5; 5 Points)
(12/20/2023 12:51:23 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:23 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (5)
Player1 CardCount; (8)
    PlusAmount (0)
    Discard Pile Count; (12), Top Card; (red 5; 5 Points)
(12/20/2023 12:51:23 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (5)
Player1 CardCount; (9)
    PlusAmount (0)
    Discard Pile Count; (12), Top Card; (red 5; 5 Points)
(12/20/2023 12:51:23 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:23 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (0)
(12/20/2023 12:51:23 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (2), error
(12/20/2023 12:51:23 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:23 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:23 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:23 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:23 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 2), Player Index (1)
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.UpdatePoints) [1882]
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 2; 2 Points
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 5)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 5)
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (885, 885)
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.UpdatePoints) [1029]
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 2; 2 Points
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:24 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0)
(12/20/2023 12:51:24 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1)
(12/20/2023 12:51:24 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (13), Added; (red 2; 2 Points)
(12/20/2023 12:51:24 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 2; 2 Points
(12/20/2023 12:51:24 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0)
(12/20/2023 12:51:24 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:24 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 12:51:24 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:24 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (5), error
(12/20/2023 12:51:24 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:24 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:24 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:24 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:24 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 5), Player Index (0)
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.UpdatePoints) [1965]
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 5; 5 Points
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:24 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.UpdatePoints) [1114]
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 5; 5 Points
(12/20/2023 12:51:24 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:24 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2)
(12/20/2023 12:51:24 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9)
(12/20/2023 12:51:24 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (14), Added; (red 5; 5 Points)
(12/20/2023 12:51:24 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:24 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (4)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (14), Top Card; (red 5; 5 Points)
(12/20/2023 12:51:24 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (4)
Player1 CardCount; (8)
    PlusAmount (0)
    Discard Pile Count; (14), Top Card; (red 5; 5 Points)
(12/20/2023 12:51:29 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:51:29 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (1)
(12/20/2023 12:51:29 PM) |> method; (wildFormClass.wildFormClass)
(12/20/2023 12:51:31 PM) |> method; (wildFormClass.greenBT_Click) [this.Tag = green]
(12/20/2023 12:51:31 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (+4_wild), add, 4
(12/20/2023 12:51:31 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:31 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:31 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:31 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 82), Value; (3)
(12/20/2023 12:51:31 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:31 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:31 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 81), Value; (60)
(12/20/2023 12:51:31 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:31 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:31 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 80), Value; (33)
(12/20/2023 12:51:31 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:31 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:31 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 79), Value; (40)
(12/20/2023 12:51:31 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:31 PM) |> method; (GameLogicClass.AddCards), cards added; (AddCards Index: 1 AddCards Index: 1 AddCards Index: 1 AddCards Index: 1 )
(12/20/2023 12:51:31 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:31 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:31 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +4_wild), Player Index (1)
(12/20/2023 12:51:31 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:31 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:31 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:31 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:31 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:51:31 PM) |> method; (PlayerClass.UpdatePoints) [1998]
(12/20/2023 12:51:31 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:31 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green +4_wild; 50 Points
(12/20/2023 12:51:31 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:31 PM) |> method; (CardClass.SetPBLocation), x, y; (420, 5)
(12/20/2023 12:51:31 PM) |> method; (CardClass.SetPBLocation), x, y; (475, 5)
(12/20/2023 12:51:31 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:51:31 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:31 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:31 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:31 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:31 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:31 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:51:31 PM) |> method; (CardClass.SetPBLocation), x, y; (915, 5)
(12/20/2023 12:51:31 PM) |> method; (CardClass.SetPBLocation), x, y; (970, 5)
(12/20/2023 12:51:31 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (970, 970)
(12/20/2023 12:51:31 PM) |> method; (PlayerClass.UpdatePoints) [1217]
(12/20/2023 12:51:31 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:31 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green +4_wild; 50 Points
(12/20/2023 12:51:31 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:31 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 12:51:31 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7)
(12/20/2023 12:51:31 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (15), Added; (green +4_wild; 50 Points)
(12/20/2023 12:51:31 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:31 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green +4_wild; 50 Points
(12/20/2023 12:51:31 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:51:31 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:51:31 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3
(12/20/2023 12:51:31 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:51:31 PM) |> method; (wildFormClass.wildFormClass)
(12/20/2023 12:51:35 PM) |> method; (wildFormClass.greenBT_Click) [this.Tag = green]
(12/20/2023 12:51:35 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (+4_wild), add, 4
(12/20/2023 12:51:35 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:35 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:35 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:35 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 78), Value; (15)
(12/20/2023 12:51:35 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:35 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:35 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 77), Value; (45)
(12/20/2023 12:51:35 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:35 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:35 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 76), Value; (33)
(12/20/2023 12:51:35 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:35 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:35 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 75), Value; (53)
(12/20/2023 12:51:35 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:35 PM) |> method; (GameLogicClass.AddCards), cards added; (AddCards Index: 0 AddCards Index: 0 AddCards Index: 0 AddCards Index: 0 )
(12/20/2023 12:51:35 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:35 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:35 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +4_wild), Player Index (0)
(12/20/2023 12:51:35 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:51:35 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:51:35 PM) |> method; (PlayerClass.UpdatePoints) [2051]
(12/20/2023 12:51:35 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:35 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green +4_wild; 50 Points
(12/20/2023 12:51:35 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (445, 5)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 5)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 5)
(12/20/2023 12:51:35 PM) |> method; (CardClass.SetPBLocation), x, y; (940, 5)
(12/20/2023 12:51:35 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (940, 940)
(12/20/2023 12:51:35 PM) |> method; (PlayerClass.UpdatePoints) [1270]
(12/20/2023 12:51:35 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:35 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green +4_wild; 50 Points
(12/20/2023 12:51:35 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:35 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1)
(12/20/2023 12:51:35 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0)
(12/20/2023 12:51:35 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (16), Added; (green +4_wild; 50 Points)
(12/20/2023 12:51:35 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:35 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (10)
    PlusAmount (0)
    Discard Pile Count; (16), Top Card; (green +4_wild; 50 Points)
(12/20/2023 12:51:35 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (3)
Player1 CardCount; (11)
    PlusAmount (0)
    Discard Pile Count; (16), Top Card; (green +4_wild; 50 Points)
(12/20/2023 12:51:37 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:51:37 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (2)
(12/20/2023 12:51:37 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (skip), error
(12/20/2023 12:51:37 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:37 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:37 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:37 PM) |> method; (GameLogicClass.CardClickLogic), In skip
(12/20/2023 12:51:37 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:37 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:37 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (0)
(12/20/2023 12:51:37 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:51:37 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:51:37 PM) |> method; (PlayerClass.UpdatePoints) [2084]
(12/20/2023 12:51:37 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:37 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green skip; 20 Points
(12/20/2023 12:51:37 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (445, 5)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 5)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 5)
(12/20/2023 12:51:37 PM) |> method; (CardClass.SetPBLocation), x, y; (940, 5)
(12/20/2023 12:51:37 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (940, 940)
(12/20/2023 12:51:37 PM) |> method; (PlayerClass.UpdatePoints) [1323]
(12/20/2023 12:51:37 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:37 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green skip; 20 Points
(12/20/2023 12:51:37 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:37 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7)
(12/20/2023 12:51:37 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7)
(12/20/2023 12:51:37 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (17), Added; (green skip; 20 Points)
(12/20/2023 12:51:37 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:37 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (10)
    PlusAmount (0)
    Discard Pile Count; (17), Top Card; (green skip; 20 Points)
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (5)
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (5)
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (2), error
(12/20/2023 12:51:38 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 2), Player Index (1)
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.UpdatePoints) [2115]
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 2; 2 Points
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (445, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (940, 5)
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (940, 940)
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.UpdatePoints) [1376]
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 2; 2 Points
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:38 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5)
(12/20/2023 12:51:38 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8)
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (18), Added; (green 2; 2 Points)
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 2; 2 Points
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (7)
(12/20/2023 12:51:38 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 7
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (7)
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (4), error
(12/20/2023 12:51:38 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (7), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (0)
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.UpdatePoints) [2146]
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green 4; 4 Points
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (475, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:51:38 PM) |> method; (CardClass.SetPBLocation), x, y; (915, 5)
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (915, 915)
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.UpdatePoints) [1425]
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 4; 4 Points
(12/20/2023 12:51:38 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:38 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 12:51:38 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2)
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (19), Added; (green 4; 4 Points)
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (5)
Player1 CardCount; (9)
    PlusAmount (0)
    Discard Pile Count; (19), Top Card; (green 4; 4 Points)
(12/20/2023 12:51:38 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (5)
Player1 CardCount; (10)
    PlusAmount (0)
    Discard Pile Count; (19), Top Card; (green 4; 4 Points)
(12/20/2023 12:51:43 PM) |> method; (GameLogicClass.DrawPile_Clicked)
(12/20/2023 12:51:43 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:43 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 74), Value; (49)
(12/20/2023 12:51:43 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:43 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:43 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.UpdatePoints) [2186]
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green 4; 4 Points
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (475, 5)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (915, 5)
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (915, 915)
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.UpdatePoints) [1474]
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 4; 4 Points
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:43 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (19), Added; (Nothing)
(12/20/2023 12:51:43 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 4; 4 Points
(12/20/2023 12:51:43 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (8)
(12/20/2023 12:51:43 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 8
(12/20/2023 12:51:43 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (8)
(12/20/2023 12:51:43 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (4), error
(12/20/2023 12:51:43 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:43 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:43 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:43 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:43 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (8), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (0)
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:43 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:51:43 PM) |> method; (PlayerClass.UpdatePoints) [2226]
(12/20/2023 12:51:44 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:44 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (red 4; 4 Points
(12/20/2023 12:51:44 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:44 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 5)
(12/20/2023 12:51:44 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:51:44 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:44 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:44 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:44 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:44 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:51:44 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 5)
(12/20/2023 12:51:44 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (885, 885)
(12/20/2023 12:51:44 PM) |> method; (PlayerClass.UpdatePoints) [1519]
(12/20/2023 12:51:44 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:44 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 4; 4 Points
(12/20/2023 12:51:44 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:44 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0)
(12/20/2023 12:51:44 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4)
(12/20/2023 12:51:44 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (20), Added; (red 4; 4 Points)
(12/20/2023 12:51:44 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:44 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (8)
    PlusAmount (0)
    Discard Pile Count; (20), Top Card; (red 4; 4 Points)
(12/20/2023 12:51:44 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (9)
    PlusAmount (0)
    Discard Pile Count; (20), Top Card; (red 4; 4 Points)
(12/20/2023 12:51:45 PM) |> method; (GameLogicClass.DrawPile_Clicked)
(12/20/2023 12:51:45 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:45 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 73), Value; (1)
(12/20/2023 12:51:45 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:45 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:45 PM) |> method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one
(12/20/2023 12:51:45 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:45 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:51:45 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:51:45 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:45 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:45 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:45 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:51:45 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.UpdatePoints) [2269]
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 4; 4 Points
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (500, 5)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (885, 5)
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (885, 885)
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.UpdatePoints) [1564]
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 4; 4 Points
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:46 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (20), Added; (Nothing)
(12/20/2023 12:51:46 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 4; 4 Points
(12/20/2023 12:51:46 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:51:46 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (5)
(12/20/2023 12:51:46 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 5
(12/20/2023 12:51:46 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (5)
(12/20/2023 12:51:46 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (0), error
(12/20/2023 12:51:46 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:46 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:46 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:46 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:46 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 0), Player Index (0)
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 765)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 765)
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.UpdatePoints) [2312]
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 0; 0 Points
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:46 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.UpdatePoints) [1609]
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 0; 0 Points
(12/20/2023 12:51:46 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:46 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 12:51:46 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8)
(12/20/2023 12:51:46 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (21), Added; (red 0; 0 Points)
(12/20/2023 12:51:46 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:46 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (21), Top Card; (red 0; 0 Points)
(12/20/2023 12:51:46 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (8)
    PlusAmount (0)
    Discard Pile Count; (21), Top Card; (red 0; 0 Points)
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (6)
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (6)
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (3), error
(12/20/2023 12:51:47 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (6), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 3), Player Index (1)
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.UpdatePoints) [2352]
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (red 3; 3 Points
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.UpdatePoints) [1654]
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 3; 3 Points
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:47 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3)
(12/20/2023 12:51:47 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0)
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (22), Added; (red 3; 3 Points)
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 3; 3 Points
(12/20/2023 12:51:47 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0)
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:51:47 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (3), error
(12/20/2023 12:51:47 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:47 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 3), Player Index (0)
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 765)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 765)
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.UpdatePoints) [2392]
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 3; 3 Points
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:47 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:51:47 PM) |> method; (PlayerClass.UpdatePoints) [1696]
(12/20/2023 12:51:48 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:48 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 3; 3 Points
(12/20/2023 12:51:48 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:48 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3)
(12/20/2023 12:51:48 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5)
(12/20/2023 12:51:48 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (23), Added; (yellow 3; 3 Points)
(12/20/2023 12:51:48 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:48 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (23), Top Card; (yellow 3; 3 Points)
(12/20/2023 12:51:48 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (23), Top Card; (yellow 3; 3 Points)
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (5)
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (5)
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (9), error
(12/20/2023 12:51:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (1)
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.UpdatePoints) [2423]
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9; 9 Points
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.UpdatePoints) [1738]
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9; 9 Points
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:49 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 12:51:49 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4)
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (24), Added; (yellow 9; 9 Points)
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9; 9 Points
(12/20/2023 12:51:49 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:51:49 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (1), error
(12/20/2023 12:51:49 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:49 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (0)
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 765)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 765)
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.UpdatePoints) [2454]
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 1; 1 Points
(12/20/2023 12:51:49 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:49 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:50 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:51:50 PM) |> method; (PlayerClass.UpdatePoints) [1779]
(12/20/2023 12:51:50 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:50 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 1; 1 Points
(12/20/2023 12:51:50 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:50 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8)
(12/20/2023 12:51:50 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8)
(12/20/2023 12:51:50 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (25), Added; (yellow 1; 1 Points)
(12/20/2023 12:51:50 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:50 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (5)
Player1 CardCount; (5)
    PlusAmount (0)
    Discard Pile Count; (25), Top Card; (yellow 1; 1 Points)
(12/20/2023 12:51:50 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (5)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (25), Top Card; (yellow 1; 1 Points)
(12/20/2023 12:51:50 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:51:50 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (2)
(12/20/2023 12:51:50 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (9), error
(12/20/2023 12:51:50 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:50 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:50 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:50 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:50 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (1)
(12/20/2023 12:51:50 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:50 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:50 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:50 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:50 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:50 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:51:50 PM) |> method; (PlayerClass.UpdatePoints) [2476]
(12/20/2023 12:51:50 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:50 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9; 9 Points
(12/20/2023 12:51:50 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:50 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 12:51:50 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:50 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:50 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:50 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 12:51:50 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (805, 805)
(12/20/2023 12:51:50 PM) |> method; (PlayerClass.UpdatePoints) [1820]
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9; 9 Points
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:51 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1)
(12/20/2023 12:51:51 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8)
(12/20/2023 12:51:51 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (26), Added; (yellow 9; 9 Points)
(12/20/2023 12:51:51 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9; 9 Points
(12/20/2023 12:51:51 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:51:51 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1
(12/20/2023 12:51:51 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (1)
(12/20/2023 12:51:51 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (1), error
(12/20/2023 12:51:51 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:51 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:51 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:51 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:51 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (0)
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:51 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:51 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:51 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:51 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.UpdatePoints) [2498]
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 1; 1 Points
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:51 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:51 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:51 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:51 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.UpdatePoints) [1860]
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (yellow 1; 1 Points
(12/20/2023 12:51:51 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:51 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5)
(12/20/2023 12:51:51 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5)
(12/20/2023 12:51:51 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (27), Added; (yellow 1; 1 Points)
(12/20/2023 12:51:51 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:51 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (4)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (27), Top Card; (yellow 1; 1 Points)
(12/20/2023 12:51:51 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (4)
Player1 CardCount; (5)
    PlusAmount (0)
    Discard Pile Count; (27), Top Card; (yellow 1; 1 Points)
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (0)
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (7), error
(12/20/2023 12:51:52 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 7), Player Index (1)
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:52 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:52 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:52 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.UpdatePoints) [2513]
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 7; 7 Points
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:52 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 12:51:52 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:52 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:52 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.UpdatePoints) [1900]
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 7; 7 Points
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 12:51:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0)
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (28), Added; (yellow 7; 7 Points)
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 7; 7 Points
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:51:52 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.CardPlay), c_card; (red) (7), error
(12/20/2023 12:51:52 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 7), Player Index (0)
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:52 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:52 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:52 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.UpdatePoints) [2528]
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 7; 7 Points
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:52 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:52 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:52 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.UpdatePoints) [1933]
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (red 7; 7 Points
(12/20/2023 12:51:52 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2)
(12/20/2023 12:51:52 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6)
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (29), Added; (red 7; 7 Points)
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (3)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (29), Top Card; (red 7; 7 Points)
(12/20/2023 12:51:52 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (3)
Player1 CardCount; (4)
    PlusAmount (0)
    Discard Pile Count; (29), Top Card; (red 7; 7 Points)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (2)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (2)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (7), error
(12/20/2023 12:51:54 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 7), Player Index (1)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:54 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:54 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (720, 720)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.UpdatePoints) [2536]
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 7; 7 Points
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:54 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 12:51:54 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:54 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.UpdatePoints) [1966]
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 7; 7 Points
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:54 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1)
(12/20/2023 12:51:54 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (30), Added; (blue 7; 7 Points)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 7; 7 Points
(12/20/2023 12:51:54 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:54 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (reverse), reverce, True
(12/20/2023 12:51:54 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.CardClickLogic), In skip
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (1)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:54 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:54 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (720, 720)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.UpdatePoints) [2544]
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue reverse; 20 Points
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:54 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 12:51:54 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (720, 720)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.UpdatePoints) [1979]
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue reverse; 20 Points
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:54 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 12:51:54 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (31), Added; (blue reverse; 20 Points)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue reverse; 20 Points
(12/20/2023 12:51:54 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:54 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (+2), add, 2
(12/20/2023 12:51:54 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:54 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 72), Value; (35)
(12/20/2023 12:51:54 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 12:51:54 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 71), Value; (10)
(12/20/2023 12:51:54 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.AddCards), cards added; (AddCards Index: 0 AddCards Index: 0 )
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (0)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:54 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 765)
(12/20/2023 12:51:54 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 765)
(12/20/2023 12:51:54 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 765)
(12/20/2023 12:51:54 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 765)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (775, 775)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.UpdatePoints) [2559]
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue +2; 10 Points
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:54 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (695, 695)
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.UpdatePoints) [1982]
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue +2; 10 Points
(12/20/2023 12:51:54 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:54 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9)
(12/20/2023 12:51:54 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (32), Added; (blue +2; 10 Points)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (4)
Player1 CardCount; (1)
    PlusAmount (0)
    Discard Pile Count; (32), Top Card; (blue +2; 10 Points)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (2)
Player1 CardCount; (2)
    PlusAmount (0)
    Discard Pile Count; (32), Top Card; (blue +2; 10 Points)
(12/20/2023 12:51:54 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (2)
Player1 CardCount; (3)
    PlusAmount (0)
    Discard Pile Count; (32), Top Card; (blue +2; 10 Points)
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (0)
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (6), error
(12/20/2023 12:51:58 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (1)
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:58 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:58 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:58 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.UpdatePoints) [2568]
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue 6; 6 Points
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:58 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (695, 695)
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.UpdatePoints) [1985]
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 6; 6 Points
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 12:51:58 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1)
(12/20/2023 12:51:58 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2)
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (33), Added; (blue 6; 6 Points)
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 6; 6 Points
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:58 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (3), error
(12/20/2023 12:51:58 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 3), Player Index (0)
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 12:51:58 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 765)
(12/20/2023 12:51:58 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 765)
(12/20/2023 12:51:58 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 765)
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (750, 750)
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.UpdatePoints) [2577]
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 12:51:58 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (blue 3; 3 Points
(12/20/2023 12:51:58 PM) |> method; (WinConditonForm.WinConditonForm) ---------------------------------------------------
(12/20/2023 12:51:58 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
Player0 CardCount; (3)
Player1 CardCount; (1)
    PlusAmount (0)
    Discard Pile Count; (34), Top Card; (blue 3; 3 Points)
(12/20/2023 12:52:03 PM) |> method; (GameForm.GameForm_FormClosing)
(12/20/2023 12:52:04 PM) |> method; (Form_PauseMenu.closeBT_Click) [closes here??] ---------------------------------------------------
(12/20/2023 1:02:57 PM) |> ----------------------------------------------
(12/20/2023 1:02:57 PM) |> Method; (SetupFormClass.SetupFormClass) [Start Up]
(12/20/2023 1:02:59 PM) |> method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2]
(12/20/2023 1:03:00 PM) |> method; (SetupFormClass.doneBT_Click)
(12/20/2023 1:03:00 PM) |> method; (Form_PauseMenu.Form_PauseMenu)
(12/20/2023 1:03:00 PM) |> method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870})
(12/20/2023 1:03:00 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1)
(12/20/2023 1:03:00 PM) |> method; (AIClass.AIClass()) [AI INIT]
(12/20/2023 1:03:00 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (2)
(12/20/2023 1:03:00 PM) |> method; (GameLogicClass.MakeDrawPile)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 1:03:00 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:03:01 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (103)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (73)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (61)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (0)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (87)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (90)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (36)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (6)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (61)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (14)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (17)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (9)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (37)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (10)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (69)
(12/20/2023 1:03:01 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.DisplayDrawPile) [drew stuff]
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 2, 3, 4))
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (green 5; 5 Points)
(12/20/2023 1:03:01 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:03:01 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 827)
(12/20/2023 1:03:01 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 827)
(12/20/2023 1:03:01 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 827)
(12/20/2023 1:03:01 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 827)
(12/20/2023 1:03:01 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 827)
(12/20/2023 1:03:01 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 827)
(12/20/2023 1:03:01 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 827)
(12/20/2023 1:03:01 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 1:03:01 PM) |> method; (PlayerClass.UpdatePoints) [100]
(12/20/2023 1:03:01 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 1:03:01 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 5; 5 Points
(12/20/2023 1:03:01 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:03:01 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 1:03:01 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 1:03:01 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 1:03:01 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 1:03:01 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 1:03:01 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 1:03:01 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 1:03:01 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 1:03:01 PM) |> method; (PlayerClass.UpdatePoints) [43]
(12/20/2023 1:03:01 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 1:03:01 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green 5; 5 Points
(12/20/2023 1:03:01 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1)
(12/20/2023 1:03:01 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), Added; (green 5; 5 Points)
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 1:03:01 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (1), Top Card; (green 5; 5 Points)
(12/20/2023 1:03:08 PM) |> method; (GameForm.GameForm_FormClosing)
(12/20/2023 1:03:09 PM) |> method; (Form_PauseMenu.closeBT_Click) [closes here??] ---------------------------------------------------
(12/20/2023 1:03:50 PM) |> ----------------------------------------------
(12/20/2023 1:03:50 PM) |> Method; (SetupFormClass.SetupFormClass) [Start Up]
(12/20/2023 1:03:52 PM) |> method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2]
(12/20/2023 1:03:52 PM) |> method; (SetupFormClass.doneBT_Click)
(12/20/2023 1:03:52 PM) |> method; (Form_PauseMenu.Form_PauseMenu)
(12/20/2023 1:03:52 PM) |> method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870})
(12/20/2023 1:03:52 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1)
(12/20/2023 1:03:52 PM) |> method; (AIClass.AIClass()) [AI INIT]
(12/20/2023 1:03:52 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (2)
(12/20/2023 1:03:52 PM) |> method; (GameLogicClass.MakeDrawPile)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 1:03:52 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:03:53 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (71)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (12)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (61)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (62)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (30)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (12)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (84)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (98)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (67)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (44)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (92)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (38)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (88)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (19)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (76)
(12/20/2023 1:03:53 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.DisplayDrawPile) [drew stuff]
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 2, 3, 4))
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (green reverse; 20 Points)
(12/20/2023 1:03:53 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:03:53 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 740)
(12/20/2023 1:03:53 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 740)
(12/20/2023 1:03:53 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 740)
(12/20/2023 1:03:53 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 740)
(12/20/2023 1:03:53 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 740)
(12/20/2023 1:03:53 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 740)
(12/20/2023 1:03:53 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 740)
(12/20/2023 1:03:53 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 1:03:53 PM) |> method; (PlayerClass.UpdatePoints) [57]
(12/20/2023 1:03:53 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 1:03:53 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green reverse; 20 Points
(12/20/2023 1:03:53 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:03:53 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 1:03:53 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 1:03:53 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 1:03:53 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 1:03:53 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 1:03:53 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 1:03:53 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 1:03:53 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 1:03:53 PM) |> method; (PlayerClass.UpdatePoints) [138]
(12/20/2023 1:03:53 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 1:03:53 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green reverse; 20 Points
(12/20/2023 1:03:53 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3)
(12/20/2023 1:03:53 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), Added; (green reverse; 20 Points)
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 1:03:53 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (1), Top Card; (green reverse; 20 Points)
(12/20/2023 1:03:56 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (4)
(12/20/2023 1:03:56 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (4)
(12/20/2023 1:03:56 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (5), error
(12/20/2023 1:03:56 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:03:56 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 1:03:56 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 1:03:56 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 1:03:56 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 5), Player Index (1)
(12/20/2023 1:03:56 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:03:56 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 740)
(12/20/2023 1:03:56 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 740)
(12/20/2023 1:03:56 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 740)
(12/20/2023 1:03:56 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 740)
(12/20/2023 1:03:56 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 740)
(12/20/2023 1:03:56 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 740)
(12/20/2023 1:03:56 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 1:03:56 PM) |> method; (PlayerClass.UpdatePoints) [109]
(12/20/2023 1:03:56 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 1:03:56 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green 5; 5 Points
(12/20/2023 1:03:56 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:03:56 PM) |> method; (CardClass.SetPBLocation), x, y; (530, 5)
(12/20/2023 1:03:56 PM) |> method; (CardClass.SetPBLocation), x, y; (585, 5)
(12/20/2023 1:03:56 PM) |> method; (CardClass.SetPBLocation), x, y; (640, 5)
(12/20/2023 1:03:56 PM) |> method; (CardClass.SetPBLocation), x, y; (695, 5)
(12/20/2023 1:03:56 PM) |> method; (CardClass.SetPBLocation), x, y; (750, 5)
(12/20/2023 1:03:56 PM) |> method; (CardClass.SetPBLocation), x, y; (805, 5)
(12/20/2023 1:03:56 PM) |> method; (CardClass.SetPBLocation), x, y; (860, 5)
(12/20/2023 1:03:56 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (860, 860)
(12/20/2023 1:03:56 PM) |> method; (PlayerClass.UpdatePoints) [276]
(12/20/2023 1:03:56 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 1:03:56 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 5; 5 Points
(12/20/2023 1:03:56 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 1:03:56 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7)
(12/20/2023 1:03:56 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 1:03:56 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), Added; (green 5; 5 Points)
(12/20/2023 1:03:56 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 1:03:56 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 5; 5 Points
(12/20/2023 1:03:56 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 1:03:56 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 1:03:56 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0
(12/20/2023 1:03:56 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (0)
(12/20/2023 1:03:56 PM) |> method; (wildFormClass.wildFormClass)
(12/20/2023 1:04:03 PM) |> method; (wildFormClass.greenBT_Click) [this.Tag = green]
(12/20/2023 1:04:03 PM) |> method; (GameLogicClass.CardPlay), c_card; (green) (wild), wild, green
(12/20/2023 1:04:03 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:04:03 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 1:04:03 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 1:04:03 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 1:04:03 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, wild), Player Index (0)
(12/20/2023 1:04:03 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:04:03 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 740)
(12/20/2023 1:04:03 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 740)
(12/20/2023 1:04:03 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 740)
(12/20/2023 1:04:03 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 740)
(12/20/2023 1:04:03 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 740)
(12/20/2023 1:04:03 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 740)
(12/20/2023 1:04:03 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 1:04:03 PM) |> method; (PlayerClass.UpdatePoints) [161]
(12/20/2023 1:04:03 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 1:04:03 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (), Top deck (green wild; 40 Points
(12/20/2023 1:04:03 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:04:03 PM) |> method; (CardClass.SetPBLocation), x, y; (555, 5)
(12/20/2023 1:04:03 PM) |> method; (CardClass.SetPBLocation), x, y; (610, 5)
(12/20/2023 1:04:03 PM) |> method; (CardClass.SetPBLocation), x, y; (665, 5)
(12/20/2023 1:04:03 PM) |> method; (CardClass.SetPBLocation), x, y; (720, 5)
(12/20/2023 1:04:03 PM) |> method; (CardClass.SetPBLocation), x, y; (775, 5)
(12/20/2023 1:04:03 PM) |> method; (CardClass.SetPBLocation), x, y; (830, 5)
(12/20/2023 1:04:03 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (830, 830)
(12/20/2023 1:04:03 PM) |> method; (PlayerClass.UpdatePoints) [374]
(12/20/2023 1:04:03 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 1:04:03 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green wild; 40 Points
(12/20/2023 1:04:03 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 1:04:03 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 1:04:03 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6)
(12/20/2023 1:04:03 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), Added; (green wild; 40 Points)
(12/20/2023 1:04:03 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 1:04:03 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (3), Top Card; (green wild; 40 Points)
(12/20/2023 1:04:03 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (3), Top Card; (green wild; 40 Points)
(12/20/2023 1:04:05 PM) |> method; (GameForm.GameForm_FormClosing)
(12/20/2023 1:04:06 PM) |> method; (Form_PauseMenu.closeBT_Click) [closes here??] ---------------------------------------------------
(12/20/2023 1:12:35 PM) |> ----------------------------------------------
(12/20/2023 1:12:35 PM) |> Method; (SetupFormClass.SetupFormClass) [Start Up]
(12/20/2023 1:12:38 PM) |> method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2]
(12/20/2023 1:12:39 PM) |> method; (SetupFormClass.doneBT_Click)
(12/20/2023 1:12:39 PM) |> method; (Form_PauseMenu.Form_PauseMenu)
(12/20/2023 1:12:39 PM) |> method; (GameForm.GameForm), Width: (2194), Height; (1205), Size; ({Width=2194, Height=1205})
(12/20/2023 1:12:39 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1)
(12/20/2023 1:12:39 PM) |> method; (AIClass.AIClass()) [AI INIT]
(12/20/2023 1:12:39 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (2)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.MakeDrawPile)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_0.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_0.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_0.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_0.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:12:39 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (67)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (101)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (0)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (89)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (82)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (91)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (16)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (84)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (83)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (9)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (1)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (75)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (28)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (88)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (65)
(12/20/2023 1:12:39 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.DisplayDrawPile) [drew stuff]
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 2, 3, 4))
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (yellow 8; 8 Points)
(12/20/2023 1:12:39 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:12:39 PM) |> method; (CardClass.SetPBLocation), x, y; (907, 1025)
(12/20/2023 1:12:39 PM) |> method; (CardClass.SetPBLocation), x, y; (962, 1025)
(12/20/2023 1:12:39 PM) |> method; (CardClass.SetPBLocation), x, y; (1017, 1025)
(12/20/2023 1:12:39 PM) |> method; (CardClass.SetPBLocation), x, y; (1072, 1025)
(12/20/2023 1:12:39 PM) |> method; (CardClass.SetPBLocation), x, y; (1127, 1025)
(12/20/2023 1:12:39 PM) |> method; (CardClass.SetPBLocation), x, y; (1182, 1025)
(12/20/2023 1:12:39 PM) |> method; (CardClass.SetPBLocation), x, y; (1237, 1025)
(12/20/2023 1:12:39 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (1237, 1237)
(12/20/2023 1:12:39 PM) |> method; (PlayerClass.UpdatePoints) [79]
(12/20/2023 1:12:39 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 1:12:39 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 8; 8 Points
(12/20/2023 1:12:39 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:12:39 PM) |> method; (CardClass.SetPBLocation), x, y; (907, 5)
(12/20/2023 1:12:39 PM) |> method; (CardClass.SetPBLocation), x, y; (962, 5)
(12/20/2023 1:12:39 PM) |> method; (CardClass.SetPBLocation), x, y; (1017, 5)
(12/20/2023 1:12:39 PM) |> method; (CardClass.SetPBLocation), x, y; (1072, 5)
(12/20/2023 1:12:39 PM) |> method; (CardClass.SetPBLocation), x, y; (1127, 5)
(12/20/2023 1:12:39 PM) |> method; (CardClass.SetPBLocation), x, y; (1182, 5)
(12/20/2023 1:12:39 PM) |> method; (CardClass.SetPBLocation), x, y; (1237, 5)
(12/20/2023 1:12:39 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (1237, 1237)
(12/20/2023 1:12:39 PM) |> method; (PlayerClass.UpdatePoints) [94]
(12/20/2023 1:12:39 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 1:12:39 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 8; 8 Points
(12/20/2023 1:12:39 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4)
(12/20/2023 1:12:39 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), Added; (yellow 8; 8 Points)
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 1:12:39 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (1), Top Card; (yellow 8; 8 Points)
(12/20/2023 1:13:02 PM) |> ----------------------------------------------
(12/20/2023 1:13:02 PM) |> Method; (SetupFormClass.SetupFormClass) [Start Up]
(12/20/2023 1:13:03 PM) |> method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2]
(12/20/2023 1:13:04 PM) |> method; (SetupFormClass.doneBT_Click)
(12/20/2023 1:13:04 PM) |> method; (Form_PauseMenu.Form_PauseMenu)
(12/20/2023 1:13:04 PM) |> method; (GameForm.GameForm), Width: (2194), Height; (1205), Size; ({Width=2194, Height=1205})
(12/20/2023 1:13:04 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1)
(12/20/2023 1:13:04 PM) |> method; (AIClass.AIClass()) [AI INIT]
(12/20/2023 1:13:04 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (2)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.MakeDrawPile)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_0.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_0.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_0.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_0.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:13:04 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (53)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (82)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (38)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (50)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (31)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (24)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (31)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (83)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (65)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (87)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (76)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (5)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (23)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (58)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (35)
(12/20/2023 1:13:04 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.DisplayDrawPile) [drew stuff]
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 2, 3, 4))
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (blue 2; 2 Points)
(12/20/2023 1:13:04 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:13:04 PM) |> method; (CardClass.SetPBLocation), x, y; (907, 1085)
(12/20/2023 1:13:04 PM) |> method; (CardClass.SetPBLocation), x, y; (962, 1085)
(12/20/2023 1:13:04 PM) |> method; (CardClass.SetPBLocation), x, y; (1017, 1085)
(12/20/2023 1:13:04 PM) |> method; (CardClass.SetPBLocation), x, y; (1072, 1085)
(12/20/2023 1:13:04 PM) |> method; (CardClass.SetPBLocation), x, y; (1127, 1085)
(12/20/2023 1:13:04 PM) |> method; (CardClass.SetPBLocation), x, y; (1182, 1085)
(12/20/2023 1:13:04 PM) |> method; (CardClass.SetPBLocation), x, y; (1237, 1085)
(12/20/2023 1:13:04 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (1237, 1237)
(12/20/2023 1:13:04 PM) |> method; (PlayerClass.UpdatePoints) [82]
(12/20/2023 1:13:04 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 1:13:04 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 2; 2 Points
(12/20/2023 1:13:04 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:13:04 PM) |> method; (CardClass.SetPBLocation), x, y; (907, 5)
(12/20/2023 1:13:04 PM) |> method; (CardClass.SetPBLocation), x, y; (962, 5)
(12/20/2023 1:13:04 PM) |> method; (CardClass.SetPBLocation), x, y; (1017, 5)
(12/20/2023 1:13:04 PM) |> method; (CardClass.SetPBLocation), x, y; (1072, 5)
(12/20/2023 1:13:04 PM) |> method; (CardClass.SetPBLocation), x, y; (1127, 5)
(12/20/2023 1:13:04 PM) |> method; (CardClass.SetPBLocation), x, y; (1182, 5)
(12/20/2023 1:13:04 PM) |> method; (CardClass.SetPBLocation), x, y; (1237, 5)
(12/20/2023 1:13:04 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (1237, 1237)
(12/20/2023 1:13:04 PM) |> method; (PlayerClass.UpdatePoints) [57]
(12/20/2023 1:13:04 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 1:13:04 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 2; 2 Points
(12/20/2023 1:13:04 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1)
(12/20/2023 1:13:04 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), Added; (blue 2; 2 Points)
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 1:13:04 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (1), Top Card; (blue 2; 2 Points)
(12/20/2023 1:13:07 PM) |> method; (GameForm.GameForm_FormClosing)
(12/20/2023 1:13:08 PM) |> method; (Form_PauseMenu.closeBT_Click) [closes here??] ---------------------------------------------------
(12/20/2023 1:13:19 PM) |> ----------------------------------------------
(12/20/2023 1:13:19 PM) |> Method; (SetupFormClass.SetupFormClass) [Start Up]
(12/20/2023 1:13:20 PM) |> method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2]
(12/20/2023 1:13:21 PM) |> method; (SetupFormClass.doneBT_Click)
(12/20/2023 1:13:21 PM) |> method; (Form_PauseMenu.Form_PauseMenu)
(12/20/2023 1:13:21 PM) |> method; (GameForm.GameForm), Width: (2194), Height; (1205), Size; ({Width=2194, Height=1205})
(12/20/2023 1:13:21 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1)
(12/20/2023 1:13:21 PM) |> method; (AIClass.AIClass()) [AI INIT]
(12/20/2023 1:13:21 PM) |> method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (2)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.MakeDrawPile)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_0.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_0.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_0.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_0.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_1.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_3.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_4.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_5.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_6.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_7.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_8.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_9.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_+2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_reverse.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\red_skip.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_1.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_3.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_4.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_5.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_6.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_7.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_8.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_9.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_+2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_reverse.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\yellow_skip.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_1.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_3.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_4.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_5.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_6.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_7.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_8.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_9.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_+2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_reverse.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\green_skip.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_1.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_3.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_4.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_5.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_6.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_7.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_8.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_9.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_+2.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_reverse.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\blue_skip.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_+4_wild.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:13:21 PM) |> method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (G:\githubstuff\uno\bin\Debug\\small\\wild_wild.png)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (47)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (104)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (19)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (25)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (64)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (78)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (62)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.Deal)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (42)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (86)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (38)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (95)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (33)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (53)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (68)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.CardClass)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (14)
(12/20/2023 1:13:21 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.DisplayDrawPile) [drew stuff]
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 2, 3, 4))
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (yellow 1; 1 Points)
(12/20/2023 1:13:21 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:13:21 PM) |> method; (CardClass.SetPBLocation), x, y; (907, 1055)
(12/20/2023 1:13:21 PM) |> method; (CardClass.SetPBLocation), x, y; (962, 1055)
(12/20/2023 1:13:21 PM) |> method; (CardClass.SetPBLocation), x, y; (1017, 1055)
(12/20/2023 1:13:21 PM) |> method; (CardClass.SetPBLocation), x, y; (1072, 1055)
(12/20/2023 1:13:21 PM) |> method; (CardClass.SetPBLocation), x, y; (1127, 1055)
(12/20/2023 1:13:21 PM) |> method; (CardClass.SetPBLocation), x, y; (1182, 1055)
(12/20/2023 1:13:21 PM) |> method; (CardClass.SetPBLocation), x, y; (1237, 1055)
(12/20/2023 1:13:21 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (1237, 1237)
(12/20/2023 1:13:21 PM) |> method; (PlayerClass.UpdatePoints) [67]
(12/20/2023 1:13:21 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 1:13:21 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 1; 1 Points
(12/20/2023 1:13:21 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:13:21 PM) |> method; (CardClass.SetPBLocation), x, y; (907, 5)
(12/20/2023 1:13:21 PM) |> method; (CardClass.SetPBLocation), x, y; (962, 5)
(12/20/2023 1:13:21 PM) |> method; (CardClass.SetPBLocation), x, y; (1017, 5)
(12/20/2023 1:13:21 PM) |> method; (CardClass.SetPBLocation), x, y; (1072, 5)
(12/20/2023 1:13:21 PM) |> method; (CardClass.SetPBLocation), x, y; (1127, 5)
(12/20/2023 1:13:21 PM) |> method; (CardClass.SetPBLocation), x, y; (1182, 5)
(12/20/2023 1:13:21 PM) |> method; (CardClass.SetPBLocation), x, y; (1237, 5)
(12/20/2023 1:13:21 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (1237, 1237)
(12/20/2023 1:13:21 PM) |> method; (PlayerClass.UpdatePoints) [71]
(12/20/2023 1:13:21 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 1:13:21 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 1; 1 Points
(12/20/2023 1:13:21 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3)
(12/20/2023 1:13:21 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), Added; (yellow 1; 1 Points)
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 1:13:21 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (7)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (1), Top Card; (yellow 1; 1 Points)
(12/20/2023 1:13:23 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (6)
(12/20/2023 1:13:23 PM) |> method; (GameLogicClass.cardPB_Click), Card Index (6)
(12/20/2023 1:13:23 PM) |> method; (GameLogicClass.CardPlay), c_card; (yellow) (2), error
(12/20/2023 1:13:23 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:23 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 1:13:23 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 1:13:23 PM) |> method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1
(12/20/2023 1:13:23 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (6), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 2), Player Index (1)
(12/20/2023 1:13:23 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:13:23 PM) |> method; (CardClass.SetPBLocation), x, y; (932, 1055)
(12/20/2023 1:13:23 PM) |> method; (CardClass.SetPBLocation), x, y; (987, 1055)
(12/20/2023 1:13:23 PM) |> method; (CardClass.SetPBLocation), x, y; (1042, 1055)
(12/20/2023 1:13:23 PM) |> method; (CardClass.SetPBLocation), x, y; (1097, 1055)
(12/20/2023 1:13:23 PM) |> method; (CardClass.SetPBLocation), x, y; (1152, 1055)
(12/20/2023 1:13:23 PM) |> method; (CardClass.SetPBLocation), x, y; (1207, 1055)
(12/20/2023 1:13:23 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (1207, 1207)
(12/20/2023 1:13:23 PM) |> method; (PlayerClass.UpdatePoints) [132]
(12/20/2023 1:13:23 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 1:13:23 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 2; 2 Points
(12/20/2023 1:13:23 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:13:23 PM) |> method; (CardClass.SetPBLocation), x, y; (907, 5)
(12/20/2023 1:13:23 PM) |> method; (CardClass.SetPBLocation), x, y; (962, 5)
(12/20/2023 1:13:23 PM) |> method; (CardClass.SetPBLocation), x, y; (1017, 5)
(12/20/2023 1:13:23 PM) |> method; (CardClass.SetPBLocation), x, y; (1072, 5)
(12/20/2023 1:13:23 PM) |> method; (CardClass.SetPBLocation), x, y; (1127, 5)
(12/20/2023 1:13:23 PM) |> method; (CardClass.SetPBLocation), x, y; (1182, 5)
(12/20/2023 1:13:23 PM) |> method; (CardClass.SetPBLocation), x, y; (1237, 5)
(12/20/2023 1:13:23 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (1237, 1237)
(12/20/2023 1:13:23 PM) |> method; (PlayerClass.UpdatePoints) [142]
(12/20/2023 1:13:23 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 1:13:23 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 2; 2 Points
(12/20/2023 1:13:23 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 1:13:23 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7)
(12/20/2023 1:13:23 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7)
(12/20/2023 1:13:23 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), Added; (yellow 2; 2 Points)
(12/20/2023 1:13:23 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 1:13:23 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 2; 2 Points
(12/20/2023 1:13:23 PM) |> method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0)
(12/20/2023 1:13:23 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 1:13:23 PM) |> method; (AIClass.Play()) [AI Play], Current player team; (2), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3
(12/20/2023 1:13:23 PM) |> method; (GameLogicClass.FindPictureInList), Card Index; (3)
(12/20/2023 1:13:23 PM) |> method; (wildFormClass.wildFormClass)
(12/20/2023 1:13:28 PM) |> method; (wildFormClass.blueBT_Click) [this.Tag = blue]
(12/20/2023 1:13:28 PM) |> method; (GameLogicClass.CardPlay), c_card; (blue) (wild), wild, blue
(12/20/2023 1:13:28 PM) |> method; (Extensions.pop), Thing Popped; (uno.CardClass)
(12/20/2023 1:13:28 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 1:13:28 PM) |> method; (GameLogicClass.AddLogic)
(12/20/2023 1:13:28 PM) |> method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0
(12/20/2023 1:13:28 PM) |> method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, wild), Player Index (0)
(12/20/2023 1:13:28 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:13:28 PM) |> method; (CardClass.SetPBLocation), x, y; (932, 1055)
(12/20/2023 1:13:28 PM) |> method; (CardClass.SetPBLocation), x, y; (987, 1055)
(12/20/2023 1:13:28 PM) |> method; (CardClass.SetPBLocation), x, y; (1042, 1055)
(12/20/2023 1:13:28 PM) |> method; (CardClass.SetPBLocation), x, y; (1097, 1055)
(12/20/2023 1:13:28 PM) |> method; (CardClass.SetPBLocation), x, y; (1152, 1055)
(12/20/2023 1:13:28 PM) |> method; (CardClass.SetPBLocation), x, y; (1207, 1055)
(12/20/2023 1:13:28 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (1207, 1207)
(12/20/2023 1:13:28 PM) |> method; (PlayerClass.UpdatePoints) [197]
(12/20/2023 1:13:28 PM) |> method; (PlayerClass.DrawCards) [Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Remove Same, Player.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw SamePlayer.Team == 1; Draw Same]
(12/20/2023 1:13:28 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue wild; 40 Points
(12/20/2023 1:13:28 PM) |> method; (PlayerClass.DeactivateClick)
(12/20/2023 1:13:28 PM) |> method; (CardClass.SetPBLocation), x, y; (932, 5)
(12/20/2023 1:13:28 PM) |> method; (CardClass.SetPBLocation), x, y; (987, 5)
(12/20/2023 1:13:28 PM) |> method; (CardClass.SetPBLocation), x, y; (1042, 5)
(12/20/2023 1:13:28 PM) |> method; (CardClass.SetPBLocation), x, y; (1097, 5)
(12/20/2023 1:13:28 PM) |> method; (CardClass.SetPBLocation), x, y; (1152, 5)
(12/20/2023 1:13:28 PM) |> method; (CardClass.SetPBLocation), x, y; (1207, 5)
(12/20/2023 1:13:28 PM) |> method; (PlayerClass.FindCardPosition), Positions x,y (1207, 1207)
(12/20/2023 1:13:28 PM) |> method; (PlayerClass.UpdatePoints) [173]
(12/20/2023 1:13:28 PM) |> method; (PlayerClass.DrawCards) [Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 && !Game.GameRules["do_Flip"]; Remove Back, Player.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw BackPlayer.Team (2) != 1 &&! Game.GameRules["do_Flip"]; Draw Back]
(12/20/2023 1:13:28 PM) |> method; (PlayerClass.EligableCards) [find e_Hand], eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue wild; 40 Points
(12/20/2023 1:13:28 PM) |> method; (PlayerClass.ActivateClick)
(12/20/2023 1:13:28 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0)
(12/20/2023 1:13:28 PM) |> method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9)
(12/20/2023 1:13:28 PM) |> method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), Added; (blue wild; 40 Points)
(12/20/2023 1:13:28 PM) |> method; (GameLogicClass.DisplayDrawPile) [nothing to do]
(12/20/2023 1:13:28 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (6)
    PlusAmount (0)
    Discard Pile Count; (3), Top Card; (blue wild; 40 Points)
(12/20/2023 1:13:28 PM) |> method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
Player0 CardCount; (6)
Player1 CardCount; (7)
    PlusAmount (0)
    Discard Pile Count; (3), Top Card; (blue wild; 40 Points)
(12/20/2023 1:13:28 PM) |> method; (GameForm.GameForm_FormClosing)
(12/20/2023 1:13:29 PM) |> method; (Form_PauseMenu.closeBT_Click) [closes here??] ---------------------------------------------------
