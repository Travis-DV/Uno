Line final;  |> (8/28/2023 12:34:51 AM)
---------------------------------------------- |> (8/28/2023 12:34:51 AM)
Method; (SetupFormClass.SetupFormClass) [Start Up] |> (8/28/2023 12:34:51 AM)
method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2] |> (8/28/2023 12:34:54 AM)
method; (SetupFormClass.doneBT_Click) |> (8/28/2023 12:34:56 AM)
method; (Form_PauseMenu.Form_PauseMenu) |> (8/28/2023 12:34:56 AM)
method; (GameForm.GameForm), Width: (1920), Height; (1050), Size; ({Width=1920, Height=1050}) |> (8/28/2023 12:34:56 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1) |> (8/28/2023 12:34:56 AM)
method; (AIClass.AIClass()) [AI INIT] |> (8/28/2023 12:34:56 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (1) |> (8/28/2023 12:34:56 AM)
method; (GameLogicClass.MakeDrawPile) |> (8/28/2023 12:34:56 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (8/28/2023 12:34:57 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.Deal) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (24) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (85) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (93) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (94) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (22) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (40) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (87) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.Deal) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (98) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (73) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (0) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (68) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (82) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (81) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (66) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (77) |> (8/28/2023 12:34:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.DisplayDrawPile) [drew stuff] |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 1, 3, 4)
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (uno.CardClass) |> (8/28/2023 12:34:57 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:34:57 AM)
method; (CardClass.SetPBLocation), x, y; (770, 945) |> (8/28/2023 12:34:57 AM)
method; (CardClass.SetPBLocation), x, y; (825, 945) |> (8/28/2023 12:34:57 AM)
method; (CardClass.SetPBLocation), x, y; (880, 945) |> (8/28/2023 12:34:57 AM)
method; (CardClass.SetPBLocation), x, y; (935, 945) |> (8/28/2023 12:34:57 AM)
method; (CardClass.SetPBLocation), x, y; (990, 945) |> (8/28/2023 12:34:57 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 945) |> (8/28/2023 12:34:57 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 945) |> (8/28/2023 12:34:57 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/28/2023 12:34:57 AM)
method; (PlayerClass.UpdatePoints) [74] |> (8/28/2023 12:34:57 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:34:57 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 9) |> (8/28/2023 12:34:57 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:34:57 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 12:34:57 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 12:34:57 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 12:34:57 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 12:34:57 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 12:34:57 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 12:34:57 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 12:34:57 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/28/2023 12:34:57 AM)
method; (PlayerClass.UpdatePoints) [60] |> (8/28/2023 12:34:57 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:34:57 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 9) |> (8/28/2023 12:34:57 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 12:34:57 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), i list; (0 ) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    
    PlusAmount (0)
Discard Pile Count; (1), Top Card; (green, 9) |> (8/28/2023 12:34:57 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/28/2023 12:35:01 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/28/2023 12:35:01 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (reverse), reverce, True |> (8/28/2023 12:35:01 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:35:01 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (8/28/2023 12:35:01 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 12:35:01 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (8/28/2023 12:35:01 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (1) |> (8/28/2023 12:35:01 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:01 AM)
method; (CardClass.SetPBLocation), x, y; (795, 945) |> (8/28/2023 12:35:01 AM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/28/2023 12:35:01 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 12:35:01 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 12:35:01 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/28/2023 12:35:01 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 945) |> (8/28/2023 12:35:01 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1070, 1070) |> (8/28/2023 12:35:01 AM)
method; (PlayerClass.UpdatePoints) [128] |> (8/28/2023 12:35:01 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:01 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green reverse) |> (8/28/2023 12:35:01 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:01 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 12:35:01 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 12:35:01 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 12:35:01 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 12:35:01 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 12:35:01 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 12:35:01 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 12:35:01 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/28/2023 12:35:01 AM)
method; (PlayerClass.UpdatePoints) [120] |> (8/28/2023 12:35:01 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:01 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green reverse) |> (8/28/2023 12:35:01 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 12:35:01 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/28/2023 12:35:01 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/28/2023 12:35:01 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 12:35:01 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 12:35:01 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), i list; (1 0 ) |> (8/28/2023 12:35:01 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 12:35:01 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green reverse) |> (8/28/2023 12:35:01 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (8/28/2023 12:35:01 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (8/28/2023 12:35:01 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (8/28/2023 12:35:01 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (8/28/2023 12:35:01 AM)
method; (wildFormClass.wildFormClass) |> (8/28/2023 12:35:01 AM)
method; (wildFormClass.blueBT_Click) [this.Tag = blue] |> (8/28/2023 12:35:04 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (wild), wild, blue |> (8/28/2023 12:35:04 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:35:04 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 12:35:04 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 12:35:04 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 12:35:04 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, wild), Player Index (0) |> (8/28/2023 12:35:04 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:04 AM)
method; (CardClass.SetPBLocation), x, y; (795, 945) |> (8/28/2023 12:35:04 AM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/28/2023 12:35:04 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 12:35:04 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 12:35:04 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/28/2023 12:35:04 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 945) |> (8/28/2023 12:35:04 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1070, 1070) |> (8/28/2023 12:35:04 AM)
method; (PlayerClass.UpdatePoints) [182] |> (8/28/2023 12:35:04 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:04 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue wild) |> (8/28/2023 12:35:04 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:04 AM)
method; (CardClass.SetPBLocation), x, y; (795, 5) |> (8/28/2023 12:35:04 AM)
method; (CardClass.SetPBLocation), x, y; (850, 5) |> (8/28/2023 12:35:04 AM)
method; (CardClass.SetPBLocation), x, y; (905, 5) |> (8/28/2023 12:35:04 AM)
method; (CardClass.SetPBLocation), x, y; (960, 5) |> (8/28/2023 12:35:04 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 5) |> (8/28/2023 12:35:04 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 5) |> (8/28/2023 12:35:04 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1070, 1070) |> (8/28/2023 12:35:04 AM)
method; (PlayerClass.UpdatePoints) [140] |> (8/28/2023 12:35:04 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:04 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue wild) |> (8/28/2023 12:35:04 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 12:35:04 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 12:35:04 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 12:35:04 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 12:35:04 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 12:35:04 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/28/2023 12:35:04 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/28/2023 12:35:04 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), i list; (2 1 0 ) |> (8/28/2023 12:35:04 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 12:35:04 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    
    PlusAmount (0)
Discard Pile Count; (3), Top Card; (blue, wild) |> (8/28/2023 12:35:04 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    
    PlusAmount (0)
Discard Pile Count; (3), Top Card; (blue, wild) |> (8/28/2023 12:35:04 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (+2), add, 2 |> (8/28/2023 12:35:05 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 92), Value; (52) |> (8/28/2023 12:35:05 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 91), Value; (9) |> (8/28/2023 12:35:05 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.AddCards), cards added; (AddCards Index: 1 AddCards Index: 1 ) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (1) |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (825, 945) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (880, 945) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (935, 945) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (990, 945) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 945) |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1045, 1045) |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.UpdatePoints) [226] |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue +2) |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (740, 5) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (795, 5) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (850, 5) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (905, 5) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (960, 5) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 5) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 5) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (1125, 5) |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1125, 1125) |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.UpdatePoints) [175] |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue +2) |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), i list; (3 2 1 0 ) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue +2) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (8/28/2023 12:35:05 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3 |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (2), error |> (8/28/2023 12:35:05 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 2), Player Index (0) |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (825, 945) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (880, 945) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (935, 945) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (990, 945) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 945) |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1045, 1045) |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.UpdatePoints) [270] |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 2) |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 12:35:05 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.UpdatePoints) [208] |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 2) |> (8/28/2023 12:35:05 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/28/2023 12:35:05 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (5), i list; (4 3 2 1 0 ) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    
    PlusAmount (0)
Discard Pile Count; (5), Top Card; (blue, 2) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    
    PlusAmount (0)
Discard Pile Count; (5), Top Card; (blue, 2) |> (8/28/2023 12:35:05 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/28/2023 12:35:06 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/28/2023 12:35:06 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (8), error |> (8/28/2023 12:35:06 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:35:06 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (8/28/2023 12:35:06 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 12:35:06 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (8/28/2023 12:35:06 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (1) |> (8/28/2023 12:35:06 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:06 AM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/28/2023 12:35:06 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 12:35:06 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 12:35:06 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/28/2023 12:35:06 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1015, 1015) |> (8/28/2023 12:35:06 AM)
method; (PlayerClass.UpdatePoints) [306] |> (8/28/2023 12:35:06 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:06 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 8) |> (8/28/2023 12:35:06 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:06 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 12:35:06 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 12:35:06 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 12:35:06 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 12:35:06 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 12:35:06 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 12:35:06 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 12:35:06 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.UpdatePoints) [241] |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 8) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (6), i list; (5 4 3 2 1 0 ) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 8) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (8/28/2023 12:35:07 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 3 |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (1), error |> (8/28/2023 12:35:07 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (0) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (850, 945) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 945) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1015, 1015) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.UpdatePoints) [342] |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 1) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (795, 5) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (850, 5) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (905, 5) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (960, 5) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 5) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 5) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1070, 1070) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.UpdatePoints) [273] |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 1) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (7), i list; (6 5 4 3 2 1 0 ) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    
    PlusAmount (0)
Discard Pile Count; (7), Top Card; (blue, 1) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    
    PlusAmount (0)
Discard Pile Count; (7), Top Card; (blue, 1) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (3), error |> (8/28/2023 12:35:07 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 3), Player Index (1) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (880, 945) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (935, 945) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (990, 945) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (990, 990) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.UpdatePoints) [375] |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 3) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (795, 5) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (850, 5) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (905, 5) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (960, 5) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 5) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 5) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1070, 1070) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.UpdatePoints) [305] |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (blue 3) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), i list; (7 6 5 4 3 2 1 0 ) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (blue 3) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.CardClass) |> (8/28/2023 12:35:07 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 90), Value; (40) |> (8/28/2023 12:35:07 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 12:35:07 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (880, 945) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (935, 945) |> (8/28/2023 12:35:07 AM)
method; (CardClass.SetPBLocation), x, y; (990, 945) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (990, 990) |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.UpdatePoints) [408] |> (8/28/2023 12:35:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 3) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.UpdatePoints) [343] |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 3) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), i list; (7 6 5 4 3 2 1 0 ) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    
    PlusAmount (0)
Discard Pile Count; (8), Top Card; (blue, 3) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    
    PlusAmount (0)
Discard Pile Count; (8), Top Card; (blue, 3) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (4), error |> (8/28/2023 12:35:08 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (1) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (960, 960) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.UpdatePoints) [437] |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (blue 4) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (770, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (825, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (880, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (935, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (990, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (1045, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (1100, 5) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1100, 1100) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.UpdatePoints) [381] |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), i list; (8 7 6 5 4 3 2 1 0 ) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (6) |> (8/28/2023 12:35:08 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 6 |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (6) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (6), error |> (8/28/2023 12:35:08 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.AddLogic) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (6), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (0) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (905, 945) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (960, 945) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (960, 960) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.UpdatePoints) [466] |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (blue 6) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.DeactivateClick) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (795, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (850, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (905, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (960, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (1015, 5) |> (8/28/2023 12:35:08 AM)
method; (CardClass.SetPBLocation), x, y; (1070, 5) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (1070, 1070) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.UpdatePoints) [413] |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (blue 6) |> (8/28/2023 12:35:08 AM)
method; (PlayerClass.ActivateClick) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (8/28/2023 12:35:08 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (10), i list; (9 8 7 6 5 4 3 2 1 ) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    
    PlusAmount (0)
Discard Pile Count; (10), Top Card; (blue, 6) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    
    PlusAmount (0)
Discard Pile Count; (10), Top Card; (blue, 6) |> (8/28/2023 12:35:08 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/28/2023 12:35:11 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/28/2023 12:35:11 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (8/28/2023 12:35:13 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (8/28/2023 12:35:13 AM)

