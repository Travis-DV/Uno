Line final;  |> (11/23/2023 12:51:41 AM)
---------------------------------------------- |> (11/23/2023 12:51:41 AM)
Method; (SetupFormClass.SetupFormClass) [Start Up] |> (11/23/2023 12:51:41 AM)
method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2] |> (11/23/2023 12:51:44 AM)
method; (SetupFormClass.doneBT_Click) |> (11/23/2023 12:51:48 AM)
method; (Form_PauseMenu.Form_PauseMenu) |> (11/23/2023 12:51:48 AM)
method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870}) |> (11/23/2023 12:51:48 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1) |> (11/23/2023 12:51:48 AM)
method; (AIClass.AIClass()) [AI INIT] |> (11/23/2023 12:51:48 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (1) |> (11/23/2023 12:51:48 AM)
method; (GameLogicClass.MakeDrawPile) |> (11/23/2023 12:51:48 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png) |> (11/23/2023 12:51:48 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (11/23/2023 12:51:48 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (11/23/2023 12:51:48 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (11/23/2023 12:51:48 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (11/23/2023 12:51:48 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (11/23/2023 12:51:48 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (11/23/2023 12:51:48 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (11/23/2023 12:51:48 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (11/23/2023 12:51:48 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (11/23/2023 12:51:48 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (11/23/2023 12:51:48 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (11/23/2023 12:51:48 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:51:49 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.Deal) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (25) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (79) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (0) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (6) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (74) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (10) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (73) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.Deal) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (17) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (58) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (27) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (55) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (3) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (85) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (27) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:51:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (80) |> (11/23/2023 12:51:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.DisplayDrawPile) [drew stuff] |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 1, 3, 4)
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (System.Drawing.Bitmap) |> (11/23/2023 12:51:49 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:51:49 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:51:49 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:51:49 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:51:49 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:51:49 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:51:49 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:51:49 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:51:49 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:51:49 AM)
method; (PlayerClass.UpdatePoints) [57] |> (11/23/2023 12:51:49 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:51:49 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (blue 6) |> (11/23/2023 12:51:49 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:51:49 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:51:49 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:51:49 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:51:49 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:51:49 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:51:49 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:51:49 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:51:49 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:51:49 AM)
method; (PlayerClass.UpdatePoints) [65] |> (11/23/2023 12:51:49 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:51:49 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 6) |> (11/23/2023 12:51:49 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), i list; () |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (7)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (1), Top Card; (blue, 6) |> (11/23/2023 12:51:49 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 12:52:02 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:52:02 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 92), Value; (60) |> (11/23/2023 12:52:02 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:52:02 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:52:02 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (885, 885) |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.UpdatePoints) [121] |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (blue 6) |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.UpdatePoints) [130] |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 6) |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:52:02 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), i list; () |> (11/23/2023 12:52:02 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 6) |> (11/23/2023 12:52:02 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (11/23/2023 12:52:02 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 12:52:02 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2 |> (11/23/2023 12:52:02 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 12:52:02 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (6), error |> (11/23/2023 12:52:02 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:52:02 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:52:02 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:52:02 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:52:02 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (0) |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:52:02 AM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (885, 885) |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.UpdatePoints) [185] |> (11/23/2023 12:52:02 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:03 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 6) |> (11/23/2023 12:52:03 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:03 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 12:52:03 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:52:03 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:52:03 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:52:03 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:52:03 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 12:52:03 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:52:03 AM)
method; (PlayerClass.UpdatePoints) [189] |> (11/23/2023 12:52:03 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:03 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 6) |> (11/23/2023 12:52:03 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:52:03 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), i list; () |> (11/23/2023 12:52:03 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:52:03 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (8)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (2), Top Card; (green, 6) |> (11/23/2023 12:52:03 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (8)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (2), Top Card; (green, 6) |> (11/23/2023 12:52:03 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 12:52:07 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:52:07 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 91), Value; (75) |> (11/23/2023 12:52:07 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:52:07 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:52:07 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (475, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (915, 765) |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (915, 915) |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.UpdatePoints) [251] |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 6) |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.UpdatePoints) [248] |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 6) |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:52:07 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), i list; () |> (11/23/2023 12:52:07 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 6) |> (11/23/2023 12:52:07 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (11/23/2023 12:52:07 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 5 |> (11/23/2023 12:52:07 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (11/23/2023 12:52:07 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (8), error |> (11/23/2023 12:52:07 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:52:07 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:52:07 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:52:07 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:52:07 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (0) |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (475, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (915, 765) |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (915, 915) |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.UpdatePoints) [317] |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 8) |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:52:07 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.UpdatePoints) [299] |> (11/23/2023 12:52:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:08 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 8) |> (11/23/2023 12:52:08 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:52:08 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), i list; () |> (11/23/2023 12:52:08 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:52:08 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (9)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (green, 8) |> (11/23/2023 12:52:08 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (9)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (green, 8) |> (11/23/2023 12:52:08 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 12:52:09 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:52:09 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 90), Value; (54) |> (11/23/2023 12:52:09 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:52:09 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:52:09 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 12:52:09 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:09 AM)
method; (CardClass.SetPBLocation), x, y; (445, 765) |> (11/23/2023 12:52:09 AM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (11/23/2023 12:52:09 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:52:09 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:52:09 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:52:09 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:52:09 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:52:09 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:52:09 AM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (11/23/2023 12:52:09 AM)
method; (CardClass.SetPBLocation), x, y; (940, 765) |> (11/23/2023 12:52:09 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (940, 940) |> (11/23/2023 12:52:09 AM)
method; (PlayerClass.UpdatePoints) [384] |> (11/23/2023 12:52:09 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 8) |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.UpdatePoints) [350] |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 8) |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:52:10 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), i list; () |> (11/23/2023 12:52:10 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 8) |> (11/23/2023 12:52:10 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:52:10 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 89), Value; (48) |> (11/23/2023 12:52:10 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:52:10 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:52:10 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (445, 765) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (940, 765) |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (940, 940) |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.UpdatePoints) [451] |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 8) |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:52:10 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.UpdatePoints) [406] |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 8) |> (11/23/2023 12:52:10 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:52:10 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), i list; () |> (11/23/2023 12:52:10 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:52:10 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (10)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (green, 8) |> (11/23/2023 12:52:10 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (10)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (green, 8) |> (11/23/2023 12:52:10 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (8) |> (11/23/2023 12:52:12 AM)
method; (GameLogicClass.cardPB_Click), Card Index (8) |> (11/23/2023 12:52:12 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (8) |> (11/23/2023 12:52:13 AM)
method; (GameLogicClass.cardPB_Click), Card Index (8) |> (11/23/2023 12:52:13 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (8) |> (11/23/2023 12:52:13 AM)
method; (GameLogicClass.cardPB_Click), Card Index (8) |> (11/23/2023 12:52:13 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.cardPB_Click), Card Index (4) |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (2), error |> (11/23/2023 12:52:15 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 2), Player Index (1) |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (475, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (915, 765) |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (915, 915) |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.UpdatePoints) [516] |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 2) |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.UpdatePoints) [462] |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 2) |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), i list; () |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 2) |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:52:15 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 88), Value; (1) |> (11/23/2023 12:52:15 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (475, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (915, 765) |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (915, 915) |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.UpdatePoints) [581] |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 2) |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:52:15 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.UpdatePoints) [520] |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 2) |> (11/23/2023 12:52:15 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), i list; () |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (9)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (4), Top Card; (green, 2) |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (9)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (4), Top Card; (green, 2) |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (11/23/2023 12:52:15 AM)
method; (GameLogicClass.cardPB_Click), Card Index (3) |> (11/23/2023 12:52:15 AM)
method; (GameForm.GameForm_FormClosing) |> (11/23/2023 12:52:17 AM)
method; (Form_PauseMenu.closeBT_Click) [closes here??] --------------------------------------------------- |> (11/23/2023 12:52:18 AM)
Line final;  |> (11/23/2023 12:53:46 AM)
---------------------------------------------- |> (11/23/2023 12:53:46 AM)
Method; (SetupFormClass.SetupFormClass) [Start Up] |> (11/23/2023 12:53:46 AM)
method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2] |> (11/23/2023 12:53:53 AM)
method; (SetupFormClass.doneBT_Click) |> (11/23/2023 12:53:54 AM)
method; (Form_PauseMenu.Form_PauseMenu) |> (11/23/2023 12:53:54 AM)
method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870}) |> (11/23/2023 12:53:54 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1) |> (11/23/2023 12:53:54 AM)
method; (AIClass.AIClass()) [AI INIT] |> (11/23/2023 12:53:54 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (1) |> (11/23/2023 12:53:54 AM)
method; (GameLogicClass.MakeDrawPile) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (11/23/2023 12:53:54 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:53:55 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.Deal) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (66) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (22) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (15) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (64) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (79) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (98) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (3) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.Deal) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (3) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (13) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (21) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (13) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (68) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (74) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (63) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (46) |> (11/23/2023 12:53:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.DisplayDrawPile) [drew stuff] |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 1, 3, 4)
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (System.Drawing.Bitmap) |> (11/23/2023 12:53:55 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:53:55 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:53:55 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:53:55 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:53:55 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:53:55 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:53:55 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:53:55 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:53:55 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:53:55 AM)
method; (PlayerClass.UpdatePoints) [79] |> (11/23/2023 12:53:55 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:53:55 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 2) |> (11/23/2023 12:53:55 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:53:55 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:53:55 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:53:55 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:53:55 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:53:55 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:53:55 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:53:55 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:53:55 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:53:55 AM)
method; (PlayerClass.UpdatePoints) [32] |> (11/23/2023 12:53:55 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:53:55 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 2) |> (11/23/2023 12:53:55 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:53:55 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), i list; () |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (7)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (1), Top Card; (red, 2) |> (11/23/2023 12:53:55 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (6) |> (11/23/2023 12:54:02 AM)
method; (GameLogicClass.cardPB_Click), Card Index (6) |> (11/23/2023 12:54:02 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (3), error |> (11/23/2023 12:54:02 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:54:02 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:54:02 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:54:02 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:54:02 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (6), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 3), Player Index (1) |> (11/23/2023 12:54:02 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:54:02 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:54:02 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:54:02 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:54:02 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:54:02 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:54:02 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:54:02 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:54:02 AM)
method; (PlayerClass.UpdatePoints) [155] |> (11/23/2023 12:54:02 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:54:02 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 3) |> (11/23/2023 12:54:02 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:54:02 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:54:02 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:54:02 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:54:02 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:54:02 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:54:02 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:54:02 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:54:02 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:54:02 AM)
method; (PlayerClass.UpdatePoints) [64] |> (11/23/2023 12:54:02 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:54:02 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 3) |> (11/23/2023 12:54:02 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:54:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (11/23/2023 12:54:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:54:02 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), i list; () |> (11/23/2023 12:54:03 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:54:03 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 3) |> (11/23/2023 12:54:03 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (11/23/2023 12:54:03 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 12:54:03 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (11/23/2023 12:54:03 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 12:54:03 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (4), error |> (11/23/2023 12:54:03 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:54:03 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:54:03 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:54:03 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:54:03 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (0) |> (11/23/2023 12:54:03 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:54:03 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:54:03 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:54:03 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:54:03 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:54:03 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:54:03 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:54:03 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:54:03 AM)
method; (PlayerClass.UpdatePoints) [231] |> (11/23/2023 12:54:03 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:54:03 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 4) |> (11/23/2023 12:54:03 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:54:03 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 12:54:03 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:54:03 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:54:03 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:54:03 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:54:03 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 12:54:03 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:54:03 AM)
method; (PlayerClass.UpdatePoints) [92] |> (11/23/2023 12:54:03 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:54:03 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 4) |> (11/23/2023 12:54:03 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:54:03 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 12:54:03 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 12:54:03 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), i list; () |> (11/23/2023 12:54:03 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:54:03 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (red, 4) |> (11/23/2023 12:54:03 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (red, 4) |> (11/23/2023 12:54:03 AM)
method; (GameForm.GameForm_FormClosing) |> (11/23/2023 12:54:04 AM)
method; (Form_PauseMenu.closeBT_Click) [closes here??] --------------------------------------------------- |> (11/23/2023 12:54:06 AM)
Line final;  |> (11/23/2023 12:55:54 AM)
---------------------------------------------- |> (11/23/2023 12:55:54 AM)
Method; (SetupFormClass.SetupFormClass) [Start Up] |> (11/23/2023 12:55:54 AM)
method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2] |> (11/23/2023 12:55:57 AM)
method; (SetupFormClass.doneBT_Click) |> (11/23/2023 12:55:58 AM)
method; (Form_PauseMenu.Form_PauseMenu) |> (11/23/2023 12:55:58 AM)
method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870}) |> (11/23/2023 12:55:58 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1) |> (11/23/2023 12:55:58 AM)
method; (AIClass.AIClass()) [AI INIT] |> (11/23/2023 12:55:58 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (1) |> (11/23/2023 12:55:58 AM)
method; (GameLogicClass.MakeDrawPile) |> (11/23/2023 12:55:58 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:55:59 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.Deal) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (1) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (18) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (6) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (84) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (19) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (56) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (55) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.Deal) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (87) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (32) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (66) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (22) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (24) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (8) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (82) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (85) |> (11/23/2023 12:55:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.DisplayDrawPile) [drew stuff] |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 1, 3, 4)
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (System.Drawing.Bitmap) |> (11/23/2023 12:55:59 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:55:59 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:55:59 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:55:59 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:55:59 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:55:59 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:55:59 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:55:59 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:55:59 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:55:59 AM)
method; (PlayerClass.UpdatePoints) [60] |> (11/23/2023 12:55:59 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:55:59 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip) |> (11/23/2023 12:55:59 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:55:59 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:55:59 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:55:59 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:55:59 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:55:59 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:55:59 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:55:59 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:55:59 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:55:59 AM)
method; (PlayerClass.UpdatePoints) [48] |> (11/23/2023 12:55:59 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:55:59 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue skip) |> (11/23/2023 12:55:59 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 12:55:59 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), i list; () |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (7)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (1), Top Card; (blue, skip) |> (11/23/2023 12:55:59 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (11/23/2023 12:56:03 AM)
method; (GameLogicClass.cardPB_Click), Card Index (3) |> (11/23/2023 12:56:03 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (skip), error |> (11/23/2023 12:56:03 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:03 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:03 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:03 AM)
method; (GameLogicClass.CardClickLogic), In skip |> (11/23/2023 12:56:03 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:03 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:03 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (0) |> (11/23/2023 12:56:03 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:03 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:56:03 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:03 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:03 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:03 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:03 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:56:03 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:56:03 AM)
method; (PlayerClass.UpdatePoints) [100] |> (11/23/2023 12:56:03 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:03 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green skip) |> (11/23/2023 12:56:03 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:03 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:56:03 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:56:03 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:03 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:03 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:03 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:56:03 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:56:03 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:56:03 AM)
method; (PlayerClass.UpdatePoints) [96] |> (11/23/2023 12:56:03 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:04 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green skip) |> (11/23/2023 12:56:04 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:04 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 12:56:04 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:56:04 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), i list; () |> (11/23/2023 12:56:04 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:04 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (2), Top Card; (green, skip) |> (11/23/2023 12:56:04 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (11/23/2023 12:56:04 AM)
method; (GameLogicClass.cardPB_Click), Card Index (3) |> (11/23/2023 12:56:04 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:07 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 92), Value; (37) |> (11/23/2023 12:56:07 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.UpdatePoints) [146] |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green skip) |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.UpdatePoints) [144] |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green skip) |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:56:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), i list; () |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green skip) |> (11/23/2023 12:56:07 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0) |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:56:07 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1 |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (+2), add, 2 |> (11/23/2023 12:56:07 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:07 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 91), Value; (2) |> (11/23/2023 12:56:07 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:07 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 90), Value; (52) |> (11/23/2023 12:56:07 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.AddCards), cards added; (AddCards Index: 0 AddCards Index: 0 ) |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (0) |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (475, 765) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (915, 765) |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (915, 915) |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.UpdatePoints) [196] |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green +2) |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:56:07 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.UpdatePoints) [182] |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green +2) |> (11/23/2023 12:56:07 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 12:56:07 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), i list; () |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (9)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (green, +2) |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (7)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (green, +2) |> (11/23/2023 12:56:07 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:11 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 89), Value; (56) |> (11/23/2023 12:56:11 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (445, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (940, 765) |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (940, 940) |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.UpdatePoints) [252] |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green +2) |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.UpdatePoints) [220] |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green +2) |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:11 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 12:56:11 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), i list; () |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green +2) |> (11/23/2023 12:56:11 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 3), Value; (1) |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 12:56:11 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (4), Card index; (1), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2 |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (0), error |> (11/23/2023 12:56:11 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 0), Player Index (0) |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (445, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (940, 765) |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (940, 940) |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.UpdatePoints) [308] |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 0) |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:11 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.UpdatePoints) [258] |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 0) |> (11/23/2023 12:56:11 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:11 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 12:56:11 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), i list; () |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (10)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (4), Top Card; (green, 0) |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (10)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (4), Top Card; (green, 0) |> (11/23/2023 12:56:11 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 12:56:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 88), Value; (54) |> (11/23/2023 12:56:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:14 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:14 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (420, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (475, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (915, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (970, 765) |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (970, 970) |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.UpdatePoints) [368] |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 0) |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.UpdatePoints) [296] |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 0) |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (11/23/2023 12:56:14 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (11/23/2023 12:56:14 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), i list; () |> (11/23/2023 12:56:14 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 0) |> (11/23/2023 12:56:14 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 12:56:14 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2 |> (11/23/2023 12:56:14 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 12:56:14 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (3), error |> (11/23/2023 12:56:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:14 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:14 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:14 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:14 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 3), Player Index (0) |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (420, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (475, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (915, 765) |> (11/23/2023 12:56:14 AM)
method; (CardClass.SetPBLocation), x, y; (970, 765) |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (970, 970) |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.UpdatePoints) [428] |> (11/23/2023 12:56:14 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:15 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 3) |> (11/23/2023 12:56:15 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:15 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:56:15 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:15 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:15 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:56:15 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:56:15 AM)
method; (PlayerClass.UpdatePoints) [331] |> (11/23/2023 12:56:15 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:15 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 3) |> (11/23/2023 12:56:15 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:15 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:56:15 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 12:56:15 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (5), i list; () |> (11/23/2023 12:56:15 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:15 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (11)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (5), Top Card; (green, 3) |> (11/23/2023 12:56:15 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (11)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (5), Top Card; (green, 3) |> (11/23/2023 12:56:15 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (7) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.cardPB_Click), Card Index (7) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (3), error |> (11/23/2023 12:56:17 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (7), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 3), Player Index (1) |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (445, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (940, 765) |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (940, 940) |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.UpdatePoints) [485] |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 3) |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.UpdatePoints) [366] |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 3) |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:17 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 12:56:17 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (6), i list; () |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 3) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 12:56:17 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2 |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (+2), add, 2 |> (11/23/2023 12:56:17 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:17 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 87), Value; (8) |> (11/23/2023 12:56:17 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:17 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 86), Value; (45) |> (11/23/2023 12:56:17 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.AddCards), cards added; (AddCards Index: 0 AddCards Index: 0 ) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (0) |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (390, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (445, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (940, 765) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (995, 765) |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (995, 995) |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.UpdatePoints) [567] |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +2) |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:17 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.UpdatePoints) [391] |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +2) |> (11/23/2023 12:56:17 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:17 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:56:17 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (7), i list; () |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (12)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (7), Top Card; (red, +2) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (10)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (7), Top Card; (red, +2) |> (11/23/2023 12:56:17 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (10) |> (11/23/2023 12:56:19 AM)
method; (GameLogicClass.cardPB_Click), Card Index (10) |> (11/23/2023 12:56:19 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (skip), error |> (11/23/2023 12:56:19 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:19 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:19 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:19 AM)
method; (GameLogicClass.CardClickLogic), In skip |> (11/23/2023 12:56:19 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:19 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:19 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (10), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (0) |> (11/23/2023 12:56:19 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:19 AM)
method; (CardClass.SetPBLocation), x, y; (420, 765) |> (11/23/2023 12:56:19 AM)
method; (CardClass.SetPBLocation), x, y; (475, 765) |> (11/23/2023 12:56:19 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:56:19 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:19 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:19 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:19 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:19 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:19 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:56:19 AM)
method; (CardClass.SetPBLocation), x, y; (915, 765) |> (11/23/2023 12:56:19 AM)
method; (CardClass.SetPBLocation), x, y; (970, 765) |> (11/23/2023 12:56:19 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (970, 970) |> (11/23/2023 12:56:19 AM)
method; (PlayerClass.UpdatePoints) [629] |> (11/23/2023 12:56:19 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:19 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red skip) |> (11/23/2023 12:56:19 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:19 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:19 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:19 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:19 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:19 AM)
method; (PlayerClass.UpdatePoints) [416] |> (11/23/2023 12:56:19 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:19 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red skip) |> (11/23/2023 12:56:19 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:19 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (11/23/2023 12:56:19 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:56:19 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), i list; () |> (11/23/2023 12:56:19 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:19 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (11)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (8), Top Card; (red, skip) |> (11/23/2023 12:56:19 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (11/23/2023 12:56:21 AM)
method; (GameLogicClass.cardPB_Click), Card Index (4) |> (11/23/2023 12:56:21 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (9), error |> (11/23/2023 12:56:21 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:21 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:21 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:21 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:21 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (1) |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (445, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (940, 765) |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (940, 940) |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.UpdatePoints) [682] |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 9) |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.UpdatePoints) [441] |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 9) |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:21 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 12:56:21 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (11/23/2023 12:56:21 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), i list; () |> (11/23/2023 12:56:21 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 9) |> (11/23/2023 12:56:21 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:21 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 85), Value; (1) |> (11/23/2023 12:56:21 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:21 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:21 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (445, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (940, 765) |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (940, 940) |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.UpdatePoints) [735] |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 9) |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:21 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.UpdatePoints) [468] |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 9) |> (11/23/2023 12:56:21 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:21 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 12:56:21 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 12:56:21 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), i list; () |> (11/23/2023 12:56:22 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:22 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (10)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (9), Top Card; (red, 9) |> (11/23/2023 12:56:22 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (10)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (9), Top Card; (red, 9) |> (11/23/2023 12:56:22 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (11/23/2023 12:56:23 AM)
method; (GameLogicClass.cardPB_Click), Card Index (4) |> (11/23/2023 12:56:23 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (8), error |> (11/23/2023 12:56:23 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:23 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:23 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:23 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:23 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (1) |> (11/23/2023 12:56:23 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:23 AM)
method; (CardClass.SetPBLocation), x, y; (475, 765) |> (11/23/2023 12:56:23 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:56:23 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:23 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:23 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:23 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:23 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:23 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:56:23 AM)
method; (CardClass.SetPBLocation), x, y; (915, 765) |> (11/23/2023 12:56:23 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (915, 915) |> (11/23/2023 12:56:23 AM)
method; (PlayerClass.UpdatePoints) [780] |> (11/23/2023 12:56:23 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:23 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 8) |> (11/23/2023 12:56:23 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:23 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:56:23 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:23 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:23 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:56:23 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:56:23 AM)
method; (PlayerClass.UpdatePoints) [495] |> (11/23/2023 12:56:23 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:24 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 8) |> (11/23/2023 12:56:24 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:24 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:56:24 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 12:56:24 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (10), i list; () |> (11/23/2023 12:56:24 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:24 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 8) |> (11/23/2023 12:56:24 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (11/23/2023 12:56:24 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 12:56:24 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2 |> (11/23/2023 12:56:24 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 12:56:24 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (8), error |> (11/23/2023 12:56:24 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:24 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:24 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:24 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:24 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (0) |> (11/23/2023 12:56:24 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:24 AM)
method; (CardClass.SetPBLocation), x, y; (475, 765) |> (11/23/2023 12:56:24 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:56:24 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:24 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:24 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:24 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:24 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:24 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:56:24 AM)
method; (CardClass.SetPBLocation), x, y; (915, 765) |> (11/23/2023 12:56:24 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (915, 915) |> (11/23/2023 12:56:24 AM)
method; (PlayerClass.UpdatePoints) [825] |> (11/23/2023 12:56:24 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:24 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 8) |> (11/23/2023 12:56:24 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:24 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:24 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:24 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:24 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:24 AM)
method; (PlayerClass.UpdatePoints) [514] |> (11/23/2023 12:56:24 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:24 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 8) |> (11/23/2023 12:56:24 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:24 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 12:56:24 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 12:56:24 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (11), i list; () |> (11/23/2023 12:56:24 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:24 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (9)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (11), Top Card; (blue, 8) |> (11/23/2023 12:56:24 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (9)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (11), Top Card; (blue, 8) |> (11/23/2023 12:56:24 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.cardPB_Click), Card Index (4) |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (6), error |> (11/23/2023 12:56:25 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (1) |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (885, 885) |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.UpdatePoints) [864] |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 6) |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.UpdatePoints) [533] |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 6) |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (11/23/2023 12:56:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (12), i list; () |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 6) |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 12:56:25 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (7), error |> (11/23/2023 12:56:25 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 7), Player Index (0) |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (500, 765) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (885, 765) |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (885, 885) |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.UpdatePoints) [903] |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 7) |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:25 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.UpdatePoints) [545] |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (blue 7) |> (11/23/2023 12:56:25 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:56:25 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (13), i list; () |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (8)
Player1CardCount; (2)

    PlusAmount (0)
Discard Pile Count; (13), Top Card; (blue, 7) |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (8)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (13), Top Card; (blue, 7) |> (11/23/2023 12:56:25 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (7), error |> (11/23/2023 12:56:27 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 7), Player Index (1) |> (11/23/2023 12:56:27 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:27 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:56:27 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:27 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:27 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:27 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:27 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:27 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:56:27 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:56:27 AM)
method; (PlayerClass.UpdatePoints) [935] |> (11/23/2023 12:56:27 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:27 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 7) |> (11/23/2023 12:56:27 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:27 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:27 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:27 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 12:56:27 AM)
method; (PlayerClass.UpdatePoints) [557] |> (11/23/2023 12:56:27 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:27 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 7) |> (11/23/2023 12:56:27 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:56:27 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (14), i list; () |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:27 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 7) |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:56:27 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1 |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (2), error |> (11/23/2023 12:56:27 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:27 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 2), Player Index (0) |> (11/23/2023 12:56:28 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:28 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 12:56:28 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:28 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:28 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:28 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:28 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:28 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 12:56:28 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 12:56:28 AM)
method; (PlayerClass.UpdatePoints) [967] |> (11/23/2023 12:56:28 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:28 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 2) |> (11/23/2023 12:56:28 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:28 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:28 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (11/23/2023 12:56:28 AM)
method; (PlayerClass.UpdatePoints) [567] |> (11/23/2023 12:56:28 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:28 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 2) |> (11/23/2023 12:56:28 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:28 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 12:56:28 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:56:28 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (15), i list; () |> (11/23/2023 12:56:28 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:28 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (7)
Player1CardCount; (1)

    PlusAmount (0)
Discard Pile Count; (15), Top Card; (red, 2) |> (11/23/2023 12:56:28 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (7)
Player1CardCount; (2)

    PlusAmount (0)
Discard Pile Count; (15), Top Card; (red, 2) |> (11/23/2023 12:56:28 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (6) |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.cardPB_Click), Card Index (6) |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (5), error |> (11/23/2023 12:56:29 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (6), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 5), Player Index (1) |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.UpdatePoints) [994] |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 5) |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.UpdatePoints) [577] |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 5) |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:29 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (11/23/2023 12:56:29 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (16), i list; () |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 5) |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:29 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 84), Value; (75) |> (11/23/2023 12:56:29 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.UpdatePoints) [1021] |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 5) |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:29 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.UpdatePoints) [597] |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 5) |> (11/23/2023 12:56:29 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:29 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:56:29 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (16), i list; () |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (2)

    PlusAmount (0)
Discard Pile Count; (16), Top Card; (red, 5) |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (1)

    PlusAmount (0)
Discard Pile Count; (16), Top Card; (red, 5) |> (11/23/2023 12:56:29 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (1), error |> (11/23/2023 12:56:31 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (1) |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.UpdatePoints) [1047] |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 1) |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.UpdatePoints) [617] |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 1) |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:31 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 12:56:31 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (17), i list; () |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 1) |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:31 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 83), Value; (44) |> (11/23/2023 12:56:31 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.UpdatePoints) [1073] |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 1) |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:31 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.UpdatePoints) [643] |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 1) |> (11/23/2023 12:56:31 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:31 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 12:56:31 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (17), i list; () |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (17), Top Card; (red, 1) |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (2)

    PlusAmount (0)
Discard Pile Count; (17), Top Card; (red, 1) |> (11/23/2023 12:56:31 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 12:56:32 AM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (11/23/2023 12:56:32 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (1), error |> (11/23/2023 12:56:32 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:32 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:32 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:32 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:32 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (1) |> (11/23/2023 12:56:32 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:32 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:32 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:32 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:32 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:32 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:56:32 AM)
method; (PlayerClass.UpdatePoints) [1098] |> (11/23/2023 12:56:32 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:32 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 1) |> (11/23/2023 12:56:32 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:32 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:32 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:32 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:32 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:32 AM)
method; (PlayerClass.UpdatePoints) [669] |> (11/23/2023 12:56:32 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:33 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 1) |> (11/23/2023 12:56:33 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:33 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (11/23/2023 12:56:33 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (18), i list; () |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:33 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 1) |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 12:56:33 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (+2), add, 2 |> (11/23/2023 12:56:33 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:33 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 82), Value; (66) |> (11/23/2023 12:56:33 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:33 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 81), Value; (66) |> (11/23/2023 12:56:33 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.AddCards), cards added; (AddCards Index: 0 AddCards Index: 0 ) |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (0) |> (11/23/2023 12:56:33 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:33 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 12:56:33 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:33 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:33 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:33 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:33 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 12:56:33 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 12:56:33 AM)
method; (PlayerClass.UpdatePoints) [1144] |> (11/23/2023 12:56:33 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:33 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +2) |> (11/23/2023 12:56:33 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:33 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:33 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:33 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 12:56:33 AM)
method; (PlayerClass.UpdatePoints) [685] |> (11/23/2023 12:56:33 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:33 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow +2) |> (11/23/2023 12:56:33 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:33 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (11/23/2023 12:56:33 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (19), i list; () |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (2)

    PlusAmount (0)
Discard Pile Count; (19), Top Card; (yellow, +2) |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (19), Top Card; (yellow, +2) |> (11/23/2023 12:56:33 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:56:35 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (11/23/2023 12:56:35 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (9), error |> (11/23/2023 12:56:35 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:35 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:35 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:35 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:35 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (1) |> (11/23/2023 12:56:35 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:35 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:35 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:35 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:35 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:35 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:35 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:56:35 AM)
method; (PlayerClass.UpdatePoints) [1181] |> (11/23/2023 12:56:35 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:35 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (11/23/2023 12:56:35 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:35 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:35 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:35 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 12:56:35 AM)
method; (PlayerClass.UpdatePoints) [701] |> (11/23/2023 12:56:35 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:35 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 9) |> (11/23/2023 12:56:35 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 12:56:35 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 12:56:36 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (20), i list; () |> (11/23/2023 12:56:36 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:36 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 9) |> (11/23/2023 12:56:36 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:36 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 80), Value; (8) |> (11/23/2023 12:56:36 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:36 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:36 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 12:56:36 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:36 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:36 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:36 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:36 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:36 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:36 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:56:36 AM)
method; (PlayerClass.UpdatePoints) [1218] |> (11/23/2023 12:56:36 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:36 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (11/23/2023 12:56:36 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:36 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:36 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:36 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:36 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:36 AM)
method; (PlayerClass.UpdatePoints) [718] |> (11/23/2023 12:56:36 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:36 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (11/23/2023 12:56:36 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 12:56:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (11/23/2023 12:56:36 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (20), i list; () |> (11/23/2023 12:56:36 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:36 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (20), Top Card; (yellow, 9) |> (11/23/2023 12:56:36 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (2)

    PlusAmount (0)
Discard Pile Count; (20), Top Card; (yellow, 9) |> (11/23/2023 12:56:36 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (6), error |> (11/23/2023 12:56:38 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (1) |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:38 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:38 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:38 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:38 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.UpdatePoints) [1249] |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 6) |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:38 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:38 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:38 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.UpdatePoints) [735] |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 6) |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:38 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:56:38 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (21), i list; () |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 6) |> (11/23/2023 12:56:38 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:56:38 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1 |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (6), error |> (11/23/2023 12:56:38 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (0) |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:38 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:38 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:38 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:38 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.UpdatePoints) [1280] |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 6) |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:38 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:38 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.UpdatePoints) [746] |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 6) |> (11/23/2023 12:56:38 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:38 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 12:56:38 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (22), i list; () |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (2)

    PlusAmount (0)
Discard Pile Count; (22), Top Card; (red, 6) |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (22), Top Card; (red, 6) |> (11/23/2023 12:56:38 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (6), error |> (11/23/2023 12:56:40 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (1) |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:40 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:40 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:40 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.UpdatePoints) [1305] |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 6) |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:40 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:40 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.UpdatePoints) [757] |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 6) |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:40 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:56:40 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (23), i list; () |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 6) |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:56:40 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1 |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (1), error |> (11/23/2023 12:56:40 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:40 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (0) |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:40 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:40 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:40 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.UpdatePoints) [1330] |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 1) |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:40 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:40 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (11/23/2023 12:56:41 AM)
method; (PlayerClass.UpdatePoints) [767] |> (11/23/2023 12:56:41 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:41 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 1) |> (11/23/2023 12:56:41 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:41 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 12:56:41 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:56:41 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (24), i list; () |> (11/23/2023 12:56:41 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:41 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (3)
Player1CardCount; (1)

    PlusAmount (0)
Discard Pile Count; (24), Top Card; (yellow, 1) |> (11/23/2023 12:56:41 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (3)
Player1CardCount; (2)

    PlusAmount (0)
Discard Pile Count; (24), Top Card; (yellow, 1) |> (11/23/2023 12:56:41 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (4), error |> (11/23/2023 12:56:42 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (1) |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:42 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:42 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.UpdatePoints) [1351] |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 4) |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:42 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.UpdatePoints) [777] |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 4) |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:42 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 12:56:42 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (25), i list; () |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 4) |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:42 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 79), Value; (7) |> (11/23/2023 12:56:42 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:42 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:42 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.UpdatePoints) [1372] |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 4) |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:42 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:42 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.UpdatePoints) [787] |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4) |> (11/23/2023 12:56:42 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:42 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (11/23/2023 12:56:42 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (25), i list; () |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (2)
Player1CardCount; (2)

    PlusAmount (0)
Discard Pile Count; (25), Top Card; (yellow, 4) |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (2)
Player1CardCount; (1)

    PlusAmount (0)
Discard Pile Count; (25), Top Card; (yellow, 4) |> (11/23/2023 12:56:42 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 12:56:45 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:45 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 78), Value; (16) |> (11/23/2023 12:56:45 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:45 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:45 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 12:56:45 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:45 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:45 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:45 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:45 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:45 AM)
method; (PlayerClass.UpdatePoints) [1394] |> (11/23/2023 12:56:45 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 4) |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:46 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:46 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.UpdatePoints) [797] |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4) |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:46 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 12:56:46 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 12:56:46 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (25), i list; () |> (11/23/2023 12:56:46 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4) |> (11/23/2023 12:56:46 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:56:46 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 1 |> (11/23/2023 12:56:46 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 12:56:46 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (0), error |> (11/23/2023 12:56:46 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:46 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:46 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:46 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:46 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 0), Player Index (0) |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:46 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:46 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:46 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.UpdatePoints) [1416] |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 0) |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:46 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.UpdatePoints) [807] |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 0) |> (11/23/2023 12:56:46 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:46 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:56:46 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 12:56:46 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (26), i list; () |> (11/23/2023 12:56:46 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:46 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (3)
Player1CardCount; (1)

    PlusAmount (0)
Discard Pile Count; (26), Top Card; (yellow, 0) |> (11/23/2023 12:56:46 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (3)
Player1CardCount; (2)

    PlusAmount (0)
Discard Pile Count; (26), Top Card; (yellow, 0) |> (11/23/2023 12:56:46 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 12:56:47 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 77), Value; (1) |> (11/23/2023 12:56:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:47 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:47 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:47 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:47 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:47 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:47 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.UpdatePoints) [1442] |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 0) |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:47 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.UpdatePoints) [817] |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 0) |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:47 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 12:56:47 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (11/23/2023 12:56:47 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (26), i list; () |> (11/23/2023 12:56:47 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 0) |> (11/23/2023 12:56:47 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 76), Value; (56) |> (11/23/2023 12:56:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:47 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:47 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:47 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:47 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:47 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:47 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.UpdatePoints) [1468] |> (11/23/2023 12:56:47 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:48 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 0) |> (11/23/2023 12:56:48 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:48 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:48 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:48 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 12:56:48 AM)
method; (PlayerClass.UpdatePoints) [832] |> (11/23/2023 12:56:48 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:48 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 0) |> (11/23/2023 12:56:48 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:48 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 12:56:48 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (11/23/2023 12:56:48 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (26), i list; () |> (11/23/2023 12:56:48 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:48 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (2)

    PlusAmount (0)
Discard Pile Count; (26), Top Card; (yellow, 0) |> (11/23/2023 12:56:48 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (1)

    PlusAmount (0)
Discard Pile Count; (26), Top Card; (yellow, 0) |> (11/23/2023 12:56:48 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 12:56:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 75), Value; (49) |> (11/23/2023 12:56:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:49 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:49 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:49 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:49 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:49 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:49 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:49 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.UpdatePoints) [1503] |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 0) |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:49 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:49 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.UpdatePoints) [847] |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 0) |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:49 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 12:56:49 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (11/23/2023 12:56:49 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (26), i list; () |> (11/23/2023 12:56:49 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 0) |> (11/23/2023 12:56:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 74), Value; (41) |> (11/23/2023 12:56:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:49 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:49 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:49 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:56:49 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:56:49 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:56:49 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:56:49 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.UpdatePoints) [1538] |> (11/23/2023 12:56:49 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:50 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 0) |> (11/23/2023 12:56:50 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:50 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:50 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:50 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:50 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:50 AM)
method; (PlayerClass.UpdatePoints) [872] |> (11/23/2023 12:56:50 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:50 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 0) |> (11/23/2023 12:56:50 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:50 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (11/23/2023 12:56:50 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 12:56:50 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (26), i list; () |> (11/23/2023 12:56:50 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:50 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (26), Top Card; (yellow, 0) |> (11/23/2023 12:56:50 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (2)

    PlusAmount (0)
Discard Pile Count; (26), Top Card; (yellow, 0) |> (11/23/2023 12:56:50 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.cardPB_Click), Card Index (4) |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (9), error |> (11/23/2023 12:56:51 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (1) |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.UpdatePoints) [1564] |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 9) |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.UpdatePoints) [897] |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 9) |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:51 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 12:56:51 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (27), i list; () |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 9) |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:56:51 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 73), Value; (55) |> (11/23/2023 12:56:51 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.UpdatePoints) [1590] |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 9) |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:56:51 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.UpdatePoints) [929] |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 9) |> (11/23/2023 12:56:51 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:56:51 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:56:51 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-9) |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (27), i list; () |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (27), Top Card; (yellow, 9) |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (27), Top Card; (yellow, 9) |> (11/23/2023 12:56:51 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 12:57:00 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:57:00 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 72), Value; (3) |> (11/23/2023 12:57:00 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:57:00 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 12:57:00 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.UpdatePoints) [1624] |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 9) |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.UpdatePoints) [961] |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 9) |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:57:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (6) |> (11/23/2023 12:57:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 12:57:00 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (27), i list; () |> (11/23/2023 12:57:00 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 9) |> (11/23/2023 12:57:00 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 12:57:00 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 71), Value; (33) |> (11/23/2023 12:57:00 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 12:57:00 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 12:57:00 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.UpdatePoints) [1658] |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 9) |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 12:57:00 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.UpdatePoints) [1013] |> (11/23/2023 12:57:00 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 12:57:01 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 9) |> (11/23/2023 12:57:01 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 12:57:01 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 12:57:01 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 12:57:01 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (27), i list; () |> (11/23/2023 12:57:01 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 12:57:01 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (27), Top Card; (yellow, 9) |> (11/23/2023 12:57:01 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (27), Top Card; (yellow, 9) |> (11/23/2023 12:57:01 AM)
Line final;  |> (11/23/2023 1:10:07 AM)
---------------------------------------------- |> (11/23/2023 1:10:07 AM)
Method; (SetupFormClass.SetupFormClass) [Start Up] |> (11/23/2023 1:10:07 AM)
method; (SetupFormClass.twoPlayersBT_Click) [2v2; false, PlayerAmount = 2] |> (11/23/2023 1:10:13 AM)
method; (SetupFormClass.doneBT_Click) |> (11/23/2023 1:10:14 AM)
method; (Form_PauseMenu.Form_PauseMenu) |> (11/23/2023 1:10:14 AM)
method; (GameForm.GameForm), Width: (1440), Height; (870), Size; ({Width=1440, Height=870}) |> (11/23/2023 1:10:14 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (False), Team; (1) |> (11/23/2023 1:10:14 AM)
method; (AIClass.AIClass()) [AI INIT] |> (11/23/2023 1:10:14 AM)
method; (PlayerClass.PlayerClass) [Player init], is AI (True), Team; (1) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.MakeDrawPile) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_0.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_0.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_0.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (0),
    NormalPoints; (0),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_0.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_1.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_3.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_4.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_5.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_6.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_7.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_8.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_9.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_+2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_reverse.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (r),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\red_skip.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_1.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_3.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_4.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_5.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_6.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_7.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_8.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_9.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_+2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_reverse.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (y),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\yellow_skip.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_1.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_3.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_4.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_5.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_6.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_7.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_8.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_9.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_+2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_reverse.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (g),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\green_skip.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (1),
    NormalPoints; (1),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_1.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (2),
    NormalPoints; (2),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (3),
    NormalPoints; (3),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_3.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (4),
    NormalPoints; (4),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_4.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (5),
    NormalPoints; (5),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_5.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (6),
    NormalPoints; (6),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_6.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (7),
    NormalPoints; (7),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_7.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (8),
    NormalPoints; (8),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_8.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (9),
    NormalPoints; (9),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_9.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (+),
    NormalPoints; (10),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_+2.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (r),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_reverse.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (b),
    NormalNumber; (s),
    NormalPoints; (20),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\blue_skip.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (+),
    NormalPoints; (50),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_+4_wild.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 1:10:14 AM)
method; (CardClass.CardClass) [Card INIT],
    NormalColor; (w),
    NormalNumber; (w),
    NormalPoints; (40),
    Image; (C:\Users\travis\Documents\GitHub\uno\bin\Debug\\small\\wild_wild.png) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.Deal) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 107), Value; (72) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 106), Value; (8) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 105), Value; (0) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 104), Value; (16) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 103), Value; (43) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 102), Value; (72) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 101), Value; (45) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.Deal) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 100), Value; (66) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 99), Value; (15) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 98), Value; (39) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 97), Value; (77) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 96), Value; (69) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 95), Value; (84) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 94), Value; (69) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:14 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 93), Value; (60) |> (11/23/2023 1:10:14 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:14 AM)
method; (GameLogicClass.DisplayDrawPile) [drew stuff] |> (11/23/2023 1:10:15 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], Gamerules;
    do_DrawtoMatch (False),
    do_Flip (False),
    do_ChianAdds (False),
    do_2v2 (False, teams (1, 1, 3, 4)
    Player Amount (2)
    Card Amount (7)
Player Index; (0), Discard Pile Count; (1), Top Card; (System.Drawing.Bitmap) |> (11/23/2023 1:10:15 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:15 AM)
method; (CardClass.SetPBLocation), x, y; (530, 765) |> (11/23/2023 1:10:15 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 1:10:15 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:15 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:15 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:15 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 1:10:15 AM)
method; (CardClass.SetPBLocation), x, y; (860, 765) |> (11/23/2023 1:10:15 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 1:10:15 AM)
method; (PlayerClass.UpdatePoints) [41] |> (11/23/2023 1:10:15 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:15 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4) |> (11/23/2023 1:10:15 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:15 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 1:10:15 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:15 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:15 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:15 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:15 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:15 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 1:10:15 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 1:10:15 AM)
method; (PlayerClass.UpdatePoints) [54] |> (11/23/2023 1:10:15 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:15 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4) |> (11/23/2023 1:10:15 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:15 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 1:10:15 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 1:10:15 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (1), Added; (yellow 4; 4 Points) |> (11/23/2023 1:10:15 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:15 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (7)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (1), Top Card; (yellow, 4) |> (11/23/2023 1:10:15 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:22 AM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (11/23/2023 1:10:22 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (9), error |> (11/23/2023 1:10:22 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:22 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:22 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:22 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:22 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (1) |> (11/23/2023 1:10:22 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:22 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 1:10:22 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 1:10:22 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:22 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:22 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 1:10:22 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 1:10:22 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 1:10:22 AM)
method; (PlayerClass.UpdatePoints) [73] |> (11/23/2023 1:10:22 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:22 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (11/23/2023 1:10:22 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:22 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.UpdatePoints) [108] |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:23 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 1:10:23 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 1:10:23 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (2), Added; (yellow 9; 9 Points) |> (11/23/2023 1:10:23 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 9) |> (11/23/2023 1:10:23 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0) |> (11/23/2023 1:10:23 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:23 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (11/23/2023 1:10:23 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:23 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (8), error |> (11/23/2023 1:10:23 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:23 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:23 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:23 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:23 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (0) |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.UpdatePoints) [105] |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 8) |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:23 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.UpdatePoints) [154] |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 8) |> (11/23/2023 1:10:23 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:23 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 1:10:23 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 1:10:23 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (3), Added; (yellow 8; 8 Points) |> (11/23/2023 1:10:23 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:23 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (yellow, 8) |> (11/23/2023 1:10:23 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (3), Top Card; (yellow, 8) |> (11/23/2023 1:10:23 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (5), error |> (11/23/2023 1:10:24 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 5), Player Index (1) |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.UpdatePoints) [132] |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 5) |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.UpdatePoints) [200] |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 5) |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:24 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (11/23/2023 1:10:24 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (4), Added; (yellow 5; 5 Points) |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 5) |> (11/23/2023 1:10:24 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:24 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (4), error |> (11/23/2023 1:10:24 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (0) |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.UpdatePoints) [159] |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (yellow 4) |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:24 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.UpdatePoints) [242] |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4) |> (11/23/2023 1:10:24 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:24 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 1:10:24 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (5), Added; (yellow 4; 4 Points) |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (5), Top Card; (yellow, 4) |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (5), Top Card; (yellow, 4) |> (11/23/2023 1:10:24 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:28 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 92), Value; (87) |> (11/23/2023 1:10:28 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.UpdatePoints) [236] |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4) |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.UpdatePoints) [284] |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4) |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (5), Added; (Nothing) |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (yellow 4) |> (11/23/2023 1:10:28 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:28 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (4), error |> (11/23/2023 1:10:28 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (0) |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (555, 765) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (830, 765) |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.UpdatePoints) [313] |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4) |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:28 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.UpdatePoints) [322] |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 4) |> (11/23/2023 1:10:28 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:28 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (11/23/2023 1:10:28 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (6), Added; (blue 4; 4 Points) |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (6), Top Card; (blue, 4) |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (6)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (6), Top Card; (blue, 4) |> (11/23/2023 1:10:28 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.cardPB_Click), Card Index (4) |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (+2), add, 2 |> (11/23/2023 1:10:30 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:30 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 91), Value; (71) |> (11/23/2023 1:10:30 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:30 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 90), Value; (79) |> (11/23/2023 1:10:30 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.AddCards), cards added; (AddCards Index: 1 AddCards Index: 1 ) |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +2), Player Index (1) |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.UpdatePoints) [380] |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue +2) |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.UpdatePoints) [376] |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue +2) |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 1:10:30 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (7), Added; (blue +2; 10 Points) |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue +2) |> (11/23/2023 1:10:30 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 1:10:30 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2 |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (9), error |> (11/23/2023 1:10:30 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:30 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (0) |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:30 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.UpdatePoints) [447] |> (11/23/2023 1:10:30 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:31 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 9) |> (11/23/2023 1:10:31 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:31 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:31 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:31 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:31 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:31 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:31 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:31 AM)
method; (PlayerClass.UpdatePoints) [421] |> (11/23/2023 1:10:31 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:31 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 9) |> (11/23/2023 1:10:31 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:31 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 1:10:31 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 1:10:31 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (8), Added; (blue 9; 9 Points) |> (11/23/2023 1:10:31 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:31 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (8), Top Card; (blue, 9) |> (11/23/2023 1:10:31 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (8), Top Card; (blue, 9) |> (11/23/2023 1:10:31 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (7), error |> (11/23/2023 1:10:32 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 7), Player Index (1) |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.UpdatePoints) [507] |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 7) |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.UpdatePoints) [466] |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 7) |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 1:10:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-2) |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (9), Added; (blue 7; 7 Points) |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 7) |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (11/23/2023 1:10:32 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 4 |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (7), error |> (11/23/2023 1:10:32 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 7), Player Index (0) |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.UpdatePoints) [567] |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 7) |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:32 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.UpdatePoints) [504] |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (blue 7) |> (11/23/2023 1:10:32 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 1:10:32 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (10), Added; (blue 7; 7 Points) |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (10), Top Card; (blue, 7) |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (10), Top Card; (blue, 7) |> (11/23/2023 1:10:32 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (11/23/2023 1:10:35 AM)
method; (GameLogicClass.cardPB_Click), Card Index (3) |> (11/23/2023 1:10:35 AM)
method; (wildFormClass.wildFormClass) |> (11/23/2023 1:10:35 AM)
method; (wildFormClass.redBT_Click) [this.Tag = red] |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (+4_wild), add, 4 |> (11/23/2023 1:10:36 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:36 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 89), Value; (36) |> (11/23/2023 1:10:36 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:36 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 88), Value; (47) |> (11/23/2023 1:10:36 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:36 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 87), Value; (30) |> (11/23/2023 1:10:36 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:36 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 86), Value; (55) |> (11/23/2023 1:10:36 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.AddCards), cards added; (AddCards Index: 1 AddCards Index: 1 AddCards Index: 1 AddCards Index: 1 ) |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (3), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, +4_wild), Player Index (1) |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.UpdatePoints) [577] |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +4_wild) |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (500, 5) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (885, 5) |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (885, 885) |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.UpdatePoints) [557] |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +4_wild) |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (11/23/2023 1:10:36 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (1) |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (11), Added; (red +4_wild; 50 Points) |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red +4_wild) |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (11/23/2023 1:10:36 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 5 |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (4), error |> (11/23/2023 1:10:36 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:36 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (0) |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.UpdatePoints) [587] |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 4) |> (11/23/2023 1:10:36 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:36 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:37 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:37 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:37 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:37 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 1:10:37 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 1:10:37 AM)
method; (PlayerClass.UpdatePoints) [606] |> (11/23/2023 1:10:37 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:37 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 4) |> (11/23/2023 1:10:37 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:37 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 1:10:37 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 1:10:37 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (12), Added; (red 4; 4 Points) |> (11/23/2023 1:10:37 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:37 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (3)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (12), Top Card; (red, 4) |> (11/23/2023 1:10:37 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (3)
Player1CardCount; (8)

    PlusAmount (0)
Discard Pile Count; (12), Top Card; (red, 4) |> (11/23/2023 1:10:37 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (8), error |> (11/23/2023 1:10:38 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (1) |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.UpdatePoints) [589] |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 8) |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (530, 5) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (860, 5) |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (860, 860) |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.UpdatePoints) [655] |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 8) |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:38 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (11/23/2023 1:10:38 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (13), Added; (red 8; 8 Points) |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 8) |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (11/23/2023 1:10:38 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 5 |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (8), error |> (11/23/2023 1:10:38 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 8), Player Index (0) |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.UpdatePoints) [591] |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 8) |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:38 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.UpdatePoints) [696] |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 8) |> (11/23/2023 1:10:38 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:38 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 1:10:38 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (14), Added; (green 8; 8 Points) |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (2)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (14), Top Card; (green, 8) |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (2)
Player1CardCount; (7)

    PlusAmount (0)
Discard Pile Count; (14), Top Card; (green, 8) |> (11/23/2023 1:10:38 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (2), error |> (11/23/2023 1:10:39 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 2), Player Index (1) |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:39 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.UpdatePoints) [591] |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 2) |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:39 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 1:10:39 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:39 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:39 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:39 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:39 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.UpdatePoints) [737] |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 2) |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:39 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (2) |> (11/23/2023 1:10:39 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (15), Added; (green 2; 2 Points) |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 2) |> (11/23/2023 1:10:39 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 4), Value; (2) |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 1:10:39 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (5), Card index; (2), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2 |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (5), error |> (11/23/2023 1:10:39 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:39 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 5), Player Index (0) |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:39 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.UpdatePoints) [591] |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 5) |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:39 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:39 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:39 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:39 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:39 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.UpdatePoints) [773] |> (11/23/2023 1:10:39 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:40 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 5) |> (11/23/2023 1:10:40 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:40 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-5) |> (11/23/2023 1:10:40 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 1:10:40 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (16), Added; (green 5; 5 Points) |> (11/23/2023 1:10:40 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:40 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (1)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (16), Top Card; (green, 5) |> (11/23/2023 1:10:40 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (1)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (16), Top Card; (green, 5) |> (11/23/2023 1:10:40 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:41 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 85), Value; (38) |> (11/23/2023 1:10:41 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.UpdatePoints) [597] |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 5) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.UpdatePoints) [809] |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 5) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (16), Added; (Nothing) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 5) |> (11/23/2023 1:10:41 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 2), Value; (0) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:41 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (3), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (skip), error |> (11/23/2023 1:10:41 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.CardClickLogic), In skip |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, skip), Player Index (1) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.UpdatePoints) [603] |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green skip) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.UpdatePoints) [825] |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green skip) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:41 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (11/23/2023 1:10:41 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (17), Added; (green skip; 20 Points) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green skip) |> (11/23/2023 1:10:41 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:41 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (4), error |> (11/23/2023 1:10:41 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 4), Player Index (0) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.UpdatePoints) [609] |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 4) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:41 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.UpdatePoints) [837] |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 4) |> (11/23/2023 1:10:41 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:41 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (7) |> (11/23/2023 1:10:41 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (18), Added; (green 4; 4 Points) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (2)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (18), Top Card; (green, 4) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (2)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (18), Top Card; (green, 4) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (2)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (18), Top Card; (green, 4) |> (11/23/2023 1:10:41 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:43 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 84), Value; (7) |> (11/23/2023 1:10:43 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:43 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:43 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:43 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.UpdatePoints) [624] |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 4) |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:43 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:43 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:43 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.UpdatePoints) [849] |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 4) |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (18), Added; (Nothing) |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 4) |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:43 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (9), error |> (11/23/2023 1:10:43 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (0) |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:43 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:43 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:43 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.UpdatePoints) [639] |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 9) |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:43 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:43 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.UpdatePoints) [852] |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 9) |> (11/23/2023 1:10:43 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:43 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (4) |> (11/23/2023 1:10:43 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (19), Added; (green 9; 9 Points) |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (3)
Player1CardCount; (2)

    PlusAmount (0)
Discard Pile Count; (19), Top Card; (green, 9) |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (3)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (19), Top Card; (green, 9) |> (11/23/2023 1:10:43 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 1:10:44 AM)
method; (GameLogicClass.cardPB_Click), Card Index (2) |> (11/23/2023 1:10:44 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (9), error |> (11/23/2023 1:10:44 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:44 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:44 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:44 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:44 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 9), Player Index (1) |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:44 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:44 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.UpdatePoints) [645] |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 9) |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:44 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:44 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.UpdatePoints) [855] |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 9) |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:44 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 1:10:44 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 1:10:44 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (20), Added; (red 9; 9 Points) |> (11/23/2023 1:10:44 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 9) |> (11/23/2023 1:10:44 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:44 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 83), Value; (31) |> (11/23/2023 1:10:44 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:44 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:44 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:44 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:44 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.UpdatePoints) [651] |> (11/23/2023 1:10:44 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 9) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:45 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:45 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:45 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.UpdatePoints) [878] |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 9) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (20), Added; (Nothing) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (2)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (20), Top Card; (red, 9) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (2)
Player1CardCount; (2)

    PlusAmount (0)
Discard Pile Count; (20), Top Card; (red, 9) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (0), error |> (11/23/2023 1:10:45 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 0), Player Index (1) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:45 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.UpdatePoints) [657] |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:45 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:45 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:45 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.UpdatePoints) [901] |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:45 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 1:10:45 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (21), Added; (red 0; 0 Points) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:45 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 82), Value; (74) |> (11/23/2023 1:10:45 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:45 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.UpdatePoints) [663] |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:45 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:45 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:45 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:45 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.UpdatePoints) [944] |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:45 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (21), Added; (Nothing) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (1)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (21), Top Card; (red, 0) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (1)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (21), Top Card; (red, 0) |> (11/23/2023 1:10:45 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 1:10:47 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:47 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 81), Value; (65) |> (11/23/2023 1:10:47 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:47 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:47 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 1:10:47 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:47 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:47 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:47 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 1:10:47 AM)
method; (PlayerClass.UpdatePoints) [689] |> (11/23/2023 1:10:47 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:47 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:47 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:47 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:47 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:47 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:47 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:47 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 1:10:47 AM)
method; (PlayerClass.UpdatePoints) [987] |> (11/23/2023 1:10:47 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:48 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:48 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:48 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (21), Added; (Nothing) |> (11/23/2023 1:10:48 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:48 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:48 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:48 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 80), Value; (68) |> (11/23/2023 1:10:48 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:48 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:48 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 1:10:48 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:48 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:48 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:48 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 1:10:48 AM)
method; (PlayerClass.UpdatePoints) [715] |> (11/23/2023 1:10:48 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:48 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:48 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:48 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:48 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:48 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:48 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:48 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:48 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:48 AM)
method; (PlayerClass.UpdatePoints) [1034] |> (11/23/2023 1:10:48 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:48 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:48 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:48 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (21), Added; (Nothing) |> (11/23/2023 1:10:48 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:48 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (2)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (21), Top Card; (red, 0) |> (11/23/2023 1:10:48 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (2)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (21), Top Card; (red, 0) |> (11/23/2023 1:10:48 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 1:10:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 79), Value; (59) |> (11/23/2023 1:10:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:49 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:49 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.UpdatePoints) [742] |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.UpdatePoints) [1081] |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:49 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (21), Added; (Nothing) |> (11/23/2023 1:10:49 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:49 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:49 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 78), Value; (44) |> (11/23/2023 1:10:49 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:49 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:49 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.UpdatePoints) [769] |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:49 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.UpdatePoints) [1134] |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 0) |> (11/23/2023 1:10:49 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:49 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (21), Added; (Nothing) |> (11/23/2023 1:10:49 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:49 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (3)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (21), Top Card; (red, 0) |> (11/23/2023 1:10:49 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (3)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (21), Top Card; (red, 0) |> (11/23/2023 1:10:49 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 1:10:50 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:50 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 77), Value; (11) |> (11/23/2023 1:10:50 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:50 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:50 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 1:10:50 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:50 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 1:10:50 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:50 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:50 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 1:10:50 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 1:10:50 AM)
method; (PlayerClass.UpdatePoints) [797] |> (11/23/2023 1:10:50 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 0) |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.UpdatePoints) [1187] |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 0) |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:51 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (21), Added; (Nothing) |> (11/23/2023 1:10:51 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 0) |> (11/23/2023 1:10:51 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (11/23/2023 1:10:51 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 5 |> (11/23/2023 1:10:51 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (5) |> (11/23/2023 1:10:51 AM)
method; (GameLogicClass.CardPlay), c_card; (red) (6), error |> (11/23/2023 1:10:51 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:51 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:51 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:51 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:51 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (5), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (0) |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.UpdatePoints) [825] |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 6) |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:51 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.UpdatePoints) [1234] |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 6) |> (11/23/2023 1:10:51 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:51 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 1:10:51 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (11/23/2023 1:10:51 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (22), Added; (red 6; 6 Points) |> (11/23/2023 1:10:51 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:51 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (22), Top Card; (red, 6) |> (11/23/2023 1:10:51 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (4)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (22), Top Card; (red, 6) |> (11/23/2023 1:10:51 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (3) |> (11/23/2023 1:10:52 AM)
method; (GameLogicClass.cardPB_Click), Card Index (3) |> (11/23/2023 1:10:52 AM)
method; (GameLogicClass.DrawPile_Clicked) |> (11/23/2023 1:10:52 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:52 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 76), Value; (74) |> (11/23/2023 1:10:52 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:52 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:52 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (1), add one |> (11/23/2023 1:10:52 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:52 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 1:10:52 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:52 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:52 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:52 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 1:10:52 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:52 AM)
method; (PlayerClass.UpdatePoints) [893] |> (11/23/2023 1:10:52 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 6) |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.UpdatePoints) [1281] |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 6) |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:53 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (22), Added; (Nothing) |> (11/23/2023 1:10:53 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 6) |> (11/23/2023 1:10:53 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:10:53 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 75), Value; (10) |> (11/23/2023 1:10:53 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:53 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player 0 |> (11/23/2023 1:10:53 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (585, 765) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (805, 765) |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.UpdatePoints) [961] |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (red 6) |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:53 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.UpdatePoints) [1328] |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (red 6) |> (11/23/2023 1:10:53 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:53 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (22), Added; (Nothing) |> (11/23/2023 1:10:53 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:53 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (22), Top Card; (red, 6) |> (11/23/2023 1:10:53 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (False),
    Player0CardCount; (5)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (22), Top Card; (red, 6) |> (11/23/2023 1:10:53 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (4) |> (11/23/2023 1:10:54 AM)
method; (GameLogicClass.cardPB_Click), Card Index (4) |> (11/23/2023 1:10:54 AM)
method; (wildFormClass.wildFormClass) |> (11/23/2023 1:10:54 AM)
method; (wildFormClass.greenBT_Click) [this.Tag = green] |> (11/23/2023 1:10:55 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (wild), wild, green |> (11/23/2023 1:10:55 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:55 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:55 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:55 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:55 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (4), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, wild), Player Index (1) |> (11/23/2023 1:10:55 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:55 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 1:10:55 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:55 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:55 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 1:10:55 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 1:10:55 AM)
method; (PlayerClass.UpdatePoints) [989] |> (11/23/2023 1:10:55 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:55 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green wild) |> (11/23/2023 1:10:55 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:55 AM)
method; (CardClass.SetPBLocation), x, y; (555, 5) |> (11/23/2023 1:10:55 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:55 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:55 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:55 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:55 AM)
method; (CardClass.SetPBLocation), x, y; (830, 5) |> (11/23/2023 1:10:55 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (830, 830) |> (11/23/2023 1:10:55 AM)
method; (PlayerClass.UpdatePoints) [1375] |> (11/23/2023 1:10:55 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:55 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green wild) |> (11/23/2023 1:10:55 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:55 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-6) |> (11/23/2023 1:10:55 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-7) |> (11/23/2023 1:10:56 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (23), Added; (green wild; 40 Points) |> (11/23/2023 1:10:56 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:56 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green wild) |> (11/23/2023 1:10:56 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 1:10:56 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2 |> (11/23/2023 1:10:56 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 1:10:56 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (reverse), reverce, True |> (11/23/2023 1:10:56 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:56 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 1:10:56 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:56 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 1:10:56 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (0) |> (11/23/2023 1:10:56 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:56 AM)
method; (CardClass.SetPBLocation), x, y; (610, 765) |> (11/23/2023 1:10:56 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:10:56 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:10:56 AM)
method; (CardClass.SetPBLocation), x, y; (775, 765) |> (11/23/2023 1:10:56 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 1:10:56 AM)
method; (PlayerClass.UpdatePoints) [1017] |> (11/23/2023 1:10:56 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:56 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green reverse) |> (11/23/2023 1:10:56 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:56 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:56 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:56 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:56 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:56 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:56 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:56 AM)
method; (PlayerClass.UpdatePoints) [1402] |> (11/23/2023 1:10:56 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:56 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green reverse) |> (11/23/2023 1:10:56 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:56 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 1:10:56 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 1:10:56 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (24), Added; (green reverse; 20 Points) |> (11/23/2023 1:10:56 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:56 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (4)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (24), Top Card; (green, reverse) |> (11/23/2023 1:10:56 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (4)
Player1CardCount; (6)

    PlusAmount (0)
Discard Pile Count; (24), Top Card; (green, reverse) |> (11/23/2023 1:10:56 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (reverse), reverce, False |> (11/23/2023 1:10:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player +1 |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (1), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (1) |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.UpdatePoints) [1025] |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green reverse) |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (585, 5) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (805, 5) |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (805, 805) |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.UpdatePoints) [1429] |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green reverse) |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:57 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-1) |> (11/23/2023 1:10:57 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (3) |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (25), Added; (green reverse; 20 Points) |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green reverse) |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 1:10:57 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (1), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 2 |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (2) |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (reverse), reverce, True |> (11/23/2023 1:10:57 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (2), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, reverse), Player Index (0) |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (640, 765) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (750, 765) |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.UpdatePoints) [1033] |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue reverse) |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:10:57 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.UpdatePoints) [1436] |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue reverse) |> (11/23/2023 1:10:57 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:10:57 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (5) |> (11/23/2023 1:10:57 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-8) |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (26), Added; (blue reverse; 20 Points) |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (3)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (26), Top Card; (blue, reverse) |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (3)
Player1CardCount; (5)

    PlusAmount (0)
Discard Pile Count; (26), Top Card; (blue, reverse) |> (11/23/2023 1:10:57 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (1) |> (11/23/2023 1:10:58 AM)
method; (GameLogicClass.cardPB_Click), Card Index (1) |> (11/23/2023 1:10:58 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:10:59 AM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (11/23/2023 1:10:59 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (6), error |> (11/23/2023 1:10:59 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:10:59 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 1:10:59 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:10:59 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 6), Player Index (1) |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:11:00 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:11:00 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.UpdatePoints) [1035] |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (blue 6) |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:11:00 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:11:00 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:11:00 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:11:00 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.UpdatePoints) [1443] |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 6) |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:11:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 1:11:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-10) |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (27), Added; (blue 6; 6 Points) |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 6) |> (11/23/2023 1:11:00 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 1), Value; (0) |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:11:00 AM)
Method; (AIClass.Play()) [AI Play], Current player team; (1), Player e_Hand amount; (2), Card index; (0), Card (e_Hand); (System.Drawing.Bitmap), game.is_Flipped; (False); CardIndex (Hand); 0 |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.CardPlay), c_card; (blue) (1), error |> (11/23/2023 1:11:00 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (0) |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:11:00 AM)
method; (CardClass.SetPBLocation), x, y; (665, 765) |> (11/23/2023 1:11:00 AM)
method; (CardClass.SetPBLocation), x, y; (720, 765) |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (720, 720) |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.UpdatePoints) [1037] |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 1) |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:11:00 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:11:00 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:11:00 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.UpdatePoints) [1449] |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (blue 1) |> (11/23/2023 1:11:00 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:11:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (8) |> (11/23/2023 1:11:00 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (0) |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (28), Added; (blue 1; 1 Points) |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (2)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (28), Top Card; (blue, 1) |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (2)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (28), Top Card; (blue, 1) |> (11/23/2023 1:11:00 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.CardPlay), c_card; (green) (1), error |> (11/23/2023 1:11:02 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (1) |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:11:02 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.UpdatePoints) [1038] |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 1) |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:11:02 AM)
method; (CardClass.SetPBLocation), x, y; (640, 5) |> (11/23/2023 1:11:02 AM)
method; (CardClass.SetPBLocation), x, y; (695, 5) |> (11/23/2023 1:11:02 AM)
method; (CardClass.SetPBLocation), x, y; (750, 5) |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (750, 750) |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.UpdatePoints) [1455] |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 1) |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:11:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-4) |> (11/23/2023 1:11:02 AM)
method; (RandomNumber.Between), Between; (min: -10, max: 10), Value; (-3) |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (29), Added; (green 1; 1 Points) |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 1) |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.CardClass) |> (11/23/2023 1:11:02 AM)
method; (RandomNumber.Between), Between; (min: 0, max: 74), Value; (41) |> (11/23/2023 1:11:02 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.NextPlayer), current; (1), max (2), next player -1 0 |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.DrawPileClickLogic), Player index; (0), add one |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:11:02 AM)
method; (CardClass.SetPBLocation), x, y; (695, 765) |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (695, 695) |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.UpdatePoints) [1039] |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (System.Windows.Forms.PictureBox, SizeMode: StretchImage, ), Top deck (green 1) |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:11:02 AM)
method; (CardClass.SetPBLocation), x, y; (610, 5) |> (11/23/2023 1:11:02 AM)
method; (CardClass.SetPBLocation), x, y; (665, 5) |> (11/23/2023 1:11:02 AM)
method; (CardClass.SetPBLocation), x, y; (720, 5) |> (11/23/2023 1:11:02 AM)
method; (CardClass.SetPBLocation), x, y; (775, 5) |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.FindCardPosition), Positions x,y (775, 775) |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.UpdatePoints) [1466] |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.DrawCards) [Player.Team == 1 || Game.is_Flipped] |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.EligableCards) [find e_Hand]; eHand; (), Top deck (green 1) |> (11/23/2023 1:11:02 AM)
method; (PlayerClass.ActivateClick) |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.DisplayDiscardPile), Discard Pile Count; (29), Added; (Nothing) |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.DisplayDrawPile) [nothing to do] |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (1)
Player1CardCount; (4)

    PlusAmount (0)
Discard Pile Count; (29), Top Card; (green, 1) |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.GameLogicClass) [Game INIT], UpdateScreen;
    is_Flipped (False),
    is_Reverced (True),
    Player0CardCount; (1)
Player1CardCount; (3)

    PlusAmount (0)
Discard Pile Count; (29), Top Card; (green, 1) |> (11/23/2023 1:11:02 AM)
method; (GameLogicClass.FindPictureInList), Card Index; (0) |> (11/23/2023 1:11:03 AM)
method; (GameLogicClass.cardPB_Click), Card Index (0) |> (11/23/2023 1:11:03 AM)
method; (GameLogicClass.CardPlay), c_card; (yellow) (1), error |> (11/23/2023 1:11:03 AM)
method; (Extensions.pop), Thing Popped; (uno.CardClass) |> (11/23/2023 1:11:03 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 1:11:03 AM)
method; (GameLogicClass.AddLogic) |> (11/23/2023 1:11:03 AM)
method; (GameLogicClass.NextPlayer), current; (0), max (2), next player max-1 |> (11/23/2023 1:11:03 AM)
method; (GameLogicClass.CardClickLogic), Card Index; (0), Card Color; (System.Drawing.Bitmap), Top Deck (System.Windows.Forms.PictureBox, SizeMode: StretchImage, 1), Player Index (1) |> (11/23/2023 1:11:03 AM)
method; (WinConditonForm.WinConditonForm) |> (11/23/2023 1:11:03 AM)
method; (PlayerClass.DeactivateClick) |> (11/23/2023 1:11:03 AM)
